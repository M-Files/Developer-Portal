<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MFiles.VAF.Configuration</name>
    </assembly>
    <members>
        <member name="T:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase">
             <summary>
             Base implementation of best practices for managing ConfigurationDomains
             and interacting with MFAdmin's configurator.
             
             This base implementation can register/unregister root nodes at a given 
             configuration extension point, corresponding to one of the 
             <see cref="T:MFiles.VAF.Configuration.Domain.ConfigurationDomain.DefaultNamespaces"/>.
             
             Implementations of this class are responsible for:
             
            		- Creating and resolving references for nodes anywhere in the hierarchy
            		  so base methods know how to refer to nodes, and can resolve them easily
            		  using <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.ResolveNodeReference(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,System.String)"/> 
            		  and <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.GetNodeReference(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)"/>).
            
            		- Generating the correct <see cref="T:MFiles.VAF.Configuration.Interfaces.Domain.SourceDefinition"/>s and 
            		  <see cref="T:MFiles.VAF.Configuration.Interfaces.Domain.MethodSourceDefinition"/>s for MFAdmin to communicate 
            		  back with the M-Files server using 
            		  <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.CreateSourceDefinition(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation,MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand,System.String[])"/>,
            		  <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.CreateReadWriteConfigurationSourceDefinition(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)"/>, and
            		  <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.CreateCommandMethodSource(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation,System.String)"/>.
            
            		- Ensuring requests from MFAdmin are received and routed back to this manager's
            		  <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.ExecuteBuiltInCommand(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation,MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand,System.String[])"/>
            		  and <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.ExecuteCustomCommand(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation,System.String,System.String[])"/>
            		  methods as appropriate.
             </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.Vault">
            <summary>
            The vault for which the configurations are being managed.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.RegistrationNamespace">
            <summary>
            The namespace where the root nodes are registered.
            Should be one of the values specified in <see cref="T:MFiles.VAF.Configuration.Domain.ConfigurationDomain.DefaultNamespaces"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.RegisteredRootNodes">
            <summary>
            List of nodes that have been registered through this admin configuration manager.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.RootParentId">
            <summary>
            The id of the domain to which root nodes are anchored.
            Depends on where the root nodes are registered.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.RootNodes">
            <summary>
            Currently registered root nodes.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.#ctor(MFilesAPI.Vault,System.String)">
             <summary>
             Constructor.
             </summary>
             <param name="vault">The vault for which the configurations are being managed.</param>
             <param name="registrationNamespace">
            		The namespace where the root nodes are registered.
            		Should be one of the values specified in <see cref="T:MFiles.VAF.Configuration.Domain.ConfigurationDomain.DefaultNamespaces"/>.
            		Leave empty to skip registration/unregistration.
            </param>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.GetNodeReference(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Gets a reference for a node that can be used in a directive.
            Typically this is the node id, or some form of path or both.
            </summary>
            <param name="nodeLocation">The location of the node to create a reference to.</param>
            <returns>The node location's reference, from which it can be resolved from again.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.ResolveNodeReference(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,System.String)">
            <summary>
            Resolves a node and its location from a reference.
            </summary>
            <param name="context">The context of the node request.</param>
            <param name="reference">The node reference.</param>
            <returns>The node location to which the reference referred to.</returns>
            <remarks>Should throw a not found exception, if not found.</remarks>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.CreateSourceDefinition(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation,MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand,System.String[])">
            <summary>
            Creates a standard read-only source definition that MFAdmin can
            use to request specific information from the server.
            </summary>
            <param name="nodeLocation">The node to create the source definition for.</param>
            <param name="builtInCommand">The built-in command the source definition will trigger.</param>
            <param name="argNames">
            The names of expected arguments that the source definition may/will be triggered with.
            </param>
            <returns>Router compatible source definition.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.CreateReadWriteConfigurationSourceDefinition(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Creates a read-write source definition that MFAdmin can
            use to read and write a node's configuration.
            </summary>
            <param name="nodeLocation">The node to create the source definition for.</param>
            <returns>Router compatible source definition.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.CreateCommandMethodSource(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation,System.String)">
            <summary>
            Creates a method source MFAdmin can use to trigger a custom command.
            </summary>
            <param name="nodeLocation">The node that defines the command.</param>
            <param name="commandId">The command id.</param>
            <returns>Router compatible method source.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.ProcessRequest(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,System.String,System.String,System.String[])">
            <summary>
            Executes a command for a node and returns the serialized results.
            </summary>
            <param name="context">The request context that is triggering the command.</param>
            <param name="domainPath">The path of the node to trigger the command on.</param>
            <param name="command">The name of the command to trigger.</param>
            <param name="args">Optional arguments to pass to the command.</param>
            <returns>The serialized command response.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.ProcessRequest(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation,System.String,System.String[])">
            <summary>
            Executes a command for a node and returns the serialized results.
            </summary>
            <param name="context">The request context that is triggering the command.</param>
            <param name="nodeLocation">The the node to trigger the command on.</param>
            <param name="command">The name of the command to trigger.</param>
            <param name="args">Optional arguments to pass to the command.</param>
            <returns>The serialized command response.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.ExecuteBuiltInCommand(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation,MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand,System.String[])">
            <summary>
            Executes a built-in node command.
            </summary>
            <param name="context">The request context that is triggering the command.</param>
            <param name="nodeLocation">The the node to trigger the command on.</param>
            <param name="command">The built-in command to trigger.</param>
            <param name="args">Optional arguments to pass to the command.</param>
            <returns>The command response.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.ExecuteCustomCommand(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation,System.String,System.String[])">
            <summary>
            Executes a custom node command.
            </summary>
            <param name="context">The request context that is triggering the command.</param>
            <param name="nodeLocation">The the node to trigger the command on.</param>
            <param name="commandId">The id of the custom command to trigger.</param>
            <param name="args">Optional arguments to pass to the command.</param>
            <returns>The command response.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.GetSubDomains(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation,System.Int32)">
             <summary>
             Delegates the <see cref="F:MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand.GetSubDomains"/> command to the node.
             </summary>
             <param name="context">The request context that is triggering the command.</param>
             <param name="nodeLocation">The the node to trigger the command on.</param>
             <param name="maxDepth">
                Maximum depth to return sub-domain definitions for.
                Once the max depth is reached, a source definition will be returned, and MFAdmin
                can follow the source to retrieve lower levels of sub domain definitions.
            </param>
             <returns>Definitions of the node's subdomains.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.GetDashboard(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Delegates the <see cref="F:MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand.GetDashboard"/> command to the node.
            </summary>
            <param name="context">The request context that is triggering the command.</param>
            <param name="nodeLocation">The the node to trigger the command on.</param>
            <returns>HTML string as dashboard content.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.GetConfiguration(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Delegates the <see cref="F:MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand.GetConfiguration"/> command to the node.
            </summary>
            <param name="context">The request context that is triggering the command.</param>
            <param name="nodeLocation">The the node to trigger the command on.</param>
            <returns>The node's configuration</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.SaveConfiguration(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation,System.String)">
            <summary>
            Delegates the <see cref="F:MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand.SaveConfiguration"/> command to the node.
            </summary>
            <param name="context">The request context that is triggering the command.</param>
            <param name="nodeLocation">The the node to trigger the command on.</param>
            <param name="configuration">The configuration text to save.</param>
            <returns>Response for the client.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.GetSchema(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Delegates the <see cref="F:MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand.GetSchema"/> command to the node.
            </summary>
            <param name="context">The request context that is triggering the command.</param>
            <param name="nodeLocation">The the node to trigger the command on.</param>
            <returns>The node's configuration schema</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.Validate(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Delegates the <see cref="F:MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand.Validate"/> command to the node.
            </summary>
            <param name="context">The request context that is triggering the command.</param>
            <param name="nodeLocation">The the node to trigger the command on.</param>
            <returns>Validation findings.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.GetStatus(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Delegates the <see cref="F:MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand.GetStatus"/> command to the node.
            </summary>
            <param name="context">The request context that is triggering the command.</param>
            <param name="nodeLocation">The the node to trigger the command on.</param>
            <returns>Validation findings.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.GetCommands(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Delegates the <see cref="F:MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand.GetCommands"/> command to the node.
            </summary>
            <param name="context">The request context that is triggering the command.</param>
            <param name="nodeLocation">The the node to trigger the command on.</param>
            <returns>The node's commands.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.CreateDomainDefinition(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation,System.Int32)">
             <summary>
             Converts a <see cref="T:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode"/> into a serializable 
             <see cref="T:MFiles.VAF.Configuration.Domain.ConfigurationDomain"/> understood by MFAdmin.
             </summary>
             <param name="context">The request context that is triggering the command.</param>
             <param name="nodeLocation">The the node to trigger the command on.</param>
             <param name="maxDepth">
                Maximum depth to return sub-domain definitions for.
                Once the max depth is reached, a source definition will be returned, and MFAdmin
                can follow the source to retrieve lower levels of sub domain definitions.
            </param>
             <returns>Definitions of the node's subdomains.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.CreateCommandDefinition(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation,MFiles.VAF.Configuration.AdminConfigurations.CustomDomainCommand)">
            <summary>
            Converts a <see cref="T:MFiles.VAF.Configuration.AdminConfigurations.CustomDomainCommand"/> into a serializable
            <see cref="T:MFiles.VAF.Configuration.Interfaces.Domain.ConfigurationDomainCommand"/> understood by MFAdmin.
            </summary>
            <param name="nodeLocation">The node that defines the custom command.</param>
            <param name="cmd">The custom command definition.</param>
            <returns>A definition of the command that can be triggered from MFAdmin.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.AddRootNode(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode)">
            <summary>
            Registers the root node and all of its subnodes to M-Files Admin.
            </summary>
            <param name="node">The node to register.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.UnRegisterRootNode(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode)">
            <summary>
            Removes the registration of the given domain.
            </summary>
            <param name="node">The node to unregister.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase.Dispose">
            <summary>
            Disposes of the manager and unregistered all domains that has been registered by it.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand">
            <summary>
            List of built-in domain commands.
            Not all commands are supported by all domains.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand.GetDomain">
            <summary>
            Retrieves the full definition of a domain.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand.GetSubDomains">
            <summary>
            Retrieves a full list of the domain's sub-domains.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand.GetStatus">
            <summary>
            Retrieves a definition of the domain's status summary.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand.GetDashboard">
            <summary>
            Retrieves the domain's full dashboard content.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand.GetConfiguration">
            <summary>
            Retrieves the domain's current configuration.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand.SaveConfiguration">
            <summary>
            Saves a new configuration for the domain.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand.GetSchema">
            <summary>
            Retrieves the schema definition of the domain's configuration.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand.Validate">
            <summary>
            Retrieves validation findings for the domain's current configuration/state.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand.GetCommands">
            <summary>
            Retrieves the list of custom command defined by the domain.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations">
            <summary>
            Provides a simple interface for updating the MFAdmin configuration interface.
            
            Instances of this class are created by <see cref="T:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase"/> for
            node requests that can return proper responses. The appropriate node methods or 
            custom command methods are then passed the instance so the MFAdmin interface can
            be informed of any changes made on the server.
            
            Each client operation method generates one or more directives that are then passed back
            to MFAdmin at the end of the request.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.Manager">
            <summary>
            The manager responsible for the nodes that can be modified through this interface.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.Context">
            <summary>
            The context of the request that this interface will provide a response to.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.DefaultNodeLocation">
            <summary>
            The configuration domain node this response is for.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.Directives">
            <summary>
            The list of directives to be sent to the client as the response.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.#ctor(MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase,MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Constructor.
            </summary>
            <param name="manager">The manager for the nodes this object can do operations for.</param>
            <param name="context">The context of the request the operations will form a response to.</param>
            <param name="nodeLocation">The default node operations are for when no node is specified.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.GetResponse">
            <summary>
            Provides a command response with the applicable client operations that have been called.
            </summary>
            <returns>The client operations as a request response.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.ShowMessage(System.String)">
            <summary>
            Shows an informational message to the user.
            </summary>
            <param name="message">The message to show.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.RefreshDashboard(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Invalidates a node's dashboard, forcing it to refresh if it is currently viewed,
            or the next time a user tries to view it.
            </summary>
            <param name="nodeLocation">
                The node whose dashbaord should be refreshed.
                If not defined, the <see cref="P:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.DefaultNodeLocation"/> is assumed.
            </param>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.UpdateDashboard(MFiles.VAF.Configuration.Domain.Dashboards.IDashboardContent,System.String,MFiles.VAF.Configuration.Domain.ClientDirective.DashboardUpdateMode)">
            <summary>
            Updates the default node's dashboard. Either completely, or a targeted section.
            </summary>
            <param name="content">
                The content to update the dashboard with.
                If not specifed, the nodes own method is used to resolve the content.
            </param>
            <param name="targetElementId">
               The element id of the section to update. 
               If not specified the whole dashboard will be replaced.
            </param>
            <param name="updateMode">
                The behavior to use when updating a section's content.
                Ignored if no targetElementID was specified.
            </param>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.UpdateDashboard(System.String,System.String,MFiles.VAF.Configuration.Domain.ClientDirective.DashboardUpdateMode)">
            <summary>
            Updates the default node's dashboard. Either completely, or a targeted section.
            </summary>
            <param name="content">
                The content to update the dashboard with.
                If not specifed, the nodes own method is used to resolve the content.
            </param>
            <param name="targetElementId">
               The element id of the section to update. 
               If not specified the whole dashboard will be replaced.
            </param>
            <param name="updateMode">
                The behavior to use when updating a section's content.
                Ignored if no targetElementID was specified.
            </param>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.LoadConfiguration(System.String,MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Sets the configuration text for a domain in the client.
            Be wary! This can overwrite unsaved changes the user has made.
            </summary>
            <param name="configuration">The configuration to load.</param>
            <param name="nodeLocation">
                The node to set the configuration for.
                If not defined, the <see cref="P:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.DefaultNodeLocation"/> is assumed.
            </param>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.AddSubNode(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode,MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Inserts a node into the client underneath the parent node.
            This will have no effect if the paren't nodes have not yet loaded.
            </summary>
            <param name="subNode">The new node to insert.</param>
            <param name="parentLocation">
                The parent of the new node.
                If not defined, the <see cref="P:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.DefaultNodeLocation"/> is assumed.
            </param>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.RemoveNode(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Removes a node from the client.
            </summary>
            <param name="nodeLocation">
               The node to remove. 
               If not defined, the <see cref="P:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.DefaultNodeLocation"/> is assumed.
            </param>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.RefreshMetadataCache">
            <summary>
            Forces the MFAdmin configurator to refresh it's metadata structure cache.
            It is wise to call this if a command has changes the metaddata structure of the vault.
            (e.g. Add, remove, update object types, classes, property defs, workflows, etc...).
            This can take significant time on the client, so use this sparingly!
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.RevalidateDomain(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Forces a domain on the client to re-run server validation.
            If the configuration or vault structure has changed, this may be wise to call.
            </summary>
            <param name="nodeLocation">
               The node to revalidate. 
               If not defined, the <see cref="P:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.DefaultNodeLocation"/> is assumed.
            </param>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.AuthenticateUser(System.Collections.Generic.IEnumerable{MFiles.VAF.Configuration.Domain.AuthenticationRequest})">
            <summary>
            Instructs MFAdmin to authenticate a user.
            </summary>
            <param name="authenticationOptions">List of authentication requests.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.ReloadDomain(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Completely reloads a domain in the MFAdmin configurator, 
            but only if the parent domain has been loaded.
            Use this carefully, as it can be very destructive, and users can lose unsaved changes.
            Consider UpdateDomain instead, to try and make updates in place.
            </summary>
            <param name="nodeLocation">
                The node to reload
                If not defined, the <see cref="P:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.DefaultNodeLocation"/> is assumed.
            </param>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.UpdateCommands(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Udpates the list of avaliable commands.
            The updated list is retrieved from the corresponding node method.
            </summary>
            <param name="nodeLocation">
                The node to update the commands for.
                If not defined, the <see cref="P:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.DefaultNodeLocation"/> is assumed.
            </param>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.UpdateStatus(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Updates the nodes status in MFAdmin.
            Consider using <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.UpdateDomain(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)"/> if other information
            and/or commands are being updated as well.
            </summary>
            <param name="nodeLocation">
               The node whose status to update. 
               If not defined, the <see cref="P:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.DefaultNodeLocation"/> is assumed.
            </param>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.UpdateDomain(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Refreshes information about the node.
            This allows for basic node information like
            DisplayName, Description and Priority to be updated,
            and also updates the nodes status and commands if those
            are supported.
            
            The updated values are gathered from the node itself via
            applicable interface methods.
            </summary>
            <param name="nodeLocation">
               The node to update. 
               If not defined, the <see cref="P:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.DefaultNodeLocation"/> is assumed.
            </param>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.GetNodeReference(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Helper method to get the reference for a specific node, or fallback to the
            reference to the <see cref="P:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.DefaultNodeLocation"/>.
            </summary>
            <param name="nodeLocation">
                The node location to generate a reference for.
                If not defined, the <see cref="P:MFiles.VAF.Configuration.AdminConfigurations.ClientOperations.DefaultNodeLocation"/> is assumed.
            </param>
            <returns>>The passed node's reference, or the default node's reference.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.AdminConfigurations.CommandLocationListExtensionMethods">
            <summary>
            Helper methods for generating <see cref="T:System.Collections.Generic.List`1"/>s of
            <see cref="T:MFiles.VAF.Configuration.Interfaces.Domain.ICommandLocation"/>s for use in 
            <see cref="T:MFiles.VAF.Configuration.AdminConfigurations.CustomDomainCommand"/>s .
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.CommandLocationListExtensionMethods.ButtonBar(System.Collections.Generic.List{MFiles.VAF.Configuration.Interfaces.Domain.ICommandLocation},System.Int32,MFiles.VAF.Configuration.Domain.CommandButtonStyle)">
            <summary>
            Adds a new <see cref="T:MFiles.VAF.Configuration.Domain.ButtonBarCommandLocation"/> to the list.
            </summary>
            <param name="commandList">The list to add the location to.</param>
            <param name="priority">The priority of the button.</param>
            <param name="style">the style of the button.</param>
            <returns>The command list, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.CommandLocationListExtensionMethods.DomainMenu(System.Collections.Generic.List{MFiles.VAF.Configuration.Interfaces.Domain.ICommandLocation},System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a new <see cref="T:MFiles.VAF.Configuration.Domain.DomainMenuCommandLocation"/> to the list.
            This location corresponds to a domain node's context menu.
            </summary>
            <param name="commandList">The list to add the location to.</param>
            <param name="priority">Determines the command button's location inside the menu.</param>
            <param name="icon">
                The name of the icon that will be shown next to the menu item.
                Use the values defined in <see cref="T:MFiles.VAF.Configuration.AdminConfigurations.MenuIcon"/>.
            </param>
            <param name="separatorBefore">Creates a separator before this menu item.</param>
            <param name="noSeparatorAfter">Prevents any line separators from being drawn after this item.</param>
            <returns>The command list, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.CommandLocationListExtensionMethods.ConfigurationMenu(System.Collections.Generic.List{MFiles.VAF.Configuration.Interfaces.Domain.ICommandLocation},System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a new <see cref="T:MFiles.VAF.Configuration.Domain.ConfigurationMenuCommandLocation"/> to the list.
            This location corresponds to a domain's configuration node's context menu.
            </summary>
            <param name="commandList">The list to add the location to.</param>
            <param name="priority">Determines the command button's location inside the menu.</param>
            <param name="icon">
                The name of the icon that will be shown next to the menu item.
                Use the values defined in <see cref="T:MFiles.VAF.Configuration.AdminConfigurations.MenuIcon"/>.
            </param>
            <param name="separatorBefore">Creates a separator before this menu item.</param>
            <param name="noSeparatorAfter">Prevents any line separators from being drawn after this item.</param>
            <returns>The command list, for chaining.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode">
            <summary>
            Represents a configuration domain node within the MFAdmin configurator.
            
            This abstract base class makes it easier to implement <see cref="T:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode" />
            in classes that can inherit from it, as only the methods corresponding to supported 
            capabilities need to be defined.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode.GetCapabilities">
            <summary>
            Describes the capabilities this node has.
            The capabilities returned correspond to which
            interface methods are implemented/ok to call.
            </summary>
            <returns>The node's capabilities.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode.GetID">
            <summary>
            Provides the static id for the node.
            This value should at least be unique amongst siblings.
            IDs cannot have spaces, newlines or periods.
            </summary>
            <returns>The id.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode.GetName(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Gets the human readable name for the domain.
            Can be localized.
            </summary>
            <param name="context">The context for the request.</param>
            <returns>The name.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode.GetDescription(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Provides a description of the domain.
            Currently displayed in the domain header area, and in some
            default dashboards.
            </summary>
            <param name="context">The context for the request.</param>
            <returns>The description.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode.GetSortPriority(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Controls the order in which the node appears amongst siblings.
            </summary>
            <param name="context">The context for the request.</param>
            <returns>The sort priority.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode.GetSubDomainNodes(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Provides a list of sub domain nodes to appear as children of this node.
            Only safe to call if <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode.GetCapabilities"/> returns the 
            <see cref="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.SubDomains"/> flag.
            </summary>
            <param name="context">The context for the request.</param>
            <returns>The domain's sub-nodes.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode.GetDashboardContent(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Provides the html for a custom dashboard to display for the node.
            Only safe to call if <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode.GetCapabilities"/> returns the 
            <see cref="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.StatusDashboard"/> flag.
            </summary>
            <param name="context">The context for the request.</param>
            <returns>HTML text</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode.GetConfiguration(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Gets the current/stored configuration value for the node.
            Only safe to call if <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode.GetCapabilities"/> returns the 
            <see cref="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.Configuration"/> flag.
            </summary>
            <param name="context">The context for the request.</param>
            <returns>The domain's configuration text.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode.SaveConfiguration(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,System.String,MFiles.VAF.Configuration.AdminConfigurations.ClientOperations)">
            <summary>
            Saves a new configuration value for the node.
            Only safe to call if <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode.GetCapabilities"/> returns the 
            <see cref="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.Configuration"/> flag.
            </summary>
            <param name="context">The context for the request.</param>
            <param name="configuration">The configuration text to save.</param>
            <param name="clientOps">Interface for triggering client updates based on the new configuration.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode.GetConfigurationSchema(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Gets the schema describing the structure of the configuration.
            Only safe to call if <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode.GetCapabilities"/> returns the 
            <see cref="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.Schema"/> flag.
            </summary>
            <param name="context">The context for the request</param>
            <returns>The configuration <see cref="T:MFiles.VAF.Configuration.JsonEditor.Schema"/>.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode.Validate(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,System.String)">
            <summary>
            Validates the node along with the current, or passed configuration text.
            Only safe to call if <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode.GetCapabilities"/> returns the 
            <see cref="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.Validation"/> flag.
            </summary>
            <param name="context">The context for the request.</param>
            <param name="configuration">The configuration to validate.
            	If this value is empty the currently saved/stored configuration
            	should be validated.
            </param>
            <returns>Validation findings.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode.GetStatusSummary(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Provides a status summary for the node.
            Only safe to call if <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode.GetCapabilities"/> returns the 
            <see cref="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.StatusSummary"/> flag.
            </summary>
            <param name="context">The context for the request.</param>
            <returns>The domain's current status summary.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode.GetCommands(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Provides the commands that can be shown and/or run for this node.
            Only safe to call if <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNode.GetCapabilities"/> returns the 
            <see cref="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.Commands"/> flag.
            </summary>
            <param name="context">The context for the request.</param>
            <returns>The domain's currently active custom commands.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNodeExtensionMethods">
            <summary>
            Provide common helper methods for the <see cref="T:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode"/>
            interface, so that implementations don't need to introduce them.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNodeExtensionMethods.IsCapable(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode,MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities)">
            <summary>
            Determines whether a node supports a certain capability.
            Capabilities correspond to interface methods that are
            valid to call on a node.
            </summary>
            <param name="node">The node to check for support.</param>
            <param name="capability">The capability to check.</param>
            <returns>True if the node has the capability, false otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ConfigurationDomainNodeExtensionMethods.AssertCapable(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode,MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities)">
            <summary>
            Throws an exception if a node does not support a certain capability.
            </summary>
            <param name="node">The node expected to support.</param>
            <param name="capability">The flag or flags of the capabilities the node is expected to support.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.AdminConfigurations.CustomDomainCommand">
            <summary>
            Defines a custom command for an <see cref="T:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode"/>.
            
            <see cref="T:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase"/> implementations will convert these
            to <see cref="T:MFiles.VAF.Configuration.Interfaces.Domain.ConfigurationDomainCommand"/>s and ensure applicable MFAdmin
            requests will be delegated back to the <see cref="P:MFiles.VAF.Configuration.AdminConfigurations.CustomDomainCommand.Execute"/> callback. 
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.CustomDomainCommand.ID">
            <summary>
            A unique identifier for the command.
            Can be used to reference the command in status dashboards.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.CustomDomainCommand.DisplayName">
            <summary>
            The display name to use for the command. Optional.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.CustomDomainCommand.HelpText">
            <summary>
            Help text to expose for the command. Optional.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.CustomDomainCommand.Execute">
            <summary>
            The function to call when the command is triggered.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.CustomDomainCommand.Locations">
            <summary>
            A list of locations specifying where and how the command will be shown.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.CustomDomainCommand.ConfirmMessage">
            <summary>
            If specified, the message will be displayed to the user in a confirmation dialog after they've
            triggered the command, but before its execution. They will have the option to proceed or
            cancel the command.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.CustomDomainCommand.Blocking">
            <summary>
            Indicates whether the interface should be blocked while the command is being executed.
            Useful for longer running commands where further user interaction with the interface
            could negatively effect user experience or execution, or simply a way to indicate to the
            user that something is happening, and when it is over.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.AdminConfigurations.DefaultConfigurationRequestContextEx">
            <summary>
            Default request context implementation.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.AdminConfigurations.DefaultConfigurationRequestContextEx.userAccount">
            <summary>
            Backing field for the UserAccount property.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.AdminConfigurations.DefaultConfigurationRequestContextEx.loginAccount">
            <summary>
            Backing field for the LoginAccount property.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.DefaultConfigurationRequestContextEx.Vault">
            <summary>
            The transaction bound vault for the request.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.DefaultConfigurationRequestContextEx.CurrentUserID">
            <summary>
            The id of the user making the request.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.DefaultConfigurationRequestContextEx.CurrentUserSessionInfo">
            <summary>
            The session of the user making the request.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.DefaultConfigurationRequestContextEx.LoginAccount">
            <summary>
            The login account of the user making the request.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.DefaultConfigurationRequestContextEx.UserAccount">
            <summary>
            The user account of the user making the request.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation">
            <summary>
            Wraps an <see cref="T:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode"/> with information
            about it's location.
            
            Primarily used by <see cref="T:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase"/>
            and it's implementations to generate a node reference.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation.Node">
            <summary>
            The node this location object is for.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation.Parent">
            <summary>
            The node's parent location.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation.IsRoot">
            <summary>
            Indicates whether this is a root node (has a parent or not).
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation.CreateSubNodeLocation(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode)">
            <summary>
            Helper to create a location for this node's sub node.
            </summary>
            <param name="subNode">This node's subnode.</param>
            <returns>The location of the subnode.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation.#ctor(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode,MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Constructor.
            </summary>
            <param name="node">The node this location object is for.</param>
            <param name="parent">The node's parent location.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.AdminConfigurations.DomainNodeNotFoundException">
            <summary>
            Exception triggered when a domain node cannot be resolved from a node reference.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.DomainNodeNotFoundException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="nodeReference">The node reference that could not be resolved.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.AdminConfigurations.ExtensionMethodAdminConfigurationManager">
            <summary>
            Manages the setting up the communication between M-Files Admin and the Dashboard Nodes
            using a common vault extension method approach.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.ExtensionMethodAdminConfigurationManager.ExtensionMethod">
            <summary>
            The name of the VaultExtensionMethod to use in sources.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.ExtensionMethodAdminConfigurationManager.RootNamespace">
            <summary>
            The base namespace to prepend to fully qualified node references.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ExtensionMethodAdminConfigurationManager.#ctor(MFilesAPI.Vault,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="vault">The vault for which the configurations are being managed.</param>
            <param name="registrationNamespace">
            	The namespace where the root nodes are registered.
            	Should be one of the values specified in <see cref="T:MFiles.VAF.Configuration.Domain.ConfigurationDomain.DefaultNamespaces"/>.
            	Leave empty or null to skip registration / unregistration.
            </param>
            <param name="rootNamespace">
            	The base namespace to prepend to fully qualified node references.
            	Can be null or empty, but helps prevent domain id collisions in MFAdmin.
            </param>
            <param name="extensionMethod">
            	The extension method MFAdmin will use to make requests to this manager.
            	Cannot be null.
            </param>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ExtensionMethodAdminConfigurationManager.GetNodeReference(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Gets a nodes fully qualified node id, which is namespaced
            with the root and ancestor ids.
            </summary>
            <param name="nodeLocation">The location of the node to get the reference for.</param>
            <returns>A reference to the node, that can be used to find it and its location.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ExtensionMethodAdminConfigurationManager.ResolveNodeReference(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,System.String)">
            <summary>
            Resolves a node and its location from a reference.
            </summary>
            <param name="context">The context of the node request.</param>
            <param name="reference">The node reference.</param>
            <returns>The node location that corresponds to the reference.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ExtensionMethodAdminConfigurationManager.ResolveNodeRecurse(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,System.Collections.Generic.IEnumerable{MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation},System.Collections.Generic.Queue{System.String})">
            <summary>
            Helper for <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.ExtensionMethodAdminConfigurationManager.ResolveNodeReference(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,System.String)"/>.
            </summary>
            <param name="context">The context for which we are resolving the node.</param>
            <param name="nodeLocations">The node to resolve from.</param>
            <param name="idPath">The ids of nodes on the path to the target node.</param>
            <returns>The resolved node's location, or null.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ExtensionMethodAdminConfigurationManager.CreateSourceDefinition(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation,MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand,System.String[])">
            <summary>
            Creates a standard read-only source definition that MFAdmin can
            use to request specific information from the server.
            </summary>
            <param name="nodeLocation">The node to create the source definition for.</param>
            <param name="command">The built-in command the source definition will trigger.</param>
            <param name="argNames">The names of expected arguments that the source definition may/will be triggered with.</param>
            <returns>Router compatible source definition.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ExtensionMethodAdminConfigurationManager.CreateReadWriteConfigurationSourceDefinition(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation)">
            <summary>
            Creates a read-write source definition that MFAdmin can
            use to read and write a node's configuration.
            </summary>
            <param name="nodeLocation">The location of the node to create the source definition for.</param>
            <returns>Router compatible source definition.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ExtensionMethodAdminConfigurationManager.CreateCommandMethodSource(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation,System.String)">
            <summary>
            Creates a method source MFAdmin can use to trigger a custom command.
            </summary>
            <param name="nodeLocation">The node that defines the command.</param>
            <param name="commandID">The command id.</param>
            <returns>Router compatible method source.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ExtensionMethodAdminConfigurationManager.CreateVaultExtensionMethodCall(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation,MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand,System.String[])">
            <summary>
            Creates a VaultExtensionMethodCall for use in SourceDefinitions.
            </summary>
            <param name="nodeLocation">The location of the node the source is for.</param>
            <param name="command">The command the source will delegate to.</param>
            <param name="argNames">The names of arguments expected to be passed to the command.</param>
            <returns>The definition that MFAdmin can use to trigger the command of the node.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ExtensionMethodAdminConfigurationManager.CreateVaultExtensionMethodCall(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation,System.String,System.String[])">
            <summary>
            Creates a VaultExtensionMethodCall for use in SourceDefinitions.
            </summary>
            <param name="nodeLocation">The location of the node the source is for.</param>
            <param name="command">The command the source will delegate to.</param>
            <param name="argNames">The names of arguments expected to be passed to the command.</param>
            <returns>The definition that MFAdmin can use to trigger the command of the node.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ExtensionMethodAdminConfigurationManager.CreateSource(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation,MFiles.VAF.Configuration.AdminConfigurations.BuiltInDomainCommand,System.String[])">
            <summary>
            Creates a VaultExtensionMethodSource for use in SourceDefinitions.
            </summary>
            <param name="nodeLocation">The location of the node the source is for.</param>
            <param name="command">The command the source will delegate to.</param>
            <param name="argNames">The names of arguments expected to be passed to the command.</param>
            <returns>The definition that MFAdmin can use to trigger the command of the node.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ExtensionMethodAdminConfigurationManager.CreateSource(MFiles.VAF.Configuration.AdminConfigurations.DomainNodeLocation,System.String,System.String[])">
            <summary>
            Creates a VaultExtensionMethodSource for use in SourceDefinitions.
            </summary>
            <param name="nodeLocation">The location of the node the source is for.</param>
            <param name="command">The command the source will delegate to.</param>
            <param name="argNames">The names of arguments expected to be passed to the command.</param>
            <returns>The definition that MFAdmin can use to trigger the command of the node.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.ExtensionMethodAdminConfigurationManager.UnRegisterRootNode(System.String)">
            <summary>
            Removes the registration of the given dn
            </summary>
            <param name="nodeName">The name or id of the node to unregister.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode">
            <summary>
            Represents a configuration domain node within the MFAdmin configurator
            that can be managed by an <see cref="T:MFiles.VAF.Configuration.AdminConfigurations.AdminConfigurationManagerBase"/>
            implementation.
            
            The <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetCapabilities"/> method is used to tell the manager which
            features a node supports and directly corresponds to which methods it
            can call. Most methods therefore do not need any real implementations. 
            
            For example, <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.Validate(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,System.String)"/>
            can simply throw a <see cref="T:System.NotSupportedException"/> unless 
            <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetCapabilities"/> returns the 
            <see cref="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.Validation"/> flag.
            
            Conversely though, even if a proper implementation is provided, it will
            not be used unless the corresponding flag is returned from 
            <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetCapabilities"/>.
            
            The following methods must have real implementations:
             - <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetID"/>
             - <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetName(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)"/>
             - <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetDescription(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)"/>
             - <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetSortPriority(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)"/>
             - <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetCapabilities"/> 
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetCapabilities">
            <summary>
            Describes the capabilities this node has.
            The capabilities returned correspond to which
            interface methods are implemented/ok to call.
            </summary>
            <returns>The capabilities of the node.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetID">
            <summary>
            Provides the static id for the node.
            This value should at least be unique amongst siblings.
            IDs cannot have spaces, newlines or periods.
            </summary>
            <returns>The id.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetName(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Gets the human readable name for the domain.
            Can be localized.
            </summary>
            <param name="context">The context for the request.</param>
            <returns>The name.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetDescription(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Provides a description of the domain.
            Currently displayed in the domain header area, and in some
            default dashboards.
            </summary>
            <param name="context">The context for the request.</param>
            <returns>The description.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetSortPriority(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Controls the order in which the node appears amongst siblings.
            </summary>
            <param name="context">The context for the request.</param>
            <returns>The sort priority.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetSubDomainNodes(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Provides a list of sub domain nodes to appear as children of this node.
            Only safe to call if <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetCapabilities"/> returns the 
            <see cref="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.SubDomains"/> flag.
            </summary>
            <param name="context">The context for the request.</param>
            <returns>The domain's sub-nodes.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetDashboardContent(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Provides the html for a custom dashboard to display for the node.
            Only safe to call if <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetCapabilities"/> returns the 
            <see cref="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.StatusDashboard"/> flag.
            </summary>
            <param name="context">The context for the request.</param>
            <returns>HTML text</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetConfiguration(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Gets the current/stored configuration value for the node.
            Only safe to call if <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetCapabilities"/> returns the 
            <see cref="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.Configuration"/> flag.
            </summary>
            <param name="context">The context for the request.</param>
            <returns>The domain's configuration text.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.SaveConfiguration(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,System.String,MFiles.VAF.Configuration.AdminConfigurations.ClientOperations)">
            <summary>
            Saves a new configuration value for the node.
            Only safe to call if <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetCapabilities"/> returns the 
            <see cref="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.Configuration"/> flag.
            </summary>
            <param name="context">The context for the request.</param>
            <param name="configuration">The configuration text to save.</param>
            <param name="clientOps">Interface for triggering client updates based on the new configuration.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetConfigurationSchema(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Gets the schema describing the structure of the configuration.
            Only safe to call if <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetCapabilities"/> returns the 
            <see cref="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.Schema"/> flag.
            </summary>
            <param name="context">The context for the request</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.Validate(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,System.String)">
            <summary>
            Validates the node along with the current, or passed configuration text.
            Only safe to call if <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetCapabilities"/> returns the 
            <see cref="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.Validation"/> flag.
            </summary>
            <param name="context">The context for the request.</param>
            <param name="configuration">The configuration to validate.
            	If this value is empty the currently saved/stored configuration
            	should be validated.
            </param>
            <returns>Validation findings.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetStatusSummary(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Provides a status summary for the node.
            Only safe to call if <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetCapabilities"/> returns the 
            <see cref="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.StatusSummary"/> flag.
            </summary>
            <param name="context">The context for the request.</param>
            <returns>The domain's status summary.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetCommands(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Provides the commands that can be shown and/or run for this node.
            Only safe to call if <see cref="M:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationDomainNode.GetCapabilities"/> returns the 
            <see cref="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.Commands"/> flag.
            </summary>
            <param name="context">The context for the request.</param>
            <returns>The domain's currently active custom commands.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext">
            <summary>
            The context of an MFAdmin Configurator request.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext.Vault">
            <summary>
            The transaction bound vault for the request.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext.CurrentUserID">
            <summary>
            The id of the user making the request.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext.CurrentUserSessionInfo">
            <summary>
            The session of the user making the request.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContextEx">
            <summary>
            The extended context of an MFAdmin Configurator request.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContextEx.LoginAccount">
            <summary>
            The login account of the user making the request.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContextEx.UserAccount">
            <summary>
            The user account of the user making the request.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.AdminConfigurations.MenuIcon">
            <summary>
            List of available icons to use in context menu locations.
            Corresponds to jqueryui's icons.
            Many jqueryui icons are not listed as they are not considered practical in a context menu location.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.IConfiguration">
            <summary>
            Base interface all instantiable configuration objects.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.IConfiguration.ConfigurationId">
            <summary>
            The ID of the configuration.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.IConfiguration.ResourceManager">
            <summary>
            Returns the resource manager object that is associated with this configuration. Can be null.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.IConfiguration.Valid">
            <summary>
            Method for resolving if the configuration is valid.
            </summary>
            <returns>True if the configuration is valid.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.ConfigurationStorageInVault">
            <summary>
            The default implementation of the configuration storage.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.ConfigurationStorageInVault.ValidatingContractResolver">
            <summary>
            Class to extend the default contract resolver, for performing the value validations while the configuration data
            is being deserialized.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.ConfigurationStorageInVault.ValidatingContractResolver.#ctor(System.Collections.Generic.HashSet{System.Tuple{System.Object,System.Reflection.MemberInfo}}@)">
            <summary>
            Constructor.
            </summary>
            <param name="definedMembers">The collection that receives the information about specified member values.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ConfigurationStorageInVault.ValidatingContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>
            Override for creating a validating value provider.
            </summary>
            <param name="member">The configuration member to validate.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/></returns>
        </member>
        <member name="F:MFiles.VAF.Configuration.ConfigurationStorageInVault.ValidatingContractResolver.definedMembers">
            <summary>
            The validation results sink object.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.ConfigurationStorageInVault.ValidatingValueProvider">
            <summary>
            A class to wrap a serialization value provider and to perform a validation for deserialized value.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.ConfigurationStorageInVault.ValidatingValueProvider.#ctor(Newtonsoft.Json.Serialization.IValueProvider,System.Reflection.MemberInfo,System.Collections.Generic.HashSet{System.Tuple{System.Object,System.Reflection.MemberInfo}}@)">
            <summary>
            Constructor.
            </summary>
            <param name="actualValueProvider">The actual value provider to delegate for.</param>
            <param name="memberInfo">The member type for which this value provider exists.</param>
            <param name="definedMembers">The collection that receives the information about specified member values.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ConfigurationStorageInVault.ValidatingValueProvider.GetValue(System.Object)">
            <summary>
            A pass-through value getter.
            </summary>
            <param name="target">The target object.</param>
            <returns>The value from the value provider.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.ConfigurationStorageInVault.ValidatingValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Value setter. Performs the value validation.
            </summary>
            <param name="target">The target object.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="F:MFiles.VAF.Configuration.ConfigurationStorageInVault.ValidatingValueProvider.actualValueProvider">
            <summary>
            The wrapped value provider.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ConfigurationStorageInVault.ValidatingValueProvider.memberInfo">
            <summary>
            The member info of the member whose values are looked after.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ConfigurationStorageInVault.ValidatingValueProvider.definedMembers">
            <summary>
            The validation results sink object.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.ConfigurationStorageInVault.ConfigurationIDCombiningMode">
            <summary>
            Mode that is used when specifying how the configuration ID is formed.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ConfigurationStorageInVault.ConfigurationIDCombiningMode.ConfigNamespaceAsID">
            <summary>
            Uses the namespace as the id.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ConfigurationStorageInVault.ConfigurationIDCombiningMode.ConfigKeyAsID">
            <summary>
            Uses the key as the id.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ConfigurationStorageInVault.ConfigurationIDCombiningMode.ConfigNamespaceAndConfigKeyCombinedAsID">
            <summary>
            Uses the namespace and key as the id.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ConfigurationStorageInVault.mode">
            <summary>
            Configuration ID creation mode.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ConfigurationStorageInVault.storageLocation">
            <summary>
            The storage location of the configurations.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ConfigurationStorageInVault.fallbackStorageLocation">
            <summary>
            The fallback storage location of the configurations. Will be checked if the configuration can't be found from the primary location.
            Can be null.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.ConfigurationStorageInVault.#ctor(MFilesAPI.MFNamedValueType,System.Nullable{MFilesAPI.MFNamedValueType},MFiles.VAF.Configuration.ConfigurationStorageInVault.ConfigurationIDCombiningMode)">
            <summary>
            Constructor.
            </summary>
            <param name="primaryLocation">The primary NVS area where the named values are.</param>
            <param name="fallbackLocation">Fallback NVS area for reading the values. For writing only the primary location will be used. Can be null.</param>
            <param name="mode">Mode for combining the configuration value IDs.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ConfigurationStorageInVault.ReadConfigurationData(MFilesAPI.Vault,System.String,System.String,System.String@)">
            <summary>
            Returns the persisted configuration data from vault.
            </summary>
            <param name="vault">The vault.</param>
            <param name="configNamespace">The configuration namespace that shall be used when loading the configuration.</param>
            <param name="configKey">Configuration key that identifies the module configuration.</param>
            <param name="data">Output parameter for the data that was read. Set to null if the configuration key can't be found.</param>
            <returns>True is the configuration key existed in the defined configuration namespace.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.ConfigurationStorageInVault.ReadConfigurationData(MFilesAPI.Vault,System.String,System.String)">
            <summary>
            Returns the persisted configuration data from vault.
            </summary>
            <param name="vault">The vault.</param>
            <param name="configNamespace">The configuration namespace that shall be used when loading the configuration.</param>
            <param name="configKey">Configuration key that identifies the configuration.</param>
            <returns>The read configuration data.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.ConfigurationStorageInVault.SaveConfigurationData(MFilesAPI.Vault,System.String,System.String,System.String)">
            <summary>
            Persists the configuration data to the vault.
            </summary>
            <param name="vault">The vault.</param>
            <param name="configNamespace">The configuration namespace that shall be used when saving the configuration.</param>
            <param name="data">The configuration data to persist.</param>
            <param name="configKey">The configuration key that identifies under which key to store the configuration.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ConfigurationStorageInVault.Load``1(MFilesAPI.Vault,System.String,System.String)">
            <summary>
            Generic ethod to load the configuration from the specified vault.
            </summary>
            <param name="vault">The vault.</param>
            <param name="configNamespace">The configuration namespace that shall be used when loading the configuration.</param>
            <param name="configKey">The configuration key that identifies the value that should be loaded.</param>
            <returns>The loaded configuration object.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.ConfigurationStorageInVault.Load(MFilesAPI.Vault,System.Type,System.String,System.String)">
            <summary>
            Method to load the configuration from the specified vault.
            </summary>
            <param name="vault">The vault.</param>
            <param name="configType">The type of the configuration object to be loaded.</param>
            <param name="configNamespace">The configuration namespace that shall be used when loading the configuration.</param>
            <param name="configKey">The configuration key that identifies the value that should be loaded.</param>
            <returns>The loaded configuration object.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.ConfigurationStorageInVault.Populate``1(MFilesAPI.Vault,``0,System.String,System.String)">
            <summary>
            Method to populate the configuration from the specified vault.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="vault">The vault.</param>
            <param name="configuration">The configuration object to populate.</param>
            <param name="configNamespace">The configuration namespace that shall be used when loading the configuration.</param>
            <param name="configKey">The configuration key that identifies the value that should be loaded.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ConfigurationStorageInVault.Deserialize``1(System.String)">
            <summary>
            Generic method to load the configuration from the specified string. Creates a new object.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="configurationData">The configuration data from which the configuration object should be loaded from.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ConfigurationStorageInVault.Deserialize(System.Type,System.String)">
            <summary>
            Method to load the configuration from the specified string. Creates a new object.
            </summary>
            <param name="configType">The type of the configuration object to be loaded.</param>
            <param name="configurationData">The configuration data from which the configuration object should be loaded from.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ConfigurationStorageInVault.Deserialize``1(System.String,``0)">
            <summary>
            Method to load the configuration from the specified string. Populates an existing object.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="configurationData">The configuration data from which the configuration object should be loaded from.</param>
            <param name="configuration">The configuration object to populate.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ConfigurationStorageInVault.Save``1(MFilesAPI.Vault,``0,System.String,System.String)">
            <summary>
            Save the configuration to the specified vault.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="vault">The vault.</param>
            <param name="configuration">The configuration object to save.</param>
            <param name="configNamespace">The configuration namespace that shall be used when saving the configuration.</param>
            <param name="configKey">The configuration key that identifies the value that is be used when saving.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ConfigurationStorageInVault.Serialize``1(``0)">
            <summary>
            Serializes the given configuration object to a string.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="configuration">The configuration object to save.</param>
            <returns>The configuration object serialized as string.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.ConfigurationStorageInVault.GetConfigurationID(System.String,System.String)">
            <summary>
            Generates the configuration ID according to the selected mode.
            </summary>
            <param name="configNamespace">The defined configuration namespace.</param>
            <param name="configKey">The defined configuration key.</param>
            <returns>The generated configuration ID.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.AbstractMenuCommandLocation">
            <summary>
            Defines a command location inside a context menu.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AbstractMenuCommandLocation.Container">
            <summary>
            The container in which the command should be shown.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AbstractMenuCommandLocation.Icon">
            <summary>
            The name of the icon that will be shown next to the menu item.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AbstractMenuCommandLocation.Priority">
            <summary>
            Determines the command button's location inside the menu.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AbstractMenuCommandLocation.SeparatorBefore">
            <summary>
            Starts a new context menu section by drawing a line separator
            before this command's menu item.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AbstractMenuCommandLocation.NoSeparatorAfter">
            <summary>
            Prevents any line separators from being drawn after this item.
            Set to true when defining a menu item that should come before the
            first item in a section; in this case SeparatorBefore should 
            also be set to true.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.AbstractMenuCommandLocation.#ctor(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="priority">Determines the command button's location inside the menu.</param>
            <param name="icon">The name of the icon that will be shown next to the menu item.</param>
            <param name="separatorBefore">Creates a separator before this menu item.</param>
            <param name="noSeparatorAfter">Prevents any line separators from being drawn after this item.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AuthenticationProvidersConfiguration">
            <summary>
            The LDAP authentication provider configuration class.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AuthenticationProvidersConfiguration.DefaultConfiguration">
            <summary>
            Specifies the default authentication provider.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AuthenticationProvidersConfiguration.BasicAuthenticationProvider">
            <summary>
            Specifies the Basic Authentication provider (username and password) configuration.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AuthenticationProvidersConfiguration.OAuthProviders">
            <summary>
            The OAuth providers.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AuthenticationProvidersConfiguration.LdapProviders">
            <summary>
            The LDAP providers.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AuthenticationProvidersConfiguration.AdfsProviders">
            <summary>
            The ADFS providers.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AuthenticationProvidersConfiguration.SamlProviders">
            <summary>
            The SAML providers.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.BasicAuthenticationProviderConfiguration">
            <summary>
            The basic authentication provider configuration class.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.BasicAuthenticationProviderConfiguration.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.BasicAuthenticationProviderConfiguration.Assembly">
            <summary>
            Assembly that provides the authentication.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.BasicAuthenticationProviderConfiguration.PluginInfoScope">
            <summary>
            Plugin Info value for Scope.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.BasicAuthenticationProviderConfiguration.PluginInfoScopeIndependent">
            <summary>
            Plugin Info value for Scope.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.BasicAuthenticationProviderConfiguration.PluginInfoBridgeClass">
            <summary>
            Plugin Info value for BridgeClass.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.BasicAuthenticationProviderConfiguration.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.LdapProviderConfiguration">
            <summary>
            The LDAP authentication provider configuration class.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.LdapProviderConfiguration.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.LdapProviderConfiguration.Assembly">
            <summary>
            Assembly that provides the authentication.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.LdapProviderConfiguration.LDAPServerAddress">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.LdapProviderConfiguration.LDAPServerPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.LdapProviderConfiguration.LDAPServerConnectionTimeOut">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.LdapProviderConfiguration.LDAPServerProtocolVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.LdapProviderConfiguration.LDAPServerAuthenticationType">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.LdapProviderConfiguration.UserDNPattern">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.LdapProviderConfiguration.Domain">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.LdapProviderConfiguration.ClientCertificatePath">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.LdapProviderConfiguration.UseSSL">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.LdapProviderConfiguration.VerifyServerCertificate">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.LdapProviderConfiguration.ServerCertificateRevocationMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.LdapProviderConfiguration.PluginInfoScope">
            <summary>
            Plugin Info value for Scope.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.LdapProviderConfiguration.PluginInfoScopeIndependent">
            <summary>
            Plugin Info value for Scope.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.LdapProviderConfiguration.PluginInfoBridgeClass">
            <summary>
            Plugin Info value for BridgeClass.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.LdapProviderConfiguration.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.OAuthProviderConfiguration">
            <summary>
            The OAuth authentication provider configuration class.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.OAuthProviderConfiguration.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.OAuthProviderConfiguration.Assembly">
            <summary>
            Assembly that provides the authentication.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.OAuthProviderConfiguration.AuthorizationEndpoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.OAuthProviderConfiguration.TokenEndpoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.OAuthProviderConfiguration.ClientID">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.OAuthProviderConfiguration.ClientSecret">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.OAuthProviderConfiguration.Scope">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.OAuthProviderConfiguration.Resource">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.OAuthProviderConfiguration.ClearCookiesOfDomainsBeforeElectronicSignature">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.OAuthProviderConfiguration.AuthenticationPurpose">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.OAuthProviderConfiguration.EnableLogging">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.OAuthProviderConfiguration.PromptLoginParameter">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.OAuthProviderConfiguration.SiteRealm">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.OAuthProviderConfiguration.GrantType">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.OAuthProviderConfiguration.RedirectURI">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.OAuthProviderConfiguration.UseIdTokenAsAccessToken">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.OAuthProviderConfiguration.PluginInfoScope">
            <summary>
            Plugin Info value for Scope.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.OAuthProviderConfiguration.PluginInfoScopeIndependent">
            <summary>
            Plugin Info value for Scope.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.OAuthProviderConfiguration.PluginInfoBridgeClass">
            <summary>
            Plugin Info value for BridgeClass.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.OAuthProviderConfiguration.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration">
            <summary>
            The SAML authentication provider configuration class.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.Assembly">
            <summary>
            Assembly that provides the authentication.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.ServiceProviderEntityID">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.ServiceProviderName">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.ServiceProviderCertificate">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.ServiceProviderCertificateFile">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.ServiceProviderCertificateSerialNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.ServiceProviderCertificateThumbprint">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.ServiceProviderCertificateSubject">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.IdPInitiatedSloUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.SingleSignOnServiceBinding">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.SingleSignOnServiceUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.EnableLogging">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.AuthenticationPurpose">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.AssertionConsumerServiceUrlForNative">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.AssertionConsumerServiceUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.ClearAuthenticationCache">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.ClearCookiesOfDomainsBeforeElectronicSignature">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.SignAuthnRequest">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.PluginInfoScope">
            <summary>
            Plugin Info value for Scope.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.PluginInfoScopeIndependent">
            <summary>
            Plugin Info value for Scope.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.PluginInfoBridgeClass">
            <summary>
            Plugin Info value for BridgeClass.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.SamlProviderConfiguration.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AdfsProviderConfiguration">
            <summary>
            The ADFS authentication provider configuration class.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AdfsProviderConfiguration.Name">
            <summary>
            The ADFS authentication provider name.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AdfsProviderConfiguration.Assembly">
            <summary>
            The ADFS authentication provider  assembly.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AdfsProviderConfiguration.ADFSServer">
            <summary>
            The ADFS authentication provider server.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AdfsProviderConfiguration.ADFSEndpointUserName">
            <summary>
            The ADFS authentication provider username endpoint.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AdfsProviderConfiguration.ADFSEndpointWindows">
            <summary>
            The ADFS authentication provider windows endpoint.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AdfsProviderConfiguration.CurrentWindowsUser">
            <summary>
            The ADFS authentication provider windows user endpoint.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AdfsProviderConfiguration.RPID">
            <summary>
            The ADFS authentication provider Relying Party ID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AdfsProviderConfiguration.AuthenticationPurpose">
            <summary>
            The ADFS authentication provider defined authentication purpose.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AdfsProviderConfiguration.EnableLogging">
            <summary>
            Flag denotes if logging is enabled.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AdfsProviderConfiguration.AllowInteractive">
            <summary>
            Flag denotes if interactive mode is enabled.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AdfsProviderConfiguration.PluginInfoScope">
            <summary>
            Plugin Info value for Scope.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AdfsProviderConfiguration.PluginInfoScopeIndependent">
            <summary>
            Plugin Info value for Scope.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AdfsProviderConfiguration.PluginInfoBridgeClass">
            <summary>
            Plugin Info value for BridgeClass.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.AuthenticationProviderConfiguration.AdfsProviderConfiguration.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.CommandButtonStyle">
            <summary>
            Defines the says a command button can be styled.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.CommandButtonStyle.Default">
            <summary>
            Default button styling.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.CommandButtonStyle.Primary">
            <summary>
            Primary button styling.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ButtonBarCommandLocation">
            <summary>
            Defines a command location inside the <see cref="F:MFiles.VAF.Configuration.Interfaces.Domain.CommandContainer.DomainButtonBar"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ButtonBarCommandLocation.Container">
            <summary>
            Indicates the container in which the command is shown.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ButtonBarCommandLocation.Priority">
            <summary>
            Determines the command button's location inside the button bar,
            relative to other buttons.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ButtonBarCommandLocation.Style">
            <summary>
            Determines the command button's appearance.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ButtonBarCommandLocation.#ctor(System.Int32,MFiles.VAF.Configuration.Domain.CommandButtonStyle)">
            <summary>
            Constructor
            </summary>
            <param name="priority"> Determines the command button's location inside the button bar.</param>
            <param name="style">Determines the command button's appearance.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ClientDirective.AddDomain">
            <summary>
            Defines a directive to add a domain to the navigation tree.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.AddDomain.Type">
            <summary>
            Indicates the directive type defined.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.AddDomain.Domain">
            <summary>
            The definition of the domain to add to the navigation tree.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.AddDomain.ParentDomainId">
            <summary>
            The id of the parent domain.
            If not specified, the parent domain is assumed to be the one
            whose command this directive was a response to.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ClientDirective.AuthenticateUser">
            <summary>
            Defines a directive to authenticate a user.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.AuthenticateUser.Type">
            <summary>
            Indicates the directive type defined.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.AuthenticateUser.AuthenticationOptions">
            <summary>
            List of authentication requests.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ClientDirective.AuthenticateUser.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ClientDirective.LoadConfiguration">
            <summary>
            Defines a directive to load new configuration content for a domain into the editor.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.LoadConfiguration.Type">
            <summary>
            Indicates the directive type defined.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.LoadConfiguration.DomainId">
            <summary>
            The id of the domain whose configuration will be updated.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.LoadConfiguration.Configuration">
            <summary>
            The configuration content to load into the editor.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.LoadConfiguration.IsDirty">
            <summary>
            Controls whether the UI should display the new configuration as dirty or not.
            Dirty indicates the configuration has not been saved.
            If the value is not set (null) the configuration will be considered dirty (i.e. value of true).
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ClientDirective.RefreshDashboard">
            <summary>
            Defines a directive to add a domain to the navigation tree.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.RefreshDashboard.Type">
            <summary>
            Indicates the directive type defined.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.RefreshDashboard.DomainId">
            <summary>
            The id of the domain whose dashboard should be refreshed.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ClientDirective.ReloadDomain">
            <summary>
            Defines a directive to remove and re-add a domain from the navigation tree.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.ReloadDomain.Type">
            <summary>
            Indicates the directive type defined.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.ReloadDomain.Domain">
            <summary>
            The definition of the domain to add to the navigation tree.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.ReloadDomain.ParentDomainId">
            <summary>
            The id of the parent domain.
            If not specified, the parent domain is assumed to be the one
            whose command this directive was a response to.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ClientDirective.RemoveDomain">
            <summary>
            Defines a directive to remove a domain from the navigation tree.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.RemoveDomain.Type">
            <summary>
            Indicates the directive type defined.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.RemoveDomain.DomainId">
            <summary>
            The id of the domain to remove from the navigation tree.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ClientDirective.RevalidateDomain">
            <summary>
            Defines a directive to add a domain to the navigation tree.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.RevalidateDomain.Type">
            <summary>
            Indicates the directive type defined.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.RevalidateDomain.DomainId">
            <summary>
            The id of the domain to re-run validation for.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ClientDirective.ShowMessage">
            <summary>
            Defines a directive to show a message to the user.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.ShowMessage.Type">
            <summary>
            Indicates the directive type defined.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.ShowMessage.Message">
            <summary>
            The message to show to the user.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ClientDirective.RefreshMetadataCache">
            <summary>
            Defines a directive that triggers a metadata structure cache refresh on the client.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.RefreshMetadataCache.Type">
            <summary>
            Indicates the directive type defined.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ClientDirective.ShowModalDashboard">
            <summary>
            Defines dashboard content to show in a modal dialog to the user.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.ShowModalDashboard.Type">
            <summary>
            Indicates the directive type defined.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.ShowModalDashboard.Content">
            <summary>
            The message to show to the user.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ClientDirective.UpdateCommands">
            <summary>
            Defines a directive to update a domain's commands.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.UpdateCommands.Type">
            <summary>
            Indicates the directive type defined.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.UpdateCommands.DomainId">
            <summary>
            The id of the domain whose commands should be updated.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.UpdateCommands.Commands">
            <summary>
            The updated list of available domain commands.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ClientDirective.DashboardUpdateMode">
            <summary>
            Indicates how an element will be updated with content.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ClientDirective.DashboardUpdateMode.Outer">
            <summary>
            The element itself will be completely replaced with the content.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ClientDirective.DashboardUpdateMode.Inner">
            <summary>
            The element's inner content will be replaced with the content.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ClientDirective.DashboardUpdateMode.Append">
            <summary>
            The content will be inserted after the element's existing inner content.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ClientDirective.DashboardUpdateMode.Prepend">
            <summary>
            The content will be inserted before the element's existing inner content.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ClientDirective.UpdateDashboardContent">
            <summary>
            Defines a directive to update a domain's dashboard in part or completely.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.UpdateDashboardContent.Type">
            <summary>
            Indicates the directive type defined.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.UpdateDashboardContent.Content">
            <summary>
            Html content to update the dashboard with.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.UpdateDashboardContent.Target">
            <summary>
            The target dashboard element where the content should be placed.
            In the form of a css or jquery selector.
            If not specified, the entire dashboard will be replaced
            with the provided content.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.UpdateDashboardContent.Mode">
            <summary>
            Determines how the target will be updated with the content.
            If a target is not specified, the mode is ignored.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ClientDirective.UpdateDomain">
            <summary>
            Defines a directive to update multiple domain properties at once.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.UpdateDomain.Type">
            <summary>
            Indicates the directive type defined.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.UpdateDomain.DomainId">
            <summary>
            The id of the domain to be updated.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.UpdateDomain.DisplayName">
            <summary>
            The updated name of the domain.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.UpdateDomain.Description">
            <summary>
            The updated description of the domain.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.UpdateDomain.SortPriority">
            <summary>
            The updated sort priority of the domain.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.UpdateDomain.StatusSummary">
            <summary>
            The updated status summary of the domain.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.UpdateDomain.Commands">
            <summary>
            The updated list of available domain commands.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ClientDirective.UpdateStatusSummary">
            <summary>
            Defines a directive to update a domain's status.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.UpdateStatusSummary.Type">
            <summary>
            Indicates the directive type defined.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.UpdateStatusSummary.DomainId">
            <summary>
            The id of the domain whose status should be updated.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ClientDirective.UpdateStatusSummary.StatusSummary">
            <summary>
            The updated status summary of the domain.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ConfigurationMenuCommandLocation">
            <summary>
            Defines a command location inside the <see cref="F:MFiles.VAF.Configuration.Interfaces.Domain.CommandContainer.ConfigurationContextMenu"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ConfigurationMenuCommandLocation.Container">
            <summary>
            Indicates the container in which the command is shown.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ConfigurationMenuCommandLocation.#ctor(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="priority">Determines the command button's location inside the menu.</param>
            <param name="icon">The name of the icon that will be shown next to the menu item.</param>
            <param name="separatorBefore">Creates a separator before this menu item.</param>
            <param name="noSeparatorAfter">Prevents any line separators from being drawn after this item.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.AvailabilityGroupStatusList">
             <summary>
            Multi-server mode availability status dashboard list.
             </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.AvailabilityGroupStatusList.GenerateList(MFilesAPI.Vault,System.String,System.String,System.Boolean)">
            <summary>
            Generates a <see cref="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardList"/> containing the health status of the availability group.
            </summary>
            <param name="vault">The connection object.</param>
            <param name="configKey">The config key for the vault app or module.</param>
            <param name="listTitle">The title of the dashboard list..</param>
            <param name="excludeCurrent">When true, the current server is not present in the list.</param>
            <returns><see cref="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardList"/> containing the health status of the availability group.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.AvailabilityGroupStatusList.#ctor(MFilesAPI.Vault,System.String,System.String,System.Boolean)">
            <summary>
            Generates a <see cref="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardList"/> containing the health status of the availability group.
            </summary>
            <param name="vault">The connection object.</param>
            <param name="configKey">The config key for the vault app or module.</param>
            <param name="listTitle">The title of the dashboard list..</param>
            <param name="excludeCurrent">When true, the current server is not present in the list.</param>
            <returns><see cref="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardList"/> containing the health status of the availability group.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardCommandStyle">
            <summary>
            The ways in which a dashboard command can be rendered.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.Dashboards.DashboardCommandStyle.Link">
            <summary>
            Indicates the command should be shown as a link.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.Dashboards.DashboardCommandStyle.Button">
            <summary>
            Indicates the command should be shown as a button.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardCommand">
            <summary>
            Represents a "clickable" command in the dashboard.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardCommand.Title">
            <summary>
            The title of the command.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardCommand.ToolTip">
            <summary>
            The tooltip (mouse hover text) of the command.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardCommand.Style">
            <summary>
            The style indicating how the command should be shown.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardCommand.Attributes">
            <summary>
            Simple access to the command element attributes that will be used when generating the xml.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardCommand.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardCommand.Generate(System.Xml.XmlDocument)">
            <summary>
            Renders the command.
            </summary>
            <param name="xml">The html document the command will be added to.</param>
            <returns>The command's xml fragment.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardCommand.GetAttributeSafe(System.String)">
            <summary>
            Helper method to access attributes safely, even if they aren't defined.
            </summary>
            <param name="name">The name of the attribute to get the value for.</param>
            <returns>The value of the attribute if it exists, null otherwise.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardContentCollection">
            <summary>
            Combines multiple pieces of dashboard content into a single piece of content.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardContentCollection.Generate(System.Xml.XmlDocument)">
            <summary>
            Combines all content items generated xml into one fragment.
            </summary>
            <param name="xml">The xml document the content is created for.</param>
            <returns>The combined content.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.XmlContentGenerator">
            <summary>
            Custom XML content generator.
            </summary>
            <param name="xml">The xml document the xml content is being created for.</param>
            <returns>The custom xml content.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.HtmlContentGenerator">
            <summary>
            Custom HTML content generator.
            </summary>
            <returns>Valid html markup.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardCustomContent">
            <summary>
            Simple <see cref="T:MFiles.VAF.Configuration.Domain.Dashboards.IDashboardContent"/> implementation for defining or generating
            custom xml or html content.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.Dashboards.DashboardCustomContent.xmlGenerator">
            <summary>
            The method to delegate XML generation to.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.Dashboards.DashboardCustomContent.htmlGenerator">
            <summary>
            The method to delegate HTML string generation to.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.Dashboards.DashboardCustomContent.htmlContent">
            <summary>
            The static html content.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardCustomContent.#ctor(System.String)">
            <summary>
            Custom, static HTML content.
            </summary>
            <param name="htmlContent"></param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardCustomContent.#ctor(System.FormattableString)">
            <summary>
            Custom, static HTML content from a formattable string.
            Placeholder values are html escaped as necessary.
            </summary>
            <param name="htmlContent"></param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardCustomContent.#ctor(MFiles.VAF.Configuration.Domain.Dashboards.XmlContentGenerator)">
            <summary>
            Constructor
            </summary>
            <param name="xmlGenerator">Custom XML content generator.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardCustomContent.#ctor(MFiles.VAF.Configuration.Domain.Dashboards.HtmlContentGenerator)">
            <summary>
            Custom HTML content generator.
            </summary>
            <param name="htmlGenerator"></param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardCustomContent.Generate(System.Xml.XmlDocument)">
            <summary>
            Creates the xml of the content. 
            </summary>
            <param name="xml">The xml document the content is created for.</param>
            <returns>The custom content.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardDomainCommand">
            <summary>
            Represents a dashboard command that triggers a domain command.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardDomainCommand.DomainCommandID">
            <summary>
            The domain command id to trigger when the command is activated.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardFormatProvider">
            <summary>
            Formats strings as dashboard content (html).
            Arguments are converted to strings (like normal) and are then html escaped,
            unless they are <see cref="T:MFiles.VAF.Configuration.Domain.Dashboards.HtmlString"/>s, <see cref="T:MFiles.VAF.Configuration.Domain.Dashboards.IDashboardContent"/>s,
            or their format starts with an exclamation point (!).
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.Dashboards.DashboardFormatProvider.formatter">
            <summary>
            Custom dashboard formatter instance.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardFormatProvider.GetFormat(System.Type)">
            <summary>
            Provides the dashboard formatter when custom formatter is requested.
            </summary>
            <param name="formatType">The type of formatter needed.</param>
            <returns>The formatter.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardFormatProvider.DashboardFormatter">
            <summary>
            Html escaping formatter.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardFormatProvider.DashboardFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Formats a formatted string with specific arguments.
            </summary>
            <param name="format">The format string.</param>
            <param name="arg">The arguments to format the string with.</param>
            <param name="formatProvider">The provider to format the args.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardFragment">
            <summary>
            Contains one or more <see cref="T:MFiles.VAF.Configuration.Domain.Dashboards.IDashboardContent"/> items without
            a parent container.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardFragment.Generate(System.Xml.XmlDocument)">
            <summary>
            Generates the html of the fragment.
            </summary>
            <param name="xml">The xml document the fragment output will be a part of.</param>
            <returns>The fragment html.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper">
            <summary>
            Dashboard creation helpers for the configurator.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.CustomAttributes">
            <summary>
            Custom html tag attributes understood by the configurator.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.CustomAttributes.SelectTreeNode">
            <summary>
            Value should be a valid node path in the configurator's navigation pane.
            When set, the element will become a link, that when activated,
            will navigate to the node at specified node path.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.CustomAttributes.DomainCommand">
            <summary>
            Value should be the id of a domain command.
            When set, the element will becomome a link, that when activated,
            will trigger the specified domain command.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.CustomAttributes.ContentCommand">
            <summary>
            Value should be the id of a domain command.
            Attribute should be used together with the <see cref="F:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.CustomAttributes.ContentTarget"/> 
            attribute or the <see cref="F:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.CustomAttributes.RefreshInterval"/> attribute.
            When set, the element will become a link, that when activated,
            will trigger the specified domain command, and use the content
            returned by the command to update the content of the element
            referenced in the data-contenttarget attribute.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.CustomAttributes.RefreshInterval">
            <summary>
            Value should be the time in seconds between calls to a domain command.
            Attribute should be used together with the <see cref="F:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.CustomAttributes.ContentCommand"/> attribute.
            When set, the element will automatically call the domain command
            at the defined interval, and replace the inner html content of
            the element with the content returned by the command.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.CustomAttributes.ContentTarget">
            <summary>
            Value should the the id of an element inside the dashboard.
            Attribute should be used together with the <see cref="F:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.CustomAttributes.ContentCommand"/> attribute.
            The element referenced in will have its inner html content updated to that which 
            was returned when the sibling content command is executed.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.ToParagraphs(System.Xml.XmlDocument,System.String)">
            <summary>
            Converts a raw text value to html paragraphs,
            splitting the content by new lines.
            </summary>
            <param name="xml">The xml document to which the paragraphs will be added.</param>
            <param name="text">The text to convert to paragraphs.</param>
            <returns>The xml fragment of paragraphs and text.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.FormatDashboardContentString(System.Xml.XmlDocument,System.String,MFiles.VAF.Configuration.Domain.Dashboards.IDashboardContent[])">
            <summary>
            In a fashion similar to String.Format() this takes a formatted string with
            positional placeholders, and replaces them with content generated from the
            IDashboardContent item at the corresponding position.
            </summary>
            <remarks>
            This is useful for injecting markup inside text. For instance, a sentence,
            where one word should be a link.
            </remarks>
            <param name="xml">The xml document to which the resutling fragment will be added.</param>
            <param name="format">The format string.</param>
            <param name="contentItems">The items whose content will replace the format string's placeholders</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.CreateDomainStatusDashboard(MFiles.VAF.Configuration.Domain.ConfigurationDomain)">
            <summary>
            Creates a generic dashboard based on a <see cref="T:MFiles.VAF.Configuration.Domain.ConfigurationDomain"/> definition.
            </summary>
            <param name="domain">The domain to generate the dashboard for.</param>
            <returns>The domain's dashboard.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.CreateSubDomainListItem(MFiles.VAF.Configuration.Domain.ConfigurationDomain)">
            <summary>
            Creates a generic <see cref="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardListItem"/> based on a <see cref="T:MFiles.VAF.Configuration.Domain.ConfigurationDomain"/>.
            </summary>
            <param name="subDomain">The domain to create the list item for.</param>
            <returns>The list item representing the domain.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.GetConfigurationPath(System.String)">
            <summary>
            Resolves the path to a domain's configuration node.
            </summary>
            <param name="domainID">The id of the domain whose configuration node the path will point to.</param>
            <returns>The configuration node path.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.AddSelectNodeBehavior(System.Xml.XmlElement,System.String)">
            <summary>
            Adds behavior to an element, so that when it is clicked/activated
            the configurator will navigate to the tree node at the nodePath specified.
            </summary>
            <param name="elem">The element to add the behavior to.</param>
            <param name="nodePath">The node path to navigate to.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.AddSelectNodeBehavior(MFiles.VAF.Configuration.Domain.Dashboards.DashboardCommand,System.String)">
            <summary>
            Adds behavior to a command, so that when it is clicked/activated
            the configurator will navigate to the tree node at the nodePath specified.
            </summary>
            <param name="dashboardCmd">The command to add the behavior to.</param>
            <param name="nodePath">The node path to navigate to.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.CreateSelectDomainNodeCommand(MFiles.VAF.Configuration.Domain.ConfigurationDomain)">
            <summary>
            Creates a command that when clicked/activated will navigate to a
            domain's tree node in the configurator's navigation pane.
            </summary>
            <param name="domain">The domain to navigate to.</param>
            <returns>The command.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.CreateSelectDomainNodeCommand(System.String,System.String)">
            <summary>
            Creates a command that when clicked/activated will navigate to a
            domain's tree node in the configurator's navigation pane.
            </summary>
            <param name="domainID">The domain to navigate to.</param>
            <param name="title">The title of the command.</param>
            <returns>The command.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.CreateSelectConfigurationNodeCommand(System.String)">
            <summary>
            Creates a command that when clicked/activated will navigate to a
            domain's configuration tree node in the configurator's navigation pane.
            Uses default configure label.
            </summary>
            <param name="domainID">The domain whose configuration node to navigate to.</param>
            <returns>The command.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.CreateSelectConfigurationNodeCommand(System.String,System.String)">
            <summary>
            Creates a command that when clicked/activated will navigate to a
            domain's configuration tree node in the configurator's navigation pane.
            </summary>
            <param name="domainID">The domain whose configuration node to navigate to.</param>
            <param name="title">The title of the command.</param>
            <returns>The command.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.CreateDomainCommand(MFiles.VAF.Configuration.Interfaces.Domain.ConfigurationDomainCommand)">
            <summary>
            Converts a domain command into a dashboard command.
            When clicked/activated, the domain command will be triggered.
            </summary>
            <param name="domainCmd">The domain command.</param>
            <returns>The dashboard command.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.CreateDomainCommand(System.String,System.String,System.String)">
            <summary>
            Converts a domain command into a dashboard command.
            When clicked/activated, the domain command will be triggered.
            </summary>
            <param name="title">The title of the command.</param>
            <param name="domainCmdId">The id of the domain command.</param>
            <param name="tooltip">The tooltip text for the command.</param>
            <returns>The dashboard command.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.AddRunDomainCommandBehavior(System.Xml.XmlElement,System.String)">
            <summary>
            Adds behavior to an xml element so that when clicked/activated,
            it triggers a domain command.
            </summary>
            <param name="elem">The element to add the behavior to.</param>
            <param name="domainCmdID">The id of the domain command to trigger.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.AddRefreshContentBehavior(System.Xml.XmlElement,System.String,System.Int32)">
            <summary>
            Adds behavior to an xml element so that its content will 
            refresh at the specified interval.
            </summary>
            <param name="elem">The element whose content should be refreshed periodically.</param>
            <param name="domainCmdID">The id of the domain command that returns the updated content.</param>
            <param name="intervalSeconds">The interval at which the content should be refreshed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.GetStatusIconClass(MFiles.VAF.Configuration.Domain.DomainStatus)">
            <summary>
            Resolves the class name to use for a status value.
            </summary>
            <param name="status">The status to resolve the icon class for.</param>
            <returns>The corresponding class name.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.GetIconSizeClass(MFiles.VAF.Configuration.Domain.Dashboards.IconSize)">
            <summary>
            Resolves the class name to use for a particular icon size.
            </summary>
            <param name="size">The size of the icon.</param>
            <returns>The corresponding class name.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.ImageFileToDataUri(System.String)">
            <summary>
            Converts an image file's content into a base64 encoded data uri.
            </summary>
            <param name="imgPath">The path to the image file (on the server).</param>
            <returns>Base64 encoded data uri.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.CreateElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Creates an xml element and it's inner content from markup.
            </summary>
            <param name="xml">The xml document the element will be used in.</param>
            <param name="html">The html markup of the element and its content.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.CreateFragment(System.Xml.XmlDocument,System.String)">
            <summary>
            Creates an xml fragment from html markup.
            </summary>
            <param name="xml">The xml document the fragment will be used in.</param>
            <param name="html">The html markup of the fragment.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.AddClass(System.Xml.XmlElement,System.String)">
            <summary>
            Utility method for adding a class to an element.
            Concatenates the classname (separated by a space) to the class attribute if already defined.
            </summary>
            <param name="elem">The element to add the class to.</param>
            <param name="className">The class name to add.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.AddStyle(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Utility method for adding a style rule property/value to an element.
            Concatenates the style rule to the existing style attribute, if already defined.
            </summary>
            <param name="elem">The element to add the style rule to.</param>
            <param name="property">The rule property to add.</param>
            <param name="value">The value or the rule property to add.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.ToXmlFragment(MFiles.VAF.Configuration.Domain.Dashboards.IDashboardContent)">
            <summary>
            Converts an <see cref="T:MFiles.VAF.Configuration.Domain.Dashboards.IDashboardContent"/> to an xml fragment in
            an undefined xml document.
            </summary>
            <param name="content">The content to convert to a fragment.</param>
            <returns>An xml document fragment.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardHelper.ToXmlString(MFiles.VAF.Configuration.Domain.Dashboards.IDashboardContent,System.Boolean)">
            <summary>
            Converts an <see cref="T:MFiles.VAF.Configuration.Domain.Dashboards.IDashboardContent"/> to a string.
            </summary>
            <param name="content">The content to convert.</param>
            <param name="indentXml">When true, the returned xml string will contain white space indentation.</param>
            <returns>Generated XML string.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardLink">
            <summary>
            Creates a link (anchor element) for a dashboard. 
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardLink.Name">
            <summary>
            The name of the link.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardLink.Url">
            <summary>
            The location of the link.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardLink.#ctor">
            <summary>
            No arg constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardLink.#ctor(System.String,System.String)">
            <summary>
            Basic constructor.
            </summary>
            <param name="name">The name of the link.</param>
            <param name="url">The location of of the link.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardLink.Generate(System.Xml.XmlDocument)">
            <summary>
            Generate the xml content.
            </summary>
            <param name="xml">The xml document the content will be added to.</param>
            <returns>The xml content.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardText">
            <summary>
            Converts plain text to html content by splitting the text
            into paragraphs by newline characters.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardText.Text">
            <summary>
            The plain text to convert to content.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardText.#ctor">
            <summary>
            No arg constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardText.#ctor(System.String)">
            <summary>
            Basic constructor.
            </summary>
            <param name="text">The text content.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardText.Generate(System.Xml.XmlDocument)">
            <summary>
            Generate the xml content.
            </summary>
            <param name="xml">The xml document the content will be added to.</param>
            <returns>The xml content.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.HtmlString">
            <summary>
            Implementation of <see cref="T:System.Web.HtmlString"/> with an extra constructor for
            handling <see cref="T:System.FormattableString"/> which is defined using C# string interpolation
            with the custom <see cref="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardFormatProvider"/>.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.Dashboards.HtmlString.formatProvider">
            <summary>
            Format provider.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.Dashboards.HtmlString.html">
            <summary>
            Raw html string.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.HtmlString.#ctor(System.FormattableString)">
            <summary>
            Constructor.
            </summary>
            <param name="fs">The interpolated html string content.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.HtmlString.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="s">The html string content.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.HtmlString.ToString">
            <summary>
            Override.
            </summary>
            <returns>The raw html string.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.IconSize">
            <summary>
            Defines sizes for configuration dashboard icons.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.Dashboards.IconSize.Normal">
            <summary>
            16px
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.Dashboards.IconSize.Tiny">
            <summary>
            12px
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.Dashboards.IconSize.Small">
            <summary>
            16px
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.Dashboards.IconSize.Medium">
            <summary>
            24px
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.Dashboards.IconSize.Large">
            <summary>
            32px
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.Dashboards.IconSize.ExtraLarge">
            <summary>
            48px
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.IDashboardContent">
            <summary>
            Interface for objects that define dashboard content.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.IDashboardContent.Generate(System.Xml.XmlDocument)">
            <summary>
            Generates the object's xml content.
            </summary>
            <param name="xml">The xml document the content is generated for.</param>
            <returns>The xml content.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardList">
            <summary>
            Represents a top-level listing in a dashboard.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardList.ID">
            <summary>
            The id of the list. Optional.
            Will appear in the html output, so the list can be referenced.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardList.Title">
            <summary>
            The title of the listing (optional).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardList.Commands">
            <summary>
            The top-level commands for the listing (optional).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardList.Items">
            <summary>
            The list's items.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardList.TreePath">
            <summary>
            The domain tree path this list item represents (optional).
            If specified, the title will become a link that navigates
            to the tree node at the path in the configurator's navigation pane.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardList.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardList.Generate(System.Xml.XmlDocument)">
            <summary>
            Renders the list.
            </summary>
            <param name="xml">The html document the list will be added to.</param>
            <returns>The list's xml fragment.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardListItem">
            <summary>
            Represents a list item shown in a <see cref="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardList"/>. 
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardListItem.ID">
            <summary>
            The id of the list item. Optional.
            Will appear in the html output, so the item can be referenced.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardListItem.Icon">
            <summary>
            A path to the icon to use for the list item (optional).
            Should resolve to a file on either the server or client configurator app.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardListItem.Title">
            <summary>
            The title of the list item. Should be set.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardListItem.StatusSummary">
            <summary>
            The status of the list item (optional).
            If specified, rendered as a <see cref="T:MFiles.VAF.Configuration.Domain.Dashboards.StatusStub"/>. 
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardListItem.Commands">
            <summary>
            Commands (links/buttons) to show for the list item.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardListItem.InnerContent">
            <summary>
            The free content to show for the list item.
            For most lists, this should be kept short.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardListItem.TreePath">
            <summary>
            The domain tree path this list item represents (optional).
            If specified, the title will become a link that navigates
            to the tree node at the path in the configurator's navigation pane.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardListItem.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardListItem.Generate(System.Xml.XmlDocument)">
            <summary>
            Renders the list item.
            </summary>
            <param name="xml">The html document the list item will be added to.</param>
            <returns>The list item xml fragment.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.PanelBackground">
            <summary>
            Panel Background.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.Dashboards.PanelBackground.None">
            <summary>
            No panel background.
            Default
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.Dashboards.PanelBackground.Primary">
            <summary>
            Primary panel background.
            Currently blue.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.DashboardPanel">
            <summary>
            Represents a simple panel in a <see cref="T:MFiles.VAF.Configuration.Domain.Dashboards.StatusDashboard"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardPanel.ID">
            <summary>
            The id of the panel.
            Optional.
            Will appear in the html output, so the panel can be referenced.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardPanel.Icon">
            <summary>
            The primary icon to show in the panel (optional).
            Should resolve to a file on either the server or client configurator app.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardPanel.Title">
            <summary>
            The title of the panel (optional).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardPanel.StatusSummary">
            <summary>
            The status of the panel (optional).
            If specified, rendered as a <see cref="T:MFiles.VAF.Configuration.Domain.Dashboards.StatusStub"/>. 
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardPanel.Commands">
            <summary>
            The top-level commands to show for the panel (optional).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardPanel.InnerContent">
            <summary>
            The panel content (optional).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardPanel.Background">
            <summary>
            Controls the panel background color.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.DashboardPanel.TreePath">
            <summary>
            The domain tree path this list item represents (optional).
            If specified, the title will become a link that navigates
            to the tree node at the path in the configurator's navigation pane.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardPanel.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.DashboardPanel.Generate(System.Xml.XmlDocument)">
            <summary>
            Generates the panel content as xml.
            </summary>
            <param name="xml">The xml document the panel will be added to.</param>
            <returns>The panel xml.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.SelectTreeNodeCommand">
            <summary>
            Represents a dashboard command that navigates to another
            tree node in the configurator's navigation pane.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.SelectTreeNodeCommand.NodePath">
            <summary>
            The path to the tree node to navigate to when the command is activated (clicked).
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.StatusDashboard">
            <summary>
            Represents a <see cref="T:MFiles.VAF.Configuration.Domain.ConfigurationDomain"/>'s status dashboard.
            Combines various pieces of content and generates a well formed html element containing it.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.StatusDashboard.Contents">
            <summary>
            The contents of the dashboard.
            Will be rendered in order.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.StatusDashboard.RefreshInterval">
            <summary>
            The interval (in seconds) at which the client should refresh/update the dashboard.
            If an <see cref="P:MFiles.VAF.Configuration.Domain.Dashboards.StatusDashboard.UpdateCommand"/> is defined, it will be called to refresh the
            dashboard, otherwise the whole dashboard will be refreshed from the source defined
            in the domain.
            Value is ignored if less than 1. Low values should be used with caution.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.StatusDashboard.UpdateCommand">
            <summary>
            The id of a domain command to call to trigger dashboard updates at the defined <see cref="P:MFiles.VAF.Configuration.Domain.Dashboards.StatusDashboard.RefreshInterval"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.StatusDashboard.ShowUserErrors">
            <summary>
            Determines if dashboard update/refresh errors are shown to the user.  Many transient errors can occur
            with updates if the vault or application is restarting so typically these are ignored.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.StatusDashboard.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.StatusDashboard.Generate">
            <summary>
            Generates an XML document from the current dashboard contents.
            </summary>
            <returns>Generated xml document.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.StatusDashboard.ToString">
            <summary>
            Generates an html string representing the current dashboard contents.
            </summary>
            <returns>HTML text.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.StatusDashboardContentExtensionMethods">
            <summary>
            Contains helper extension methods for generating dashboard content.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.StatusDashboardContentExtensionMethods.CreateHtmlContent(System.FormattableString)">
            <summary>
            Wraps a formattable string as custom content.
            </summary>
            <param name="content">The html content as a formatted string.</param>
            <returns>The custom content item.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.StatusDashboardContentExtensionMethods.AddContent(MFiles.VAF.Configuration.Domain.Dashboards.StatusDashboard,System.FormattableString)">
            <summary>
            Inserts html content into a dashboard.
            </summary>
            <param name="dashboard">The dashboard to add the content to.</param>
            <param name="content">The content to add.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.StatusDashboardContentExtensionMethods.AddContent(MFiles.VAF.Configuration.Domain.Dashboards.StatusDashboard,MFiles.VAF.Configuration.Domain.Dashboards.IDashboardContent)">
            <summary>
            Inserts html content into a dashboard.
            </summary>
            <param name="dashboard">The dashboard to add the content to.</param>
            <param name="content">The content to add.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.StatusDashboardContentExtensionMethods.SetInnerContent(MFiles.VAF.Configuration.Domain.Dashboards.DashboardPanel,System.FormattableString)">
            <summary>
            Sets the inner html content of a panel
            </summary>
            <param name="panel">The panel to set the inner content of.</param>
            <param name="content">The content to add.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.StatusDashboardContentExtensionMethods.SetInnerContent(MFiles.VAF.Configuration.Domain.Dashboards.DashboardListItem,System.FormattableString)">
            <summary>
            Sets the inner html content of a list item.
            </summary>
            <param name="listItem">The list item to set the inner content of.</param>
            <param name="content">The content to add.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.StatusDashboardContentExtensionMethods.AddContent(MFiles.VAF.Configuration.Domain.Dashboards.DashboardFragment,System.FormattableString)">
            <summary>
            Adds a <see cref="T:System.FormattableString"/> content to a <see cref="!:DashboardContent"/>.
            </summary>
            <param name="fragment">The fragment to add the content to.</param>
            <param name="content">The content to add to the fragment.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.StatusStub">
            <summary>
            Creates a html structure representing a <see cref="P:MFiles.VAF.Configuration.Domain.Dashboards.StatusStub.StatusSummary"/>.
            Rendering the label and/or status icon if defined, and also showing
            the description as a tooltip if available.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.StatusStub.StatusSummary">
            <summary>
            The status to render.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.StatusStub.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.StatusStub.#ctor(MFiles.VAF.Configuration.Domain.DomainStatusSummary)">
            <summary>
            Constructor.
            </summary>
            <param name="statusSummary">The status to render.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.Dashboards.StatusStub.Generate(System.Xml.XmlDocument)">
            <summary>
            Renders the status stub
            </summary>
            <param name="xml">The html document the status stub will be added to.</param>
            <returns>The list item xml fragment.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.Dashboards.VaultApplicationHealthReport">
            <summary>
            Holds the health status of a Vault Application.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.VaultApplicationHealthReport.HostName">
            <summary>
            Server hostname.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.VaultApplicationHealthReport.ServerID">
            <summary>
            Multi-server mode server id.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.VaultApplicationHealthReport.StatusSummary">
            <summary>
            Status summary.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.Dashboards.VaultApplicationHealthReport.LastUpdatedAtUtc">
            <summary>
            Time of the last status update.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.DomainMenuCommandLocation">
            <summary>
            Defines a command location inside the <see cref="F:MFiles.VAF.Configuration.Interfaces.Domain.CommandContainer.DomainContextMenu"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.DomainMenuCommandLocation.Container">
            <summary>
            Indicates the container in which the command is shown.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.DomainMenuCommandLocation.#ctor(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="priority">Determines the command button's location inside the menu.</param>
            <param name="icon">The name of the icon that will be shown next to the menu item.</param>
            <param name="separatorBefore">Creates a separator before this menu item.</param>
            <param name="noSeparatorAfter">Prevents any line separators from being drawn after this item.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.DomainStatus">
            <summary>
            Generic domain states.
            Each domain decides freely which state it is in, if any.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.DomainStatus.Undefined">
            <summary>
            No state defined or available.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.DomainStatus.Disabled">
            <summary>
            Disabled.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.DomainStatus.Enabled">
            <summary>
            Enabled.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.DomainStatus.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.DomainStatus.Warning">
            <summary>
            Warning.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.DomainStatusSummary">
            <summary>
            Defines a domain's status.
            Currently used for display purposes only.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.DomainStatusSummary.Status">
            <summary>
            The status of the domain.
            Optional.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.DomainStatusSummary.Label">
            <summary>
            The display name for the domain's status.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.DomainStatusSummary.Description">
            <summary>
            Further description of the domain's status.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ClientDirectiveType">
            <summary>
            Directives available for controlling the behavior of the
            configurator client with responses to a domain's custom commands.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ClientDirectiveType.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ClientDirectiveType.ShowMessage">
            <summary>
            Directive to show a message to the user.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ClientDirectiveType.AddDomain">
            <summary>
            Directive to add a domain to the navigation tree.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ClientDirectiveType.RemoveDomain">
            <summary>
            Directive to remove a domain from the navigation tree.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ClientDirectiveType.ReloadDomain">
            <summary>
            Removes and then re-adds a domain.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ClientDirectiveType.AuthenticateUser">
            <summary>
            Directive to authenticate a user.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ClientDirectiveType.RevalidateDomain">
            <summary>
            Directive to revalidate a domain.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ClientDirectiveType.RefreshDashboard">
            <summary>
            Directive to refresh a domain's dashboard.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ClientDirectiveType.LoadConfiguration">
            <summary>
            Directive to load new configuration content for a domain into the editor.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ClientDirectiveType.UpdateStatusSummary">
            <summary>
            Directive containing a new status summary for a domain.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ClientDirectiveType.UpdateCommands">
            <summary>
            Directive containing a full, updated list of available domain commands.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ClientDirectiveType.UpdateDashboardContent">
            <summary>
            Directive containing updated dashboard content for the domain.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ClientDirectiveType.UpdateDomain">
            <summary>
            Directive containing that updates part of a domain definition, or
            values loaded for it.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ClientDirectiveType.ShowModalDashboard">
            <summary>
            Directive containing dashboard content to show in a modal dialog to the user.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ClientDirectiveType.RefreshMetadataCache">
            <summary>
            Directive that triggers a metadata structure cache refresh on the client.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.IClientDirective">
            <summary>
            Interface for a single directive which directs the behavior 
            of the configurator client.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.IClientDirective.Type">
            <summary>
            Indicates the directive type defined.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ConfigurationDomain">
            <summary>
            Defines a configuration domain for use in the generic json configuration editor.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ConfigurationDomain.ID">
            <summary>
            Defines the id for the configuration domain.
            Should be unique (name-spaced name recommended).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ConfigurationDomain.DisplayName">
            <summary>
            Human-readable name for the domain.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Description">
            <summary>
            Optional description of the configuration domain.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ConfigurationDomain.SubDomains">
            <summary>
            The domain's subdomains or the source definition to use to load them.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Configuration">
            <summary>
            The domain's configuration source (readable/writable) if any.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Schema">
            <summary>
            The domains schema or schema source definition, if any.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Validation">
            <summary>
            The domain's validation source definition, if any.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ConfigurationDomain.StatusDashboard">
            <summary>
            The domain's dashboard source definition, if any.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Commands">
            <summary>
            The domain's custom commands if any.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ConfigurationDomain.SortPriority">
            <summary>
            The priority in which this domain should be listed amongst other domains.
            Domains with larger sortPrioriity values will appear earlier/higher in listings.
            Domains with the same/no priority will be sorted alphabetically.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ConfigurationDomain.StatusSummary">
            <summary>
            The domain's status source definition, if any.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Initializers">
            <summary>
            Directives used to initialize the domain on the client. This can be used to package the domain
            with the results of domain definied sources, without the client needing to follow those sources
            itself initially. This can reduce the number of server calls that need to be made when first
            loading a domain, improving performance, especially in cases of high latency.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.StorageType">
            <summary>
            The named value storage type where vault application domains are registered.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ConfigurationDomain.DefaultNamespaces">
            <summary>
            The default named value namespaces where the domains are registered.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ConfigurationDomain.DefaultNamespaces.ApplicationDomains">
            <summary>
            Application Domains.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ConfigurationDomain.DefaultNamespaces.ConnectorDomains">
            <summary>
            Connector Domains.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ConfigurationDomain.DefaultNamespaces.ProviderDomains">
            <summary>
            Provider Domains.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ConfigurationDomain.BuiltInDomainIds">
            <summary>
            List of built-in (hard-coded) domain ids in MFAdmin.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ConfigurationDomain.BuiltInDomainIds.Connectors">
            <summary>
            Domain id of node that loads registered  connectors.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ConfigurationDomain.BuiltInDomainIds.Providers">
            <summary>
            Domain id of node that loads registered  providers.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ConfigurationDomain.BuiltInDomainIds.Applications">
            <summary>
            Domain id of node that loads registered applications.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ConfigurationDomain.BuiltInDomainIds.FromNamespace(System.String)">
            <summary>
            Provides the id of the domain that apps will appear under if registered
            under the specified namespace.
            </summary>
            <param name="ns">The namespace where a domain has been registered.</param>
            <returns>The id of the parent domain or null, if the namespace was not recognized.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities">
            <summary>
            Capabilities is a bitwise operation capable enumeration of the features that the ConfigurationDomain supports.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.SubDomains">
            <summary>
            Sub Domain.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.Configuration">
            <summary>
            Configuration.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.Schema">
            <summary>
            Schema.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.Validation">
            <summary>
            Validation.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.StatusDashboard">
            <summary>
            Status Dashboard.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.Commands">
            <summary>
            Commands.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.Domain.ConfigurationDomain.Capabilities.StatusSummary">
            <summary>
            Status Summary.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ConfigurationDomain.RegisterDomain(MFilesAPI.Vault,System.String,MFiles.VAF.Configuration.Domain.ConfigurationDomain)">
            <summary>
            Registers an application domain in the vault.
            The domain's id will be used as the registration key.
            </summary>
            <param name="vault">The vault in which to register the domain.</param>
            <param name="domainNamespace">The namespace in which to register the domain.</param>
            <param name="domain">The domain to register.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ConfigurationDomain.RegisterDomain(MFilesAPI.Vault,System.String,System.String,MFiles.VAF.Configuration.Interfaces.Domain.Source)">
            <summary>
            Registers an application domain in the vault.
            </summary>
            <param name="vault">The vault in which to register the domain.</param>
            <param name="domainNamespace">The namespace in which to register the domain.</param>
            <param name="key">The key to register the application under (typically the domain id).</param>
            <param name="source">The source to load the domain definition from.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ConfigurationDomain.RegisterDomain(MFilesAPI.Vault,System.String,System.String,MFiles.VAF.Configuration.Interfaces.Domain.SourceDefinition)">
            <summary>
            Registers an application domain in the vault.
            </summary>
            <param name="vault">The vault in which to register the domain.</param>
            <param name="domainNamespace">The namespace in which to register the domain.</param>
            <param name="key">The key to register the application under (typically the domain id).</param>
            <param name="sourceDef">The source to load the domain definition from.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ConfigurationDomain.RegisterDomain(MFilesAPI.Vault,System.String,System.String,MFiles.VAF.Configuration.Domain.ConfigurationDomainOrSource)">
            <summary>
            Registers an application domain in the vault.
            </summary>
            <param name="vault">The vault in which to register the domain.</param>
            <param name="domainNamespace">The namespace in which to register the domain.</param>
            <param name="key">The key to register the application under (typically the domain id).</param>
            <param name="domainOrSource">The domain or the source to load the domain definition from.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ConfigurationDomain.ClearDomainRegistrations(MFilesAPI.Vault,System.String)">
            <summary>
            Clears the given domain namespace from domain registrations.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="domainNamespace">The namespace that is cleared.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ConfigurationDomain.UnregisterDomain(MFilesAPI.Vault,System.String,MFiles.VAF.Configuration.Domain.ConfigurationDomain)">
            <summary>
            Unregisters an application domain from the vault assuming it has been registered with it's id.
            </summary>
            <param name="vault">The vault in which to register the domain.</param>
            <param name="domainNamespace">The namespace in which the domain is registered.</param>
            <param name="domain">The domain that is registered.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ConfigurationDomain.UnregisterDomain(MFilesAPI.Vault,System.String,System.String)">
            <summary>
            Unregisters an application domain from the vault assuming it has been registered with it's id.
            </summary>
            <param name="vault">The vault in which to register the domain.</param>
            <param name="domainNamespace">The namespace in which the domain is registered.</param>
            <param name="key">The key under which the domain is registered.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ConfigurationDomainOrSource">
            <summary>
            Proxy to a ConfigurationDomain or its source definition.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ConfigurationDomainOrSource.op_Implicit(MFiles.VAF.Configuration.Domain.ConfigurationDomain)~MFiles.VAF.Configuration.Domain.ConfigurationDomainOrSource">
            <summary>
            Convert/Wrap ConfigurationDomain to ConfigurationDomainOrSource.
            </summary>
            <param name="domain">The ConfigurationDomain to convert.</param>
            <returns><see cref="T:MFiles.VAF.Configuration.Domain.ConfigurationDomainOrSource"/></returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ConfigurationDomainOrSource.op_Implicit(MFiles.VAF.Configuration.Interfaces.Domain.SourceDefinition)~MFiles.VAF.Configuration.Domain.ConfigurationDomainOrSource">
            <summary>
            Convert/Wrap a SourceDefinition to ConfigurationDomainOrSource.
            </summary>
            <param name="sourceDef">The SourceDefinition to convert.</param>
            <returns><see cref="T:MFiles.VAF.Configuration.Domain.ConfigurationDomainOrSource"/></returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ConfigurationDomainOrSource.op_Implicit(MFiles.VAF.Configuration.Interfaces.Domain.Source)~MFiles.VAF.Configuration.Domain.ConfigurationDomainOrSource">
            <summary>
            Convert/Wrap a Source to ConfigurationDomainOrSource.
            </summary>
            <param name="source">The Source to convert.</param>
            <returns><see cref="T:MFiles.VAF.Configuration.Domain.ConfigurationDomainOrSource"/></returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ConfigurationDomainsOrSource">
            <summary>
            Proxy to a List of Domains and/or Domain Sources, or a list source definition.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ConfigurationDomainsOrSource.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ConfigurationDomainsOrSource.Add(MFiles.VAF.Configuration.Domain.ConfigurationDomain)">
            <summary>
            Adds a domain to the list of domains.
            </summary>
            <param name="domain">The domain to add.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ConfigurationDomainsOrSource.Add(MFiles.VAF.Configuration.Interfaces.Domain.Source)">
            <summary>
            Adds a domain source to the list of domains.
            </summary>
            <param name="source">The domain to add.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ConfigurationDomainsOrSource.Add(MFiles.VAF.Configuration.Interfaces.Domain.SourceDefinition)">
            <summary>
            Adds a domain source definition to the list of domains.
            </summary>
            <param name="sourceDef">The domain to add.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ConfigurationDomainsOrSource.Add(MFiles.VAF.Configuration.Domain.ConfigurationDomainOrSource)">
            <summary>
            Adds a domain or source to the list of domains.
            </summary>
            <param name="domainOrSource">The domain or source to add.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.AuthenticationRequest">
            <summary>
            Defines the authentication request.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationRequest.RepositoryId">
            <summary>
            The target repository id.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationRequest.RepositoryDiplayName">
            <summary>
            The target repository name.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationRequest.AccountIdentifier">
            <summary>
            The identifier of the account that should be authenticated.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationRequest.Name">
            <summary>
            Name of the authentication configuration.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationRequest.AssemblyName">
            <summary>
            The assembly name of the plugin.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationRequest.IsDefault">
            <summary>
            Is default plugin.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationRequest.IsScopeIndependent">
            <summary>
            Is usable independently of any scope.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationRequest.BridgeClassName">
            <summary>
            The class name of the COM bridge.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.AuthenticationRequest.Configuration">
            <summary>
            The plugin configuration.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.AuthenticationRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ConfigurationDomainCommandResponse">
            <summary>
            Response to a domain's custom command.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ConfigurationDomainCommandResponse.Directives">
            <summary>
            Defines a list of directives to process on the client.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ConfigurationDomainCommandResponse.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ExtendedVaultExtensionMethodCall">
            <summary>
            Defines a how an extended VaultExtensionMethod can be called.
            Assumes that the Input is a JSON object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ExtendedVaultExtensionMethodCall.ApplicationGuid">
            <summary>
            The target vault application GUID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ExtendedVaultExtensionMethodCall.Service">
            <summary>
            The target vault service name.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ExtendedVaultExtensionMethodCall.Instance">
            <summary>
            The target configuration instance name.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ExtendedVaultExtensionMethodCall.Method">
            <summary>
            The name of the vault extension method.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ExtendedVaultExtensionMethodCall.Input">
            <summary>
            The parameters for the vault extension method.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ExtendedVaultExtensionMethodSource">
            <summary>
            Defines a vault extension method call to obtain (read) a value from the vault.
            Also allows defining a vault extension method call to update (write) a value in the vault.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ExtendedVaultExtensionMethodSource.TypeName">
            <summary>
            The name of the source.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ExtendedVaultExtensionMethodSource.Read">
            <summary>
            A vault extension method call used to obtain (read) a value from the vault.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ExtendedVaultExtensionMethodSource.Write">
            <summary>
            A vault extension method call used to update (write) a value in the vault.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.IValueOrValueSource">
            <summary>
            A proxy interface for accessing a value or a source for obtaining the value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.IValueOrValueSource.HasSource">
            <summary>
            Indicates whether a source is defined.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.IValueOrValueSource.HasValue">
            <summary>
            Indicates whether a value is defined.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.IValueOrValueSource.Source">
            <summary>
            The value source, if any.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.IValueOrValueSource.Value">
            <summary>
            The value, if any.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.NamedValueKeySource">
            <summary>
            Defines a specific value location in named value storage.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.NamedValueKeySource.TypeName">
            <summary>
            The name of the source.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.NamedValueKeySource.Type">
            <summary>
            The type of storage used for the value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.NamedValueKeySource.Namespace">
            <summary>
            The namespace of the value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.NamedValueKeySource.Key">
            <summary>
            The namespace key for the value.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.NamedValueKeySource.ReadValue(MFilesAPI.Vault)">
            <summary>
            Read and return the value.
            </summary>
            <param name="vault">Vault to operate on.</param>
            <returns>The value as string.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.NamedValueKeySource.SaveValue(MFilesAPI.Vault,System.String)">
            <summary>
            Save the value to NVS.
            </summary>
            <param name="vault">Vault to operate on.</param>
            <param name="value">Value to save.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.NamedValueNamespaceSource">
            <summary>
            Defines the location of namespaced values in name value storage.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.NamedValueNamespaceSource.TypeName">
            <summary>
            The name of the source.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.NamedValueNamespaceSource.Type">
            <summary>
            The type of storage used for the values.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.NamedValueNamespaceSource.Namespace">
            <summary>
            The namespace of the values.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.SchemaOrSource">
            <summary>
            Proxy to a Schema or its source definition.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.SchemaOrSource.op_Implicit(MFiles.VAF.Configuration.JsonEditor.Schema)~MFiles.VAF.Configuration.Domain.SchemaOrSource">
            <summary>
            Convert/Wrap schema to SchemaOrSource.
            </summary>
            <param name="schema">The schema to convert.</param>
            <returns><see cref="T:MFiles.VAF.Configuration.Domain.SchemaOrSource"/></returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.SchemaOrSource.op_Implicit(MFiles.VAF.Configuration.Interfaces.Domain.SourceDefinition)~MFiles.VAF.Configuration.Domain.SchemaOrSource">
            <summary>
            Convert/Wrap a SourceDefinition to SchemaOrSource.
            </summary>
            <param name="sourceDef">The source definition to convert.</param>
            <returns><see cref="T:MFiles.VAF.Configuration.Domain.SchemaOrSource"/></returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.SchemaOrSource.op_Implicit(MFiles.VAF.Configuration.Interfaces.Domain.Source)~MFiles.VAF.Configuration.Domain.SchemaOrSource">
            <summary>
            Convert/Wrap a Source to SchemaOrSource.
            </summary>
            <param name="source">The source to convert.</param>
            <returns><see cref="T:MFiles.VAF.Configuration.Domain.SchemaOrSource"/></returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ValueOrValueSource`1">
            <summary>
            A generic proxy for accessing a value or a source for obtaining the value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ValueOrValueSource`1.HasSource">
            <summary>
            Indicates whether a source is defined.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ValueOrValueSource`1.HasValue">
            <summary>
            Indicates whether a value is defined.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ValueOrValueSource`1.Source">
            <summary>
            The value source, if any.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ValueOrValueSource`1.Value">
            <summary>
            The value, if defined.
            Typically the TypedValue property should be used for setting.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ValueOrValueSource`1.TypedValue">
            <summary>
            The typed value, if defined.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.ValueOrValueSourceJsonConverter">
            <summary>
            JSON converter for implementations of ValueOrValueSource.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ValueOrValueSourceJsonConverter.CanRead">
            <summary>
            Indicates whether the converter can parse json.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.ValueOrValueSourceJsonConverter.CanWrite">
            <summary>
            Indicates whether the converter can write (serialize) an object to json.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ValueOrValueSourceJsonConverter.CanConvert(System.Type)">
            <summary>
            Can the object be converted with this.
            </summary>
            <param name="objectType">The type of object to be converted.</param>
            <returns>True, if the type can be converted.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ValueOrValueSourceJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Domain.ValueOrValueSourceJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>NA - Not implemented.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.VaultExtensionMethodCall">
            <summary>
            Defines a how a VaultExtensionMethod can be called.
            Assumes that the parameters are always an array that will be serialized as json when called.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.VaultExtensionMethodCall.Method">
            <summary>
            The name of the vault extension method.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.VaultExtensionMethodCall.Params">
            <summary>
            The parameters for the vault extension method.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.VaultExtensionMethodCall.Map">
            <summary>
            Allows for dynamic parameters to be specified at call time.
            The dynamic parameters are named, and this dictionary maps those names
            to a specific parameter index.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Domain.VaultExtensionMethodSource">
            <summary>
            Defines a vault extension method call to obtain (read) a value from the vault.
            Also allows defining a vault extension method call to update (write) a value in the vault.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.VaultExtensionMethodSource.TypeName">
            <summary>
            The name of the source.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.VaultExtensionMethodSource.Read">
            <summary>
            A vault extension method call used to obtain (read) a value from the vault.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Domain.VaultExtensionMethodSource.Write">
            <summary>
            A vault extension method call used to update (write) a value in the vault.
            The VaultExtensionMethodCall should map the "text" value to a parameter index as the value to store.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.DynamicList.DynamicListBaseAttribute">
            <summary>
            Describes the attributes of a Dynamic List ( IE: Subscribe-able collection ).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.DynamicList.DynamicListBaseAttribute.ListName">
            <summary>
            Name of the subscribe-able collection.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.DynamicList.DynamicListBaseAttribute.RootAncestorOffset">
            <summary>
            Used to calculate the root ancestor path to which this reference-able item has been defined for.
            Example: ThisItem( Offset = 0) -> ParentItem( Offset 1 ) -> GrandParentItem( Offset = 2 )
            When no offset is defined, the current item will be used as the root item.
            Note: This is only used when the subscriber is filtered.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.DynamicList.DynamicListBaseAttribute.#ctor">
            <summary>
            Default parameter-less constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.DynamicList.DynamicListBaseAttribute.HasOptions">
            <summary>
            Determines if this attribute defines custom options.
            </summary>
            <returns>True, if this attribute defines custom options.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.DynamicList.DynamicListBaseAttribute.GetOptions">
            <summary>
            Gets the custom options defined by this attribute.
            </summary>
            <returns>Dynamic expando object</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.DynamicList.DynamicListRootAttribute">
            <summary>
            Denotes a property on a class that is the root item containing a collection of sub-trees.
            These sub-trees, while stored within the root list on the associated EditeableItem are handled independent of one another.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.DynamicList.DynamicListRootAttribute.ListNames">
            <summary>
            The property grid allows for each root list item to have a subtree, which have 
            their own list to be handled independently of the top-most root list. Each EditableItem may declare
            itself as the context root item for one or more dynamic lists within the 
            DynamicListRootAttribute -> ListNames as a new string[] 
            { 
              "ListForWhichThisItemIsTheRoot1", 
              "ListForWhichThisItemIsTheRoot2" 
            }
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.DynamicList.DynamicListRootAttribute.HasOptions">
            <summary>
            Checks if any list names are defined for this member.
            </summary>
            <returns>True / False</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.DynamicList.DynamicListRootAttribute.GetOptions">
            <summary>
            Gets any list names defined for this member.
            </summary>
            <returns>Options expando.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.DynamicList.FilterMode">
            <summary>
            Defines the filtering styles that can be used by subscribers to reduce the members they see.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.DynamicList.FilterMode.None">
            <summary>
            No filter behavior.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.DynamicList.FilterMode.Ancestors">
            <summary>
            Members with the same root ancestor or with a root ancestor that is an ancestor of the 
            subscriber's root ancestor will be returned.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.DynamicList.FilterMode.Descendants">
            <summary>
            Members with the same root ancestor or with a root ancestor that is a descendent of the 
            subscriber's root ancestor will be returned.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.DynamicList.FilterMode.AncestorsAndDescendants">
            <summary>
            Members with the same root ancestor or with a root ancestor that is an ancestor or 
            descendent of the subscriber's root ancestor will be returned.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.DynamicList.DynamicListSubscriberAttribute">
            <summary>
            Describes the attributes of a Dynamic List Subscriber( IE: Listens to a Subscribe-able collection for changes ).
            Uses the subscribe-able list as a value source.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.DynamicList.DynamicListSubscriberAttribute.FilterMode">
            <summary>
            The filtering mode used by the subscriber to limit the lists members that it subscribes to.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.DynamicList.DynamicListSubscriberAttribute.#ctor">
            <summary>
            Default parameter-less constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.DynamicList.DynamicListSubscriberAttribute.GetOptions">
            <summary>
            Gets the custom options defined by this attribute.
            </summary>
            <returns>Dynamic expando object</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.DynamicList.DynamicListMemberAttribute">
            <summary>
            Describes the attributes of a Dynamic List Member ( IE: Subscribe-able List collection member ).
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.DynamicList.DynamicListMemberAttribute.#ctor">
            <summary>
            Default parameter-less constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.DynamicList.DynamicListMemberAttribute.GetOptions">
            <summary>
            Gets the custom options defined by this attribute.
            </summary>
            <returns>Dynamic expando object</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.DynamicPropertyValueSetter">
            <summary>
            Property value resolution class, used for static and dynamic value resolution.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.DynamicPropertyValueSetter.Property">
            <summary>
            Property for which the value is to be set.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.DynamicPropertyValueSetter.Value">
            <summary>
            Value to set on the property.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.DateTimeExtensions">
            <summary>
            Extension methods for DateTime handling.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.DateTimeExtensions.ToTimestamp(System.DateTime,System.DateTimeKind)">
            <summary>
            Converts DateTime to Timestamp while preserving the milliseconds.
            The method generates a timestamp object of as specified by the outputFormat param.
            </summary>
            <param name="dateTime">The dateTime object to convert.</param>
            <param name="outputFormat">Specifies how the date time should be formatted before conversion.</param>
            <returns><see cref="T:MFilesAPI.Timestamp"/> of the passed output format locality.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.DateTimeExtensions.ToDateTime(MFilesAPI.Timestamp,System.DateTimeKind)">
            <summary>
            Converts Timestamp to DateTime while preserving the milliseconds of the nanosecond fraction.
            The method generates a dateTime object of as specified by the outputFormat param.
            </summary>
            <param name="timestamp">The timestamp object to convert.</param>
            <param name="outputFormat">Specifies what the timestamp locality is, local or utc.</param>
            <returns>Converted date time in the specified output format locality.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.EnumOption">
            <summary>
            JsonConfigurationEditor Enum option wrapper class.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.EnumOption.GetEnumValue(System.Object,System.Type,System.Resources.ResourceManager)">
            <summary>
            Extracts a value from an enum.
            </summary>
            <param name="member">Enum member.</param>
            <param name="enumType">The type that defines the enum value.</param>
            <param name="resources">Resources used for localized labels.</param>
            <returns>Enum value.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.EnumOption.GetEnumValues(System.Type,System.Resources.ResourceManager)">
            <summary>
            Extracts all members from an enum.
            </summary>
            <param name="enumType"><see cref="T:System.Enum"/> type.</param>
            <param name="resources">Text resources for localized labels.</param>
            <returns>List of enum options.</returns>
        </member>
        <member name="P:MFiles.VAF.Configuration.EnumOption.Number">
            <summary>
            Holds the numeric value for an enum member.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.EnumOption.Value">
            <summary>
            Holds the string value for an enum member.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.EnumOption.Label">
            <summary>
            Holds a explicitly defined label for a enum member.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.EnumOption.Hidden">
            <summary>
            Indicates whether the enum value should be hidden.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.EnumOption.Type">
            <summary>
            Enum type.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.EnumOption.HelpText">
            <summary>
            Optional. Help text / Tool tip for the option.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.IConfigurationStorage">
            <summary>
            
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.IConfigurationStorage.ReadConfigurationData(MFilesAPI.Vault,System.String,System.String,System.String@)">
            <summary>
            Returns the persisted configuration data from vault.
            </summary>
            <param name="vault">The vault.</param>
            <param name="configNamespace">The configuration namespace that shall be used when loading the configuration.</param>
            <param name="configKey">Configuration key that identifies the module configuration.</param>
            <param name="data">Output parameter for the data that was read. Set to null if the configuration key can't be found.</param>
            <returns>True is the configuration key existed in the defined configuration namespace.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.IConfigurationStorage.ReadConfigurationData(MFilesAPI.Vault,System.String,System.String)">
            <summary>
            Returns the persisted configuration data from vault.
            </summary>
            <param name="vault">The vault.</param>
            <param name="configNamespace">The configuration namespace that shall be used when loading the configuration.</param>
            <param name="configKey">Configuration key that identifies the module configuration.</param>
            <returns>The read configuration data. Empty string if the configuration key was not found.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.IConfigurationStorage.SaveConfigurationData(MFilesAPI.Vault,System.String,System.String,System.String)">
            <summary>
            Persists the configuration data to the vault.
            </summary>
            <param name="vault">The vault.</param>
            <param name="configNamespace">The configuration namespace that shall be used when saving the configuration.</param>
            <param name="configKey">The configuration key that identifies under which key to store the configuration.</param>
            <param name="data">The configuration data to persist.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.IConfigurationStorage.Load``1(MFilesAPI.Vault,System.String,System.String)">
            <summary>
            Generic method to load the configuration from the specified vault.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="vault">The vault.</param>
            <param name="configNamespace">The configuration namespace that shall be used when loading the configuration.</param>
            <param name="configKey">The configuration key that identifies the value that should be loaded.</param>
            <returns>The loaded configuration object.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.IConfigurationStorage.Load(MFilesAPI.Vault,System.Type,System.String,System.String)">
            <summary>
            Method to load the configuration from the specified vault.
            </summary>
            <param name="vault">The vault.</param>
            <param name="configType">The type of the configuration object to be loaded.</param>
            <param name="configNamespace">The configuration namespace that shall be used when loading the configuration.</param>
            <param name="configKey">The configuration key that identifies the value that should be loaded.</param>
            <returns>The loaded configuration object.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.IConfigurationStorage.Populate``1(MFilesAPI.Vault,``0,System.String,System.String)">
            <summary>
            Method to populate the configuration from the specified vault.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="vault">The vault.</param>
            <param name="configuration">The configuration object to populate.</param>
            <param name="configNamespace">The configuration namespace that shall be used when loading the configuration.</param>
            <param name="configKey">The configuration key that identifies the value that should be loaded.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.IConfigurationStorage.Deserialize``1(System.String)">
            <summary>
            Generic method to load the configuration from the specified string. Creates a new object.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="configurationData">The configuration data from which the configuration object should be loaded from.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.IConfigurationStorage.Deserialize(System.Type,System.String)">
            <summary>
            Method to load the configuration from the specified string. Creates a new object.
            </summary>
            <param name="configType">The type of the configuration object to be loaded.</param>
            <param name="configurationData">The configuration data from which the configuration object should be loaded from.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.IConfigurationStorage.Deserialize``1(System.String,``0)">
            <summary>
            Method to load the configuration from the specified string. Populates an existing object.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="configurationData">The configuration data from which the configuration object should be loaded from.</param>
            <param name="configuration">The configuration object to populate.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.IConfigurationStorage.Save``1(MFilesAPI.Vault,``0,System.String,System.String)">
            <summary>
            Save the configuration to the specified vault.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="vault">The vault.</param>
            <param name="configuration">The configuration object to save.</param>
            <param name="configNamespace">The configuration namespace that shall be used when saving the configuration.</param>
            <param name="configKey">The configuration key that identifies the value that is be used when saving.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.IConfigurationStorage.Serialize``1(``0)">
            <summary>
            Serializes the given configuration object to a string.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="configuration">The configuration object to save.</param>
            <returns>The configuration object serialized as string.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.IConfigurationValidityMask">
            <summary>
            Interface for the configuration validity mask. The mask indicates if a configuration value has been set or validated.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.IConfigurationValidityMask.MarkMemberDefined(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Marks the configuration member as 'defined', i.e. it is set in the user-specified configuration.
            </summary>
            <param name="containerObject">The object whose member is marked as defined.</param>
            <param name="member">The member identity.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.IConfigurationValidityMask.IsMemberDefined(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Resolves if a configuration member is defined. I.e. it is set in the user-specified configuration.
            </summary>
            <param name="containerObject">The object whose member is looked.</param>
            <param name="member">The member identity.</param>
            <returns>Returns true if the member is defined.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.IJsonConfEditorAttr">
            <summary>
            Common Interface for classes that allow the JsonSchemaGenerator to pull option values,
            Note: This is not yet the Type filtered by in the SchemaGenerator. Meaning that simply 
            implementing this interface and decorating a Configuration class member will not result
            in the value showing up in the options.  For now, you need to extend the JsonConfEditorAttribute
            class, although this may be broadened in scope in the future to use this interface.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.IJsonConfEditorAttr.HasOptions">
            <summary>
            Determines if this attribute defines custom options.
            </summary>
            <returns>True, when the item has options.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.IJsonConfEditorAttr.GetOptions">
            <summary>
            Gets the custom options defined by this attribute.
            </summary>
            <returns>Dynamic expando object</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.ISchemaMemberControlAttribute">
            <summary>
            Interface for controlling the schema generators behavior for specific members.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.ISchemaMemberControlAttribute.CanGenerateMember(System.Reflection.MemberInfo,MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Determines whether the schema generator should add a member definition
            to the schema it is generating.
            </summary>
            <param name="member">The data member that could be added to the schema.</param>
            <param name="configurationRequestContext">The configuration request context.</param>
            <returns>True if the member should be added to the schema, false otherwise.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonConfBitFlagLabelsAttribute">
            <summary>
            Attribute that can decorate flag enums that are exposed in the
            M-Files configuration editor.
            It defines the labels and help texts to show for the bit OFF and ON options.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfBitFlagLabelsAttribute.OffLabel">
            <summary>
            The label for the bit OFF option.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfBitFlagLabelsAttribute.OnLabel">
            <summary>
            The label for the bit ON option.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfBitFlagLabelsAttribute.OffHelpText">
            <summary>
            The helptext for the bit OFF option.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfBitFlagLabelsAttribute.OnHelpText">
            <summary>
            The helptext for the bit ON option.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfBitFlagLabelsAttribute.ResourceIdPrefix">
            <summary>
            Prefix for partial resource ids in other members..
            I.E. Used when the  values are prefixed with <see cref="F:MFiles.VAF.Configuration.ResourceMarker.Suffix"/>.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonEditor.IStableValueOptionsProvider">
            <summary>
            Interface that provides value options for an
            options editor instance. The options can be resolved at
            runtime, and should be relatively stable, i.e., not typically
            change during the course of a configuration editing session.
            Users will need to refresh the node/schema for any changes to
            the options to appear.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonEditor.IStableValueOptionsProvider.GetOptions(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Resolves options to display in the options editor.
            </summary>
            <param name="context">The context in which the options will be shown.</param>
            <returns>Options to display in the options editor.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonEditor.ValueOption">
            <summary>
            Represents an option that is selectable from the Json configurator's
            options editor.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonEditor.ValueOption.Value">
            <summary>
            The option value that will be stored in JSON.
            This should typically be a string or int and must correspond to the
            underlying c# type either directly or through default/custom JSON
            deserialization.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonEditor.ValueOption.Label">
            <summary>
            The option label that will be dispalyed in the editor and select list.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonEditor.ValueOption.Hidden">
            <summary>
            If true, the option will not appear in the select list.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonEditor.ValueOption.HelpText">
            <summary>
            Optional. Help text / Tool tip for the option.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator">
            <summary>
            Creates a json editor schema structure for C# code.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.Generate(System.Type)">
            <summary>
            Static convenience method used to generate a schema from a type.
            </summary>
            <param name="fromType">Type to be generated.</param>
            <returns><see cref="T:MFiles.VAF.Configuration.JsonEditor.Schema"/></returns>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.defaultTypeEditors">
            <summary>
            Default mappings of C# types to existing JSON type editors.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.types">
            <summary>
            Private queue of types that still need editors generated for them.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.handledTypes">
            <summary>
            List of types that have already been converted to editors.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.schema">
            <summary>
            The schema object structure.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.schemaLock">
            <summary>
            Lock to ensure the class only generates one schema at a time.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.EditorsByType">
            <summary>
            Explicit Mapping of C# types to existing JSON type editors.
            
            Types in this list will reference the associated editor name, 
            and no type editor will be generated for them.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.ResourceManager">
            <summary>
            The resource manager object for resolving the resource ids.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.ConfigurationRequestContext">
            <summary>
            The configuration request context.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.MemberAddedCallback">
            <summary>
            Event triggered when a member is added to a generated type editor.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.SchemaMemberAddedCallback">
            <summary>
            Callback delegate triggered when a member is added to an editor.
            This allows massaging a member definition, 
            primarily to set options, at runtime.
            </summary>
            <param name="parentType">The name of the editor the member is being added to.</param>
            <param name="name">The name of the member.</param>
            <param name="member">The generated member definition which can be modified</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.GenerateSchema(System.Type)">
            <summary>
            Generates a JSON editor schema for the object's Type.
            Recursively creates member definitions for it's members and it's members' members,
            also creating type editors for any member types that can't use an existing one. 
            </summary>
            <param name="type">Type to be generated.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.GetEnumLabel(System.Type,System.String,MFiles.VAF.Configuration.JsonConfEditorAttribute)">
            <summary>
            Resolves a custom <see cref="T:MFiles.VAF.Configuration.JsonConfEditorAttribute"/> 'Label' from an Enum.
            </summary>
            <param name="type">Enum Type</param>
            <param name="name">Enum numeric value.</param>
            <param name="attr"><see cref="T:MFiles.VAF.Configuration.JsonConfEditorAttribute"/></param>
            <returns>Enum Name or Label.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.MergeDynamics(System.Collections.Generic.IDictionary{System.String,System.Object},MFiles.VAF.Configuration.IJsonConfEditorAttr,System.Boolean)">
            <summary>
            Adds the values returned from <see cref="T:MFiles.VAF.Configuration.IJsonConfEditorAttr"/>.GetOptions() to the provided targetDynamic.
            </summary>
            <param name="targetDynamic">Dynamic to populate with additional values.</param>
            <param name="newValueSource"><see cref="T:MFiles.VAF.Configuration.IJsonConfEditorAttr"/> from which to resolve the new values, via GetOptions()</param>
            <param name="overwriteExisting">When true, existing values will be overwritten if new values of the same key are encountered.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.GenerateTypeEditor(System.Type)">
            <summary>
            Creates a JSON editor definition for a specific type.
            </summary>
            <param name="type">The type to create the editor for</param>
            <returns>Type name and editor definition.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.CanGenerateMember(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Checks whether the attributes block or allow the generation of member.
            </summary>
            <param name="memberInfo">Member info.</param>
            <param name="attributes">List of all attributes.</param>
            <returns>True for allowing.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.GenerateMemberDefinition(System.String,System.Type,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Generates a member definition for a type's member.
            </summary>
            <param name="name">The name of the member.</param>
            <param name="type">The type of the member.</param>
            <param name="attributes">The attributes defined/relevant for the member.</param>
            <returns>A member definition.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.GetOptions(System.Object)">
            <summary>
            Gets the options for a member definintion, creating them if needed.
            </summary>
            <param name="member">The member definition.</param>
            <returns>The options object.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.GetChildOptions(System.Object)">
            <summary>
            Gets the child options for a member definintion, creating them if needed.
            </summary>
            <param name="member">The member definition.</param>
            <returns>The child options object.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.GetAttr``1(System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Utility method for getting an attribute of a certain type from a list of attributes.
            </summary>
            <typeparam name="T">The type of attribute to fetch.</typeparam>
            <param name="attrs">The list of attributes to search in.</param>
            <returns>The first attribute found that matches the type or null.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.GetChildTemplate(System.Type,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Creates a child template for a member with a generic list-like type.
            If there are nested generic list-like types, the method will recurse until
            a child template with a type that isn't a generic list-list type is created.
            </summary>
            <param name="type">The child's type.</param>
            <param name="attributes">
            The attributes for generic list-like type's 
            member for which this child type template is being generated.
            </param>
            <returns>The generated child template object.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.ResolveEditorTypeName(System.Type,System.Collections.Generic.IEnumerable{System.Attribute},System.Type@)">
            <summary>
            Resolves the name of the JSON editor to be used for a particular type / and member (based on attributes).
            </summary>
            <param name="type">The type of the value to be edited.</param>
            <param name="attributes">Any attributes accompanying the type/member that may affect the type editor chosen.</param>
            <param name="childType">
            The name of the child type's editor that should be used if the passed type is 
            list-like (uses the "array" editor)
            </param>
            <returns>The name of the editor type.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.TryGetGenericListType(System.Type,System.Type@)">
            <summary>
            Determines if the passed type is a generic list-like type, and if 
            so set's the childType parameter to the type of objects that the list
            contains.
            
            http://stackoverflow.com/questions/906499/getting-type-t-from-ienumerablet
            </summary>
            <param name="type">The type to check if it is list-like.</param>
            <param name="childType">The type of objects this list type contains (if the type is a list-like).</param>
            <returns>True if the passed type was list-like (and the childType was set), false otherwise.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.Flags`1">
            <summary>
            Dummy generic wrapper for generating enums as flag objects.
            </summary>
            <typeparam name="TFlagsEnum">The flags enum we are generating the value editor for.</typeparam>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.BitFlag`1">
            <summary>
            Dummy generic wrapper for creating a custom bit editor (custom labels) for flag values.
            </summary>
            <typeparam name="TFlagsEnum">The flags enum we are generating the bit editor for.</typeparam>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.TryGetFlagsType(System.Type,System.Collections.Generic.IEnumerable{System.Attribute},System.Type@)">
            <summary>
            Returns a corresponding <see cref="T:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.Flags`1"/> type for the type if it
            is a valid Flags enum and has the <see cref="T:MFiles.VAF.Configuration.JsonConfFlagConverter"/>
            type set in a <see cref="T:Newtonsoft.Json.JsonConverterAttribute"/>.
            </summary>
            <param name="type">The type to get the flag type for.</param>
            <param name="attributes">The attributes on the member referencing the type.</param>
            <param name="flagType">The corresponding flagType if applicable.</param>
            <returns>True if a corresponding flagType was found, false otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.GetFlagsTypeMembers(System.Type)">
            <summary>
            Turns each flag (enum) value into an object editor's member.
            </summary>
            <param name="type">The flag type to get the members for.</param>
            <returns>The flag object members.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.GetBitFlagOptions(System.Type)">
            <summary>
            Generates custom bit flag options for a flag's bit editor.
            </summary>
            <param name="type">The enum type wrapped in <see cref="T:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.BitFlag`1"/></param>
            <remarks>
            Expects the wrapped enum type to be decorated with the <see cref="T:System.FlagsAttribute"/>
            and <see cref="T:MFiles.VAF.Configuration.JsonConfBitFlagLabelsAttribute"/>.
            </remarks>
            <returns>The custom options.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.GetLocalizedString(System.String,System.String)">
            <summary>
            Detects if a string value is specified as a resource id,
            and if so, and a <see cref="P:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator.ResourceManager"/> is defined,
            returns the resource value.
            If the value starts with "$$" the remaining portion of the 
            string is used as the resource id.
            If the value starts with "$$$" the remaining portion of the
            string is appended to the resourceIdPrefix value, and then
            used as the resource id.
            If a ResourceManager isn't available, the original value will
            always be returned.
            If a ResourceManager is available and the value starts with "$$"
            and but no resource exists with the id, then null or an empty string
            is returned.
            </summary>
            <param name="value">The raw value.</param>
            <param name="resourceIdPrefix">The resource prefix value.</param>
            <returns>String value.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonEditor.Schema">
            <summary>
            Represents a JSON editor schema definition.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonEditor.Schema.Type">
            <summary>
            The name of the editor to assign to types loaded with this schema.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonEditor.Schema.Options">
            <summary>
            Options to be assigned to the top level item loaded with this schema.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonEditor.Schema.Editors">
            <summary>
            The editors defined by this schema.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonEditor.Schema.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonEditor.Schema.ToJson">
            <summary>
            Serializes the internal schema structure into a JSON string.
            </summary>
            <returns>The serialized JSON schema.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.ValueOptionsAttribute">
            <summary>
            Decorate properties that will be exposed to the MFAdmin's
            JSON configuration editor with the options editor to control
            which options are available for it.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.ValueOptionsAttribute.Type">
            <summary>
            The provider this attribute will delegate to.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValueOptionsAttribute.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="type">
            The type to create that provides the options.
            The type must have a default constructor and must also implement
            <see cref="T:MFiles.VAF.Configuration.JsonEditor.IStableValueOptionsProvider"/>.
            </param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValueOptionsAttribute.GetOptions(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Resolves options to display in the options editor.
            </summary>
            <param name="context">The context for which the objects are shown.</param>
            <returns>Options to display in the options editor.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.ResourceMarker">
            <summary>
            Static helper values and methods for working with resources
            associated with the <see cref="T:MFiles.VAF.Configuration.JsonEditor.SchemaGenerator"/>.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ResourceMarker.Id">
            <summary>
            If a string starts with this value, it will be treated as a resource id.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ResourceMarker.Suffix">
            <summary>
            If a string starts with this value, it will be treated end of a resource id.
            A ResourceIdPrefix value will be prepended to the value to get the resource id.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.ResourceMarker.ResolveText(System.String,System.String,System.Resources.ResourceManager)">
            <summary>
            Detects if a string value is specified as a resource id,
            and if so, and a <see cref="T:System.Resources.ResourceManager"/> is defined,
            returns the resource value.
            If the value starts with "$$" the remaining portion of the 
            string is used as the resource id.
            If the value starts with "$$$" the remaining portion of the
            string is appended to the resourceIdPrefix value, and then
            used as the resource id.
            If a ResourceManager isn't available, the original value will
            always be returned.
            If a ResourceManager is available and the value starts with "$$"
            and but no resource exists with the id, then null or an empty string
            is returned.
            </summary>
            <param name="value">The raw string value which may be a literal or may refer to a resource.</param>
            <param name="prefix">The resource prefix value.</param>
            <param name="resources">Manager that resources can be resolved from.</param>
            <returns>String value.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.ResourceMarker.GetResourceId(System.String,System.String)">
            <summary>
            Gets a values resource id, if it contains a marker.
            </summary>
            <param name="value">A raw string value which may be a literal or may refer to a resource.</param>
            <param name="prefix">The resource prefix value.</param>
            <returns>A resource id if available, otherwise null.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.ResourceMarker.IsResourceId(System.String)">
            <summary>
            Indicates whether a string has a marker indicating it is a resource.
            </summary>
            <param name="s">The string to check.</param>
            <returns>True if the string is marked.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.ResourceMarker.IsResourceSuffix(System.String)">
            <summary>
            Indicates whether a string has a marker indicating it is a resource suffix.
            </summary>
            <param name="s">The string to check.</param>
            <returns>True if the string is marked.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonConfEditorAttribute">
            <summary>
            Defines extra information for type and member declarations for
            use in the json configuration editor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonConfEditorAttribute.HasAttr(System.Dynamic.ExpandoObject,System.String)">
            <summary>
            Allows for simple checking of a key within the options expando objects.
            </summary>
            <param name="expando"><see cref="T:System.Dynamic.ExpandoObject"/> to check.</param>
            <param name="key">Key to check for.</param>
            <returns>True / False</returns>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.TypeEditor">
            <summary>
            The name of the default/custom type editor that should be used for this value.
            
            If not specified the system will choose the editor based on the type, and may
            generate an editor dynamically.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.ExtendsEditor">
            <summary>
            The name of the type editor that should be extended for this value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.ChildTypeEditor">
            <summary>
            The name of the default/custom type editor that should be used for this value's children.
            
            If this value is set, and TypeEditor isn't, the "array" will be assumed as the TypeEditor.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.ChildName">
            <summary>
            The generic name for the children of this type.
            If not specified, the un-namespaced child type editor name is used.
            Controls the default label for children (e.g. "{ChildName} [1]") 
            and the add new button (e.g. "Add new {ChildName}").
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.Label">
            <summary>
            The human readable name to show for this value.
            If not specified, the member or type name will be shown.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.NameMember">
            <summary>
            The member whose value can be used as a unique name for an instance of the type.
            Useful when displaying objects in a list (array).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.ValueMember">
            <summary>
            If a simple value can be directly cast to this type,
            this is the member of the type that the value will be set to.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.DefaultValue">
            <summary>
            The default value for this type/member.
            Only works for simple values.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.HelpText">
            <summary>
            A short text for the member or type so users understand it's purpose, how/when to use it, etc...
            May be displayed as a tool tip or in other context specific places.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.HelpTextResourceId">
            <summary>
            Same as the help text but a localizable resource id instead of hard coded text. Both can be
            specified but the resource based text is used in the first place.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.ResourceIdPrefix">
            <summary>
            Prefix that can be pre-pended to resource id strings in localizable string properties.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.DocReference">
            <summary>
            A short text for the member or type so users understand it's purpose, how/when to use it, etc...
            May be displayed as a tool tip or in other context specific places. 
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.UsesAdapter">
            <summary>
            Used in conjunction with an editor that is tagged as "IsAdapter = True".
            Members where the UsesAdapter = True / The items editor has IsAdapter = True
            are piped through the adapter for updates.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.Hidden">
            <summary>
            Used to prevent a value/key from appearing in the editor. If specified on an object (complex type),
            none of it's children will be visible.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.HideWhen">
            <summary>
            Visibility condition. Via JSPath.
            When true, the value is hidden in the Editor.
            
            Example:
            HideWhen = ".SiblingProperty == 'Test' "
            HideWhen = ".SiblingProperty{.NestedProperty == 'Test'} "
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.ShowWhen">
            <summary>
            Visibility condition. Via JSPath.
            When true, the value is shown in the Editor.
            
            Example:
            ShowWhen = ".SiblingProperty == 'Test' "
            ShowWhen = ".SiblingProperty{.NestedProperty == 'Test'} "
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.Options">
            <summary>
            Additional options to pass to the editor. Specified in json.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.ClearOnCopy">
            <summary>
            When true, the value of this field is clear when creating a copying of the item in the editor.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.RegExMask">
            <summary>
            When provided, the regular expression mask will be enforced as a validation requirement.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.IsRequired">
            <summary>
            Validation option. If this is set to true, and no value is specified, a validation
            message will be shown to the user.
            </summary>
            <remarks>
            This should be preferred almost always over DataMember::IsRequired = true, 
            as that will cause deserialization to fail if the value is not specified.
            </remarks>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.ForceLeafBehavior">
            <summary>
            If set to true, forces an item in the configurators navigation tree (not the grid)
            to be rendered as a leaf node, preventing the items children from being shown
            in the tree. This option has no effect on an item
            that would already classify as a leaf.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.ForceChildLeafBehavior">
            <summary>
            If set to true, forces the child items of an array  in the configurators navigation tree (not the grid)
            to be rendered as a leaf node, preventing their children from being shown
            in the tree. This option has no effect on an item
            that would already classify as a leaf.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.Commentable">
            <summary>
            Indicates whether the item can be commented.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfEditorAttribute.UseNonPublicMembers">
            <summary>
            
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonConfEditorAttribute.#ctor">
            <summary>
            Constructor with default values.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonConfEditorAttribute.HasOptions">
            <summary>
            Determines if this attribute defines custom options.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonConfEditorAttribute.GetOptions">
            <summary>
            Gets the custom options defined by this attribute.
            </summary>
            <returns>Dynamic expando object</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonConfFlagConverter">
            <summary>
            Serializes / Deserializes a flags based enum type between the flag value and a
            json object with a boolean property for each flag (true if the flags is set).
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonConfFlagConverter.CanConvert(System.Type)">
            <summary>
            Determines if the converted can convert a certain type.
            </summary>
            <param name="objectType">The type that may be convert-able.</param>
            <returns>True if the type can be converted by this converter, false otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonConfFlagConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Converts various json types to a valid flags type.
            </summary>
            <param name="reader">Json Reader.</param>
            <param name="objectType">Flag type we need to read.</param>
            <param name="existingValue">The existing flag value where we are deserializing to (not applicable).</param>
            <param name="serializer">Json serializer.</param>
            <returns>Flag value.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonConfFlagConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes a flag value to a json value.
            </summary>
            <param name="writer">Json writer.</param>
            <param name="value">The value to serialize.</param>
            <param name="serializer">Json Serializer.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonConfFlagConverter.ConvertFlags(System.Type,System.Int32)">
            <summary>
            Converts a numeric flags value to a corresponding flag object.
            </summary>
            <param name="flagType">The flags (enum) type.</param>
            <param name="flags">The flags value.</param>
            <returns>Corresponding flag object.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonConfFlagConverter.ConvertFlagObject(System.Type,Newtonsoft.Json.Linq.JObject,System.Int32)">
            <summary>
            Converts a flag object to a corresponding numeric flags value.
            </summary>
            <param name="flagType">The flags (enum) type.</param>
            <param name="flagObj">The flag object to convert.</param>
            <param name="initialValue">
            	The initial value of the flags.
            	Indicates default flag settings to use if no explicit
            	flag value is set in the object.
            </param>
            <returns>Corresponding flags value.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonConfFlagConverter.ConvertFlagObject``1(Newtonsoft.Json.Linq.JObject,System.Int32)">
            <summary>
            Converts a flag object to a corresponding numeric flags value.
            </summary>
            <typeparam name="TFlags">The flags (enum) type.</typeparam>
            <param name="flagObj">The flag object to convert.</param>
            <param name="initialValue">
            	The initial value of the flags.
            	Indicates default flag settings to use if no explicit
            	flag value is set in the object.
            </param>
            <returns>Corresponding flags value.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonConfFlagConverter.GetFlagPropertyName(System.Type,System.String)">
            <summary>
            Gets the json property name for a flag.
            </summary>
            <param name="enumType">The enum type that defines the flag.</param>
            <param name="flagName">The name of the flag.</param>
            <returns>The json property name to use for the flag.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonConfFloatEditorAttribute">
            <summary>
            Controls how a float-compatible will be displayed and edited in the JSON Configuration GUI.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfFloatEditorAttribute.Min">
            <summary>
            Indicates the minimum value to allow in the editor.
            Defaults to Double.NegativeInfinity which passes undefined (no min) to the schema. 
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfFloatEditorAttribute.Max">
            <summary>
            Indicates the maximum value to allow in the editor.
            Defaults to Double.PositiveInfinity which passes undefined (no max) to the schema. 
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfFloatEditorAttribute.MinPrecision">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfFloatEditorAttribute.MaxPrecision">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfFloatEditorAttribute.Step">
            <summary>
            Indicates the amount by which a value is increased or decreased in the editor.
            (When clicking up and down arrows/icons.)
            Defaults to zero, meaning no step specified.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonConfFloatEditorAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonConfFloatEditorAttribute.HasOptions">
            <summary>
            Determines if this attribute defines custom options.
            </summary>
            <returns>True, when the item has options specified.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonConfFloatEditorAttribute.GetOptions">
            <summary>
            Gets the custom options defined by this attribute.
            </summary>
            <returns>Dynamic expando object</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonConfIntegerEditorAttribute">
            <summary>
            Controls how an integer-compatible item will be displayed and edited in the JSON Configuration GUI.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfIntegerEditorAttribute.Min">
            <summary>
            Indicates the minimum value to allow in the editor.
            Defaults to int.MinValue which passes undefined (no min) to the schema. 
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfIntegerEditorAttribute.Max">
            <summary>
            Indicates the maximum value to allow in the editor.
            Defaults to int.MaxValue which passes undefined (no max) to the schema. 
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfIntegerEditorAttribute.Step">
            <summary>
            Indicates the amount by which a value is increased or decreased in the editor.
            (When clicking up and down arrows/icons.)
            Defaults to zero, meaning no step specified.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonConfIntegerEditorAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonConfIntegerEditorAttribute.HasOptions">
            <summary>
            Determines if this attribute defines custom options.
            </summary>
            <returns>True, when the item has options specified.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonConfIntegerEditorAttribute.GetOptions">
            <summary>
            Gets the custom options defined by this attribute.
            </summary>
            <returns>Dynamic expando object</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.Converters.ArrayToObjectConverter`1">
            <summary>
            Converts an array to an object, by mapping each array item to a
            correspondingly ordered data member.
            </summary>
            <typeparam name="TObject">The type of object being created from the array.</typeparam>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.ArrayToObjectConverter`1.ConvertValue(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Converts an array to an object, by mapping each array item to a
            correspondingly ordered data member.
            </summary>
            <param name="sourceValue">The original source value being mapped.</param>
            <param name="targetValue">The target value that the source value has been mapped to.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.ArrayToObjectConverter`1.Invert">
            <summary>
            Provides a reverse converter, for mapping values in the opposite direction.
            </summary>
            <returns>A reverse converter instance.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.Converters.EnumNameToValueConverter`1">
            <summary>
            Converts an enum name into the enum value.
            </summary>
            <typeparam name="TObject">The enum type to convert.</typeparam>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.EnumNameToValueConverter`1.ConvertValue(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Converts an enum name into the enum value.
            </summary>
            <param name="sourceValue">The original source value being mapped.</param>
            <param name="targetValue">The target value that the source value has been mapped to.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.EnumNameToValueConverter`1.Invert">
            <summary>
            Provides a reverse converter, for mapping values in the opposite direction.
            </summary>
            <returns>A reverse converter instance.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.Converters.EnumValueToNameConverter`1">
            <summary>
            Converts an enum value into the enum name.
            </summary>
            <typeparam name="TObject">The enum type to convert.</typeparam>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.EnumValueToNameConverter`1.ConvertValue(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Converts an enum name into the enum value.
            </summary>
            <param name="sourceValue">The original source value being mapped.</param>
            <param name="targetValue">The target value that the source value has been mapped to.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.EnumValueToNameConverter`1.Invert">
            <summary>
            Provides a reverse converter, for mapping values in the opposite direction.
            </summary>
            <returns>A reverse converter instance.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.Converters.FlagsToFlagObjectConverter`1">
            <summary>
            Converts a Flags (integer) value into a flag object.
            </summary>
            <typeparam name="TFlags">
            	The type of flags being converted.
            	Must be an <see cref="T:System.Enum"/> decorated with the <see cref="T:System.FlagsAttribute"/>. 
            </typeparam>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.Converters.FlagsToFlagObjectConverter`1.InitialValue">
            <summary>
            Initial value for the flags that the flag object augments.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.FlagsToFlagObjectConverter`1.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="initialValue">Initial value.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.FlagsToFlagObjectConverter`1.ConvertValue(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Converts a Flags (integer) value into a flag object.
            </summary>
            <param name="sourceValue">The original source value being mapped.</param>
            <param name="targetValue">The target value that the source value has been mapped to.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.FlagsToFlagObjectConverter`1.Invert">
            <summary>
            Provides a reverse converter, for mapping values in the opposite direction.
            </summary>
            <returns>A corresponding <see cref="T:MFiles.VAF.Configuration.JsonMapping.Converters.FlagObjectToFlagsConverter`1"/> instance.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.Converters.FlagObjectToFlagsConverter`1">
            <summary>
            Converts flag object in a Flags (integer) value.
            </summary>
            <typeparam name="TFlags">
            	The type of flags being converted.
            	Must be an <see cref="T:System.Enum"/> decorated with the <see cref="T:System.FlagsAttribute"/>. 
            </typeparam>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.Converters.FlagObjectToFlagsConverter`1.InitialValue">
            <summary>
            Initial value for the flags that the flag object augments.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.FlagObjectToFlagsConverter`1.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="initialValue">Initial value.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.FlagObjectToFlagsConverter`1.ConvertValue(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Converts flag object in a Flags (integer) value.
            </summary>
            <param name="sourceValue">The original source value being mapped.</param>
            <param name="targetValue">The target value that the source value has been mapped to.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.FlagObjectToFlagsConverter`1.Invert">
            <summary>
            Provides a reverse converter, for mapping values in the opposite direction.
            </summary>
            <returns>A corresponding <see cref="T:MFiles.VAF.Configuration.JsonMapping.Converters.FlagsToFlagObjectConverter`1"/> instance.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.Converters.ObjectToArrayConverter`1">
            <summary>
            Converts an object to an array, by mapping each data member
            property in order to an array structure.
            </summary>
            <typeparam name="TObject">The type of object being converted to an array.</typeparam>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.ObjectToArrayConverter`1.ConvertValue(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Converts an object to an array, by mapping each data member
            property in order to an array structure.
            </summary>
            <param name="sourceValue">The original source value being mapped.</param>
            <param name="targetValue">The target value that the source value has been mapped to.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.ObjectToArrayConverter`1.Invert">
            <summary>
            Provides a reverse converter, for mapping values in the opposite direction.
            </summary>
            <returns>A reverse converter instance.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.Converters.IDToMFIdentiferConverter">
            <summary>
            Converts an structure element ID value in a source JSON structure to an
            MFIdentifier in a target JSON structure.
            If the source JSON contains a ghost property that contains the original
            references for the structure elements, the reference will be used instead
            of the id.
            The ghost property will be named using the name of the property that contains
            the id value, followed by "-OriginalReferences". Typically the ghost properties
            are generated by this convert's companion: <see cref="T:MFiles.VAF.Configuration.JsonMapping.Converters.MFIdentiferToIDConverter"/>.
            
            For example:
            {
              classID: &lt;id&gt;
              classID-OriginalReferences: &lt;reference&gt;
            }
            
            or 
            
            {
              classIDs: [ &lt;id1&gt;, &lt;id2&gt;, &lt;id3&gt;]
              classID-OriginalReferences:: [ &lt;reference1&gt;, &lt;reference2&gt;, &lt;reference3&gt;]
            }
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.Converters.IDToMFIdentiferConverter.Resolver">
            <summary>
            Used to resolve id's from references.
            Not technically used for resolution here, but to generate an inverse converter.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.Converters.IDToMFIdentiferConverter.Type">
            <summary>
            The type of structure element being IDed/Referenced.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.Converters.IDToMFIdentiferConverter.WriteIdAsString">
            <summary>
            Indicates whether we id values were written as strings instead of integers.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.IDToMFIdentiferConverter.#ctor(MFilesAPI.Vault,System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="vault">Vault which references should be resolved from.</param>
            <param name="type">The type of structure element being IDed/Referenced.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.IDToMFIdentiferConverter.#ctor(MFiles.VAF.Configuration.JsonMapping.IMFIdentiferResolver,System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="resolver">Used to resolve id's from references.</param>
            <param name="type">The type of structure element being IDed/Referenced.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.IDToMFIdentiferConverter.ConvertValue(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Copies a reference value from the source to the target value if one is available,
            replacing the raw ID value.
            </summary>
            <param name="sourceValue">The original source value being mapped.</param>
            <param name="targetValue">The target value that the source value has been mapped to.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.IDToMFIdentiferConverter.Invert">
            <summary>
            Provides a reverse converter, for mapping values in the opposite direction.
            </summary>
            <returns>A corresponding <see cref="T:MFiles.VAF.Configuration.JsonMapping.Converters.MFIdentiferToIDConverter"/> instance.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.Converters.MFIdentiferToIDConverter">
            <summary>
            Converts an structure element reference value in a source JSON structure to an
            explicit ID in a target JSON structure.
            A ghost property will be added to the target JSON structure to preserve the
            original references used for the item.
            The ghost property will be named using the name of the property that contains
            the id value, followed by "-OriginalReferences". Typically the ghost properties
            can be converted back to references by the <see cref="T:MFiles.VAF.Configuration.JsonMapping.Converters.IDToMFIdentiferConverter"/>.
            
            For example the source json:
            {
              ObjType: "ObjType1",
              Classes: [ "Class1", "Class2" ]
            }
            
            might get converted to a target like so:
            
            {
              objTypeID: 110,
              objTypeID-OriginalReferences: "ObjType1",
              classIDs: [ 2, 4 ],
              classIDs-OriginalReferences: [ "Class1", "Class2" ]
            }
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.Converters.MFIdentiferToIDConverter.Resolver">
            <summary>
            Used to resolve id's from references.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.Converters.MFIdentiferToIDConverter.Type">
            <summary>
            The type of structure element being IDed/Referenced.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.Converters.MFIdentiferToIDConverter.WriteIdAsString">
            <summary>
            Indicates whether we should write the id values as strings instead of integers.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.MFIdentiferToIDConverter.#ctor(MFilesAPI.Vault,System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="vault">Vault which references should be resolved from.</param>
            <param name="type">The type of structure element being IDed/Referenced.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.MFIdentiferToIDConverter.#ctor(MFiles.VAF.Configuration.JsonMapping.IMFIdentiferResolver,System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="resolver">Used to resolve id's from references.</param>
            <param name="type">The type of structure element being IDed/Referenced.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.MFIdentiferToIDConverter.ConvertValue(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Ensures that any non-numeric source values are resolved to an explicit
            id in the target value.  Additionally a ghost value may be added to the
            target value's parent object to retain the original reference.
            </summary>
            <param name="sourceValue">The value in the source JSON being mapped.</param>
            <param name="targetValue">The mapped value in the target JSON.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.MFIdentiferToIDConverter.GetIdValue(System.Int32)">
            <summary>
            Gets a JSON compatible value from the id.
            </summary>
            <param name="id">Structure reference id.</param>
            <returns>JSON compatible value.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Converters.MFIdentiferToIDConverter.Invert">
            <summary>
            Provides a reverse converter, for mapping values in the opposite direction.
            </summary>
            <returns>A corresponding <see cref="T:MFiles.VAF.Configuration.JsonMapping.Converters.IDToMFIdentiferConverter"/> instance.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.JObjectHelper">
            <summary>
            Utility methods for working with JObjects, JArrays and JsPath.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JObjectHelper.SetValue(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Sets a value in a target JSON structure at the specified path.
            </summary>
            <param name="target">The structure to set the value in.</param>
            <param name="targetPath">The path in the target structure where the value should be set.</param>
            <param name="value">The value to set.</param>
            <returns>The JSON property or array item that was set.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JObjectHelper.TryGetArrayIndex(System.String,System.String@,System.Int32@)">
            <summary>
            Attempts to extract an array index value from a json path segment.
            </summary>
            <param name="pathPart">The json path segment to extract the array index from.</param>
            <param name="propName">Receives the property name portion of the json path segment.</param>
            <param name="index">Receives teh array index of the json path segment if found, -1 otherwise.</param>
            <returns>True if an index value was found.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JObjectHelper.EnsureArrayExists(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Returns a reference to an array object at the specified
            property within an object. Creating the array if the 
            property is not yet set.
            Throws an exception if a non-array value already exists at the property.
            </summary>
            <param name="jObj">The object that should contain a property with an array.</param>
            <param name="propName">The name of the property where the array should exist.</param>
            <returns>A reference to the property's array value.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JObjectHelper.EnsureObjectExists(Newtonsoft.Json.Linq.JArray,System.Int32)">
            <summary>
            Returns a reference to an object at the specified
            index within an array. Creating an object at the specified location
            if one doesn't already exist there.
            Throws an exception if a non-object value already exists at the index.
            </summary>
            <param name="jArr">The array that should contain an item with an object.</param>
            <param name="index">The location in the array where an object should exist.</param>
            <returns>A reference to the property's object value.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JObjectHelper.EnsureObjectExists(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Returns a reference to an object at the specified
            property within another object. Creating the object if the 
            property is not yet set.
            Throws an exception if a non-object value already exists at the property.
            </summary>
            <param name="jObj">The object that should contain a property with an object.</param>
            <param name="propName">The name of the property where the object should exist.</param>
            <returns>A reference to the property's object value.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JObjectHelper.SetArrayItem(Newtonsoft.Json.Linq.JArray,System.Int32,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Sets a value at a certain index in an array.
            </summary>
            <param name="jArr">The array to place the value in.</param>
            <param name="index">
                The index at which to place the array.
                Negative values will simply add an item at the end.
                Additional null values will be added for every index between jArr.Count and index.
            </param>
            <param name="value">The value to set.</param>
            <returns>The token of the value set at the index.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JObjectHelper.TryFindOriginalValue(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken@,System.String)">
            <summary>
            Retrieves an original value that may have been set in a source structure for converted
            values that might lose some information.
            Typically the original value would have been saved with the 
            <see cref="M:MFiles.VAF.Configuration.JsonMapping.JObjectHelper.SetOriginalValue(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken,System.String)"/> method.
            </summary>
            <param name="sourceValue">
                 The source value that may have a corresponding original value.
            </param>
            <param name="origValue">Receives the original value if found.</param>
            <param name="suffix">The suffix that was used to store the original value.</param>
            <returns>True if the original value was found, false otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JObjectHelper.SetOriginalValue(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken,System.String)">
            <summary>
            Sets the original (source) value in a location corresponding to the
            targetValue location in the target structure.
            This allows for the original value to be preserved when reverting back
            to the original format for conversions that lose information.
            </summary>
            <param name="targetValue">
                 The target value that holds a converted value that can't be
                 converted back without losing some information.
            </param>
            <param name="origValue">The original value to also store in the target structure.</param>
            <param name="suffix">The suffix to use when creating a property name to store the original value.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JObjectHelper.ReplaceValue(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Replaces a value in a JSON structure with another value.
            </summary>
            <param name="curValue">The current value in the JSON structure.</param>
            <param name="newValue">The new value to set at the same location in the JSON structure.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.JsonAdminCommentPreserver">
            <summary>
            Utility methods for extracting mfadmin-compatible comments and 
            preserving them and restoring them inside json structures.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonAdminCommentPreserver.GetAdminComments(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Extracts mfadmin-compatible comments from a json structure.
            </summary>
            <param name="source">The json structure that may contain comments.</param>
            <returns>List of comments found (and their locations).</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonAdminCommentPreserver.GetPreservedComments(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Extracts a list of comments preserved in a non-mfadmin-compatible json structure.
            </summary>
            <param name="source">The json to extract the comments from.</param>
            <param name="commentsPath">The custom path where comments would have been saved.</param>
            <returns>List of preserved comments.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonAdminCommentPreserver.PreserveComments(Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Preserves the MFAdmin-compatible comments in the source JSON structure
            under a single property in the target structure.
            </summary>
            <param name="source">The source JSON structure (that may contain MFAdmin-compatible comments).</param>
            <param name="target">The target JSON structure.</param>
            <param name="commentsPath">The path to where the comments should stored in the JSON structure.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonAdminCommentPreserver.PreserveComments(System.Collections.Generic.IEnumerable{MFiles.VAF.Configuration.JsonMapping.JsonAdminComment},Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Preserves the MFAdmin-compatible comments in the source JSON structure
            under a single property in the target structure.
            </summary>
            <param name="comments">The comments to preserve.</param>
            <param name="target">The target JSON structure.</param>
            <param name="commentsPath">The path to where the comments should stored in the JSON structure.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonAdminCommentPreserver.RestoreComments(Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Restores the MFAdmin-compatible comments into the target JSON structure
            from preserved comments in the source JSON structure..
            </summary>
            <param name="source">The source JSON structure that may contain preserved comments.</param>
            <param name="target">The target JSON structure (that can contain MFAdmin-compatible comments).</param>
            <param name="commentPath">The path to where the comments would have been stored in the source JSON.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonAdminCommentPreserver.RestoreComments(System.Collections.Generic.IEnumerable{MFiles.VAF.Configuration.JsonMapping.JsonAdminComment},Newtonsoft.Json.Linq.JObject)">
            <summary>
            Restores the MFAdmin-compatible comments into the target JSON structure
            from preserved comments in the source JSON structure..
            </summary>
            <param name="comments">The comments to restore.</param>
            <param name="target">The target JSON structure (that can contain MFAdmin-compatible comments).</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.JsonAdminComment">
            <summary>
            Represents the location of an MFAdmin-compatible comment in 
            a source JSON structure.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.JsonAdminComment.Path">
            <summary>
            The JSPath where the comment was found in the source JSON.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.JsonAdminComment.Comment">
            <summary>
             A comment in the source JSON.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.DataMemberInfo">
            <summary>
            Represents a serializable instance field or property on a class
            within a serializable class hierarchy structure.
            The field or property must be decorated with a <see cref="T:System.Runtime.Serialization.DataMemberAttribute"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.DataMemberInfo.MemberInfo">
            <summary>
            The reflected information about the field or property that
            is represented by this object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.DataMemberInfo.DataMemberAttr">
            <summary>
            The <see cref="T:System.Runtime.Serialization.DataMemberAttribute"/> decorating this member.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.DataMemberInfo.Type">
            <summary>
            The type of value the data member holds.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.DataMemberInfo.UnderlyingType">
            <summary>
            The underlying type of value that the data member, disregarding
            any generic list or nullable wrappers.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.DataMemberInfo.IsNullable">
            <summary>
            Indicates whether the data member's type is nullable.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.DataMemberInfo.IsList">
            <summary>
            Indicates whether the data member contains a list of items.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.DataMemberInfo.Name">
            <summary>
            The name of the data member.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.DataMemberInfo.Parent">
            <summary>
            The parent data member within a class hierarchy.
            I.E. The data member whose type pointed to this data member's
            declaring type.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.DataMemberInfo.#ctor(System.Reflection.MemberInfo,System.Runtime.Serialization.DataMemberAttribute,MFiles.VAF.Configuration.JsonMapping.DataMemberInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="memberInfo">The information about the field or property from reflection.</param>
            <param name="dataMemberAttr">The data member attribute decorating the field or property.</param>
            <param name="parent">The parent data member whose type is this data member's declaring type.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.DataMemberInfo.GetDataMembers(System.Type,MFiles.VAF.Configuration.JsonMapping.DataMemberInfo)">
            <summary>
            Resolves all the data members defined in a class type.
            </summary>
            <param name="type">The type of class to get the data members of.</param>
            <param name="parent">Optional parent data-member to set on all the data members.</param>
            <returns>Data members defined in the type.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.DataMemberInfo.ExtractTypeInfo">
            <summary>
            Extracts information about the data member's type.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.DataMemberInfo.ExtractTypeUnderlyingNullable">
            <summary>
            Extracts the underlying type of this data-member if it's type is nullable.
            </summary>
            <returns>The underlying type if the data member type is nullable, null otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.DataMemberInfo.ExtractTypeUnderlyingEnumerable">
            <summary>
            Extracts the underlying item type of this data-member if it's type is list of items.
            </summary>
            <returns>The underlying type if the data member type is a list, null otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.DataMemberInfo.GetAttributes``1">
            <summary>
            Helper method for accessing the data member's attributes.
            </summary>
            <typeparam name="T">The type of attributes to get.</typeparam>
            <returns>A list of found attributes.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.DataMemberInfo.GetAttribute``1">
            <summary>
            Helper method for accessing the data member's attribute.
            </summary>
            <typeparam name="T">The type of attribute to get.</typeparam>
            <returns>The attribute if found, null otherwise.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.WalkerControl">
            <summary>
            Object to control the behavior of a walker.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.WalkerControl.Skip">
            <summary>
            Skips the walking down the current path.
            (Moves on to next sibling).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.WalkerControl.Cancel">
            <summary>
            Cancels the walking operation.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.JsonConfDataMemberWalkerCallback">
            <summary>
            Callback to be triggered for each data-member traversed
            by the <see cref="T:MFiles.VAF.Configuration.JsonMapping.DataMemberWalker"/>.
            </summary>
            <param name="dataMember">Current data member being walked.</param>
            <param name="walkerControl">Control interface for the walker.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.DataMemberWalker">
            <summary>
            Traverses all <see cref="T:System.Runtime.Serialization.DataMemberAttribute"/> decorated
            fields and properties in a class/member hierarchy.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.DataMemberWalker.Walk(MFiles.VAF.Configuration.JsonMapping.DataMemberInfo,MFiles.VAF.Configuration.JsonMapping.JsonConfDataMemberWalkerCallback)">
            <summary>
            Walks over the data-member structure in the 
            parent data-member's type. Executing the callback
            for each encountered.
            </summary>
            <param name="parent">The parent data-member to traverse.</param>
            <param name="callback">The callback to trigger for each data-member encountered.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.DataMemberWalker.Walk(System.Type,MFiles.VAF.Configuration.JsonMapping.JsonConfDataMemberWalkerCallback)">
            <summary>
            Walks over the data-member structure in the 
            provided type. Executing the callback for each encountered.
            </summary>
            <param name="type">The type to traverse the data-members of.</param>
            <param name="callback">The callback to trigger for each data-member encountered.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.DataMemberWalker.WalkRecurse(System.Type,MFiles.VAF.Configuration.JsonMapping.DataMemberInfo,MFiles.VAF.Configuration.JsonMapping.JsonConfDataMemberWalkerCallback,MFiles.VAF.Configuration.JsonMapping.WalkerControl)">
            <summary>
            Recursively walks over the data-members in a class type and the
            the classes referred to by those data-members. 
            </summary>
            <param name="type">The class type to traverse the data-members of.</param>
            <param name="parent">The parent data-member that referenced the type.</param>
            <param name="callback">The callback to trigger for each data-member encountered.</param>
            <param name="control">
              The walker control object, allowing paths to be skipped 
              and the operation to be canceled.
            </param>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.IJsonValueConverter">
            <summary>
            Interface for an object that can convert a JSON value
            being mapped from a source JSON structure to a target
            JSON structure.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.IJsonValueConverter.ConvertValue(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Converts a source value that has been mapped into 
            a target value to the correct value type.
            </summary>
            <param name="sourceValue">The source structure value being mapped.</param>
            <param name="targetValue">The source value mapped into the target structure.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.IJsonValueConverter.Invert">
            <summary>
            Provides an inverted converter that can be used to map values in the opposite direction.
            </summary>
            <returns>An inverted converter.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.IMFIdentiferResolver">
            <summary>
            Simple interface for resolving structure element id's from
            MFIdentifiers.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.IMFIdentiferResolver.Resolve(System.Type,MFiles.VAF.Configuration.MFIdentifier)">
            <summary>
            Resolves the ID of an MFIdentifier.
            </summary>
            <param name="structureType">The type of structure the identifier is for.</param>
            <param name="identifer">The identifier to resolve.</param>
            <returns>The id if found, -1 otherwise.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.JsonListMappingMode">
            <summary>
            Modes determining how the source path is determined for
            to list based data members.
            Essentially determines if the source path should end in
            "[*]" or not.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonMapping.JsonListMappingMode.Auto">
            <summary>
            The mode is automatically determined based on
            whether the number of variable array indexes 
            in the source and target paths match.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonMapping.JsonListMappingMode.List">
            <summary>
            Source path should resolve to the list.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonMapping.JsonListMappingMode.Items">
            <summary>
            Source path should resolve to the list's items.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.JsonMap">
            <summary>
            Defines a set of <see cref="T:MFiles.VAF.Configuration.JsonMapping.JsonValueMapping"/>s that are used to
            map values in a source JSON structure to values in a target JSON
            structure.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonMap.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Constructor.
            </summary>
            <param name="mappings"></param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonMap.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonMap.CreateReverseMap">
            <summary>
            Creates an inverted map that will map values from
            the target JSON structure, back to the source JSON structure.
            </summary>
            <returns>A map with inverse mappings.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonMap.ConvertSource(System.String,System.String)">
            <summary>
            Converts a source json string to a target json string using the
            mappings defined in this object.
            </summary>
            <param name="sourceJson">JSON string in the source format.</param>
            <param name="targetJson">JSON string of the target format to map values into. </param>
            <returns>Converted json string.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonMap.MapAllValues(Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Maps all values referenced by this map from a source JSON structure 
            into a target JSON structure.
            </summary>
            <param name="source">The source JSON structure to map values from.</param>
            <param name="target">The target JSON structure to map values from the source to.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonMap.MapValues(Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,MFiles.VAF.Configuration.JsonMapping.JsonValueMapping)">
            <summary>
            Maps all values referenced by a specific mapping a source 
            JSON structure into a target JSON structure.
            </summary>
            <param name="source">The source JSON structure to map values from.</param>
            <param name="target">The target JSON structure to map values from the source to.</param>
            <param name="mapping">The mapping that defines the value(s) to map.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonMap.SetPathIndexes(System.String,System.String)">
            <summary>
            Get the specific path for a target value by
            replacing any array index wild cards in the target path with
            indexes used in the source value's path.
            </summary>
            <param name="sourceValuePath">The path to a specific value being mapped.</param>
            <param name="targetPath">The generic target path defined by the mapping for the source value.</param>
            <returns>The target value path.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.JsonMapGenerator">
            <summary>
            Generates a JsonMap based on a class structure and the 
            relevant types' data members.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.JsonMapGenerator.CustomMappers">
            <summary>
            Custom mappers to use while generating the JsonMaps for a type.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonMapGenerator.Generate(System.Type,System.String)">
            <summary>
            Generates a JsonMap based on a class structure and the 
            relevant types' data members.
            </summary>
            <param name="type">The root class of the structure to create a JsonMap for.</param>
            <param name="target">The identifier of the target JSON format to make a map for.</param>
            <returns>JsonMap for the target.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonMapGenerator.GenerateMapping(MFiles.VAF.Configuration.JsonMapping.DataMemberInfo,System.String)">
            <summary>
            Generates a mapping for a data member and a specific mapping target format.
            Also adds the generated mapping to a map if one was provided.
            </summary>
            <param name="dataMember">The data member to create the mapping for.</param>
            <param name="target">The target JSON format to create the mapping for.</param>
            <returns>The mapping, if one was generated. Null otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonMapGenerator.GetMappingAttribute(MFiles.VAF.Configuration.JsonMapping.DataMemberInfo,System.String)">
            <summary>
            Gets the <see cref="T:MFiles.VAF.Configuration.JsonMapping.JsonMappingAttribute"/> of a data member for
            a specific mapping target if one exists.
            </summary>
            <param name="dataMember">The data member to get the attribute for.</param>
            <param name="target">The JSON format the attribute should target.</param>
            <returns>An applicable attribute if found, null otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonMapGenerator.GetDataMemberTargetPath(MFiles.VAF.Configuration.JsonMapping.DataMemberInfo,MFiles.VAF.Configuration.JsonMapping.JsonMappingAttribute)">
            <summary>
            Generates a JSON path to where a data members's value should be mapped to in a target format.
            </summary>
            <param name="dataMember">The data member to generate the path for.</param>
            <param name="mapAttr">
              The mapping attribute for which the path is being generated, which contains
              a reference to the target format and path.</param>
            <returns>The target json path.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonMapGenerator.GetDataMemberSourcePath(MFiles.VAF.Configuration.JsonMapping.DataMemberInfo,System.String,MFiles.VAF.Configuration.JsonMapping.JsonListMappingMode)">
            <summary>
            Generates a JSON path to where a data members's value will be deserialzed to.
            </summary>
            <param name="dataMember">The data member to generate the path for.</param>
            <param name="targetPath">Help determine the correct list mapping mode if mode = auto.</param>
            <param name="mode">Determines if the path should refer to a list-based data member's list or list items.</param>
            <returns>The source json path.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.JsonMappingAttribute">
            <summary>
            Attribute for mapping data members of a class to
            a different JSON format.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.JsonMappingAttribute.Target">
            <summary>
            The free form identifier of the json format this  attribute maps the data member in to.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.JsonMappingAttribute.Path">
            <summary>
            The location that this data members value should be
            mapped to in the target json structure.
            Paths starting with $. are absolute, otherwise they
            are relative to the data-member's declaring type's
            path or the parent data-member's path.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.JsonMappingAttribute.ListMode">
            <summary>
            Defines how the mapping is applied to list-based data members.
            Has no effect if the data-member is not list-based.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.JsonMappingAttribute.Absolute">
            <summary>
            Indicates whether the attribute's path is absolute.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonMappingAttribute.#ctor(System.String,System.String,MFiles.VAF.Configuration.JsonMapping.JsonListMappingMode)">
            <summary>
            Constructor.
            </summary>
            <param name="target">The identifier of the json format this attribute maps the data member in to.</param>
            <param name="path">
             The location that this data members value should be mapped to in the target json structure.
             Paths starting with $. are absolute, otherwise they are relative to the data-member's declaring type's
             path or the parent data-member's path.
            </param>
            <param name="listMode">
             Defines how the mapping is applied to list-based data members.
             Has no effect if the data-member is not list-based.
            </param>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.IJsonValueMapper">
            <summary>
            Interface for an object that can alter the default mapping
            generation done by <see cref="T:MFiles.VAF.Configuration.JsonMapping.JsonMapGenerator"/>. 
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.IJsonValueMapper.CanMap(MFiles.VAF.Configuration.JsonMapping.DataMemberInfo,MFiles.VAF.Configuration.JsonMapping.JsonMappingAttribute)">
            <summary>
            Indicates whether this mapper wants to (can) override
            the default mapping generation for this data member.
            </summary>
            <param name="dm">The data member to create a mapping for.</param>
            <param name="mapAttr">
              The <see cref="T:MFiles.VAF.Configuration.JsonMapping.JsonMappingAttribute"/> decorating the data member
              and referring to the target JSON structure for which a mapping should
              be generated.
            </param>
            <returns>True, if the item can be mapped.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.IJsonValueMapper.CreateMapping(MFiles.VAF.Configuration.JsonMapping.DataMemberInfo,MFiles.VAF.Configuration.JsonMapping.JsonMappingAttribute,MFiles.VAF.Configuration.JsonMapping.JsonValueMapping)">
            <summary>
            Replaces or augments the default mapping generated for the data member.
            </summary>
            <param name="dm">The data member that was mapped.</param>
            <param name="mapAttr">
              The <see cref="T:MFiles.VAF.Configuration.JsonMapping.JsonMappingAttribute"/> decorating the data member
              and referring to the target JSON structure for which the mapping
              was/should be generated.
            </param>
            <param name="mapping">The default mapping generated for the data member.</param>
            <returns><see cref="T:MFiles.VAF.Configuration.JsonMapping.JsonValueMapping"/></returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.JsonPathInfo">
            <summary>
            Provides information about a json path.
            Particularly for JsonValueMapping.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.JsonPathInfo.Segments">
            <summary>
            The path segments.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.JsonPathInfo.Path">
            <summary>
            The path.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.JsonPathInfo.ContainsPlaceholders">
            <summary>
            Indicates whether the path contains any placeholders.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.JsonPathInfo.PlaceholderPattern">
            <summary>
            Regular expression pattern to extract placeholders from path segments.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonMapping.JsonPathInfo.placeholdersBySegmentIndex">
            <summary>
            The placeholders found in this instance's path.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonMapping.JsonPathInfo.arrayWildCardSegmentIndexes">
            <summary>
            The segments that contain array wild cards.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonPathInfo.GetSegments(System.String)">
            <summary>
            Splits a json path into segments.
            </summary>
            <param name="path">The path to split.</param>
            <returns>The path's segments.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonPathInfo.ResolvePlaceholders(System.String)">
            <summary>
            Finds all placeholders and indexes them by their segment index.
            </summary>
            <param name="path">The path to extract placeholders from.</param>
            <returns>Placeholders in the path.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonPathInfo.ResolvePlaceholders(System.String[])">
            <summary>
            Finds all placeholders and indexes them by their segment index.
            </summary>
            <param name="pathSegments">The path segments to extract placeholders from.</param>
            <returns>Placeholders in the path.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonPathInfo.ResolveSegmentPlaceholders(System.String)">
            <summary>
            Resolves any placeholders within a single path segment.
            </summary>
            <param name="segment">The segment to resolve placeholders for.</param>
            <returns>List of placeholders if any.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonPathInfo.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="path">The path to provide info for.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonPathInfo.SelectMatchingTokens(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Finds the tokens in a json object structure matching the path.
            </summary>
            <param name="jsonObj">The json object structure to find tokens in.</param>
            <returns>Tokens that match the path.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonPathInfo.GetTokenSearchPath">
            <summary>
            Converts the path into an appropriate token search path.
            </summary>
            <returns>Search path.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonPathInfo.GetPathMatcher">
            <summary>
            Creates a regular expression that can matches real paths with
            this path.
            </summary>
            <returns>Regular expression.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonPathInfo.SetPathIndexes(System.String,System.String)">
            <summary>
            Get the specific path for a target value by
            replacing any array index wild cards in the target path with
            indexes used in the source value's path.
            </summary>
            <param name="targetPath">The generic target path defined by the mapping for the source value.</param>
            <param name="sourceValuePath">The path to a specific value being mapped.</param>
            <returns>The target value path.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonPathInfo.ResolveSegmentPlaceholderValues(System.String,System.String,System.String[])">
            <summary>
            Resolves placeholder values from a real path segment given a template segment.
            </summary>
            <param name="templateSegment">The defined (template) path segment to get values for.</param>
            <param name="realSegment">The "real" path segment that will contain the placeholder values.</param>
            <param name="placeholders">
              Optional. The list of placeholders defined in the template segment.
              If not passed, they will be calculated.
            </param>
            <returns>Placeholder values indexed by placeholder name.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonPathInfo.ResolvePlaceholderValuesFromPath(System.String)">
            <summary>
            Extracts placeholder values from a "real" path.
            </summary>
            <param name="path">The "real" path to extract placeholder values from.</param>
            <returns>Placeholder values indexed by placeholder and segment index.</returns>
            <example>
            If the current instances path is foo.bar.&lt;key&gt;.value, and the real path
            passed is foo.bar.x.value. Then this method would return the value x indexed at
            2 (segment index) and "key" (placeholder name) respectively.
            retVal[ 2 ][ "key" ] = "x";
            </example>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonPathInfo.SegmentHasArrayWildCard(System.String)">
            <summary>
            Determines if a segment contains a wild card array index.
            </summary>
            <param name="segment">The segment to check.</param>
            <returns>True if a wile card array index was found, false otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonPathInfo.ResolveSegmentsWithWildCardArrayIndexes(System.String[])">
            <summary>
            Gets the indexes of segments with wild-card array indexes.
            </summary>
            <param name="segments">The list of path segments.</param>
            <returns>Segment indexes.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonPathInfo.ResolveSettablePath(Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,MFiles.VAF.Configuration.JsonMapping.JsonPathInfo,System.String)">
            <summary>
            Determines the real settable target path to map a source value to.
            Replacing wild-card array indexes with real indexes, replacing placeholder
            values with real values, and ensuring placeholder values are set in the
            target.
            </summary>
            <param name="source">The source json structure.</param>
            <param name="target">The target json structure.</param>
            <param name="sourcePathInfo">Information about the source path.</param>
            <param name="sourceValuePath">The path of the token being mapped.</param>
            <returns>The path to map the value to in the target.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.JsonValueMapping">
            <summary>
            Contains information how to map a json value from
            one json format to another.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.JsonValueMapping.SourcePath">
            <summary>
            The source path to the value location(s) 
            in the source JSON structure.
            Must be absolute, but can contain array index wild-cards.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.JsonValueMapping.TargetPath">
            <summary>
            The target path to the corresponding value location(s)
            in the target JSON structure.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.JsonValueMapping.Converter">
            <summary>
            A custom converter that should be used when mapping values
            from the source JSON structure to the target JSON structure.
            Must be absolute, but can contain array index wild-cards.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonValueMapping.#ctor(System.String,System.String,MFiles.VAF.Configuration.JsonMapping.IJsonValueConverter)">
            <summary>
            Constructor.
            </summary>
            <param name="sourcePath">
             The source path to the value location(s) 
             in the source JSON structure.
             Must be absolute, but can contain array index wild-cards.
            </param>
            <param name="targetPath">
             The target path to the corresponding value location(s)
             in the target JSON structure.
             Must be absolute, but can contain array index wild-cards.
            </param>
            <param name="converter">
             A custom converter that should be used when mapping values
             from the source JSON structure to the target JSON structure.
            </param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.JsonValueMapping.Invert">
            <summary>
            Provides an inverse mapping, that defines how a value from the target JSON
            structure should be mapped into the source JSON structure.
            </summary>
            <returns>Provides a reverse mapping.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.MapObjectToArrayAttribute">
            <summary>
            Used to indicate which data members and mappings should use the
            <see cref="T:MFiles.VAF.Configuration.JsonMapping.Mappers.ObjectToArrayMapper"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.MapObjectToArrayAttribute.Target">
            <summary>
            The mapping this attribute targets.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.MapObjectToArrayAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="target">The mapping this attribute targets.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.Mappers.EnumMapper">
            <summary>
            Maps enum names in the source to enum values in the target. 
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Mappers.EnumMapper.CanMap(MFiles.VAF.Configuration.JsonMapping.DataMemberInfo,MFiles.VAF.Configuration.JsonMapping.JsonMappingAttribute)">
            <summary>
            Determines if this mapper can generate or augment the mapping
            for a particular data member.
            </summary>
            <param name="dm">The data member to check.</param>
            <param name="mapAttr">The data member's mapping attribute.</param>
            <returns>True if the mapper can/wants to handle the mapping, false otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Mappers.EnumMapper.CreateMapping(MFiles.VAF.Configuration.JsonMapping.DataMemberInfo,MFiles.VAF.Configuration.JsonMapping.JsonMappingAttribute,MFiles.VAF.Configuration.JsonMapping.JsonValueMapping)">
            <summary>
            Augments the default mapping or generates a new one.
            </summary>
            <param name="dm">The data member the mapping is for.</param>
            <param name="mapAttr">The data member's mapping attribute.</param>
            <param name="mapping">The default mapping generated for the item.</param>
            <returns>The mapping to use.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.Mappers.FlagsObjectMapper">
            <summary>
            Maps the <see cref="T:MFiles.VAF.Configuration.JsonMapping.Converters.FlagObjectToFlagsConverter`1"/> on
            appropriate data member mappings.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Mappers.FlagsObjectMapper.CanMap(MFiles.VAF.Configuration.JsonMapping.DataMemberInfo,MFiles.VAF.Configuration.JsonMapping.JsonMappingAttribute)">
            <summary>
            Determines if this mapper can generate or augment the mapping
            for a particular data member.
            </summary>
            <param name="dm">The data member to check.</param>
            <param name="mapAttr">The data member's mapping attribute.</param>
            <returns>True if the mapper can/wants to handle the mapping, false otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Mappers.FlagsObjectMapper.CreateMapping(MFiles.VAF.Configuration.JsonMapping.DataMemberInfo,MFiles.VAF.Configuration.JsonMapping.JsonMappingAttribute,MFiles.VAF.Configuration.JsonMapping.JsonValueMapping)">
            <summary>
            Augments the default mapping or generates a new one.
            </summary>
            <param name="dm">The data member the mapping is for.</param>
            <param name="mapAttr">The data member's mapping attribute.</param>
            <param name="mapping">The default mapping generated for the item.</param>
            <returns>The mapping to use.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.Mappers.MFIdentifierToIDMapper">
            <summary>
            Provides special mapping behavior for MFIdentifer-like types.
            (I.E. Anything with a VaultElementReferenceAttribute attaches to it).
            
            Specifically, it adds appropriate <see cref="T:MFiles.VAF.Configuration.JsonMapping.Converters.MFIdentiferToIDConverter"/>
            as converters on the mappings.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.Mappers.MFIdentifierToIDMapper.Resolver">
            <summary>
            Used to resolve id's from references.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Mappers.MFIdentifierToIDMapper.#ctor(MFilesAPI.Vault)">
            <summary>
            Constructor.
            </summary>
            <param name="vault">Vault that can be used to resolve structure element IDs.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Mappers.MFIdentifierToIDMapper.#ctor(MFiles.VAF.Configuration.JsonMapping.IMFIdentiferResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="resolver">Object that can be used to resolve structure element IDs.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Mappers.MFIdentifierToIDMapper.CanMap(MFiles.VAF.Configuration.JsonMapping.DataMemberInfo,MFiles.VAF.Configuration.JsonMapping.JsonMappingAttribute)">
            <summary>
            Determines if this mapper can generate or augment the mapping
            for a particular data member.
            </summary>
            <param name="dm">The data member to check.</param>
            <param name="mapAttr">The data member's mapping attribute.</param>
            <returns>True if the mapper can/wants to handle the mapping, false otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Mappers.MFIdentifierToIDMapper.CreateMapping(MFiles.VAF.Configuration.JsonMapping.DataMemberInfo,MFiles.VAF.Configuration.JsonMapping.JsonMappingAttribute,MFiles.VAF.Configuration.JsonMapping.JsonValueMapping)">
            <summary>
            Augments the default mapping or generates a new one.
            </summary>
            <param name="dm">The data member the mapping is for.</param>
            <param name="mapAttr">The data member's mapping attribute.</param>
            <param name="mapping">The default mapping generated for the item.</param>
            <returns>The mapping to use.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Mappers.MFIdentifierToIDMapper.GetVaultElementReferenceAttribute(MFiles.VAF.Configuration.JsonMapping.DataMemberInfo)">
            <summary>
            Finds a vault element reference attribute applicable to a data
            member.
            </summary>
            <param name="dm">The data element to get the attribute for.</param>
            <returns>Returns null if not found.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.Mappers.ObjectToArrayMapper">
            <summary>
            Maps the <see cref="T:MFiles.VAF.Configuration.JsonMapping.Converters.ObjectToArrayConverter`1"/> onto mappings
            that have the 
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Mappers.ObjectToArrayMapper.CanMap(MFiles.VAF.Configuration.JsonMapping.DataMemberInfo,MFiles.VAF.Configuration.JsonMapping.JsonMappingAttribute)">
            <summary>
            Determines if this mapper can generate or augment the mapping
            for a particular data member.
            </summary>
            <param name="dm">The data member to check.</param>
            <param name="mapAttr">The data member's mapping attribute.</param>
            <returns>True if the mapper can/wants to handle the mapping, false otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.Mappers.ObjectToArrayMapper.CreateMapping(MFiles.VAF.Configuration.JsonMapping.DataMemberInfo,MFiles.VAF.Configuration.JsonMapping.JsonMappingAttribute,MFiles.VAF.Configuration.JsonMapping.JsonValueMapping)">
            <summary>
            Augments the default mapping or generates a new one.
            </summary>
            <param name="dm">The data member the mapping is for.</param>
            <param name="mapAttr">The data member's mapping attribute.</param>
            <param name="mapping">The default mapping generated for the item.</param>
            <returns>The mapping to use.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonMapping.MFIdentiferResolver">
            <summary>
            Simple implementation of <see cref="T:MFiles.VAF.Configuration.JsonMapping.IMFIdentiferResolver"/>
            backed by a vault instance.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonMapping.MFIdentiferResolver.Vault">
            <summary>
            The vault instance used to resolve identifiers.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.MFIdentiferResolver.#ctor(MFilesAPI.Vault)">
            <summary>
            Constructor.
            </summary>
            <param name="vault">The vault instance used to resolve identifiers.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonMapping.MFIdentiferResolver.Resolve(System.Type,MFiles.VAF.Configuration.MFIdentifier)">
            <summary>
            Resolves the ID of an MFIdentifier.
            </summary>
            <param name="structureType">The type of structure the identifier is for.</param>
            <param name="identifer">The identifier to resolve.</param>
            <returns>The id if found, -1 otherwise.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonConfSearchConditionsJAEditorAttribute">
            <summary>
            Controls how search conditions are displayed and edited in the JSON Configuration GUI.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonConfSearchConditionsJAEditorAttribute.behaviorFilter">
            <summary>
            JSON enum value indicating the conditions are used for filtering.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonConfSearchConditionsJAEditorAttribute.behaviorSearch">
            <summary>
            JSON enum value indicating the conditions are used for searching.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfSearchConditionsJAEditorAttribute.IsFilter">
            <summary>
            If <c>true</c>, indicates that the conditions will be used as filters
            instead of search conditions, meaning the "is empty" operator
            can/should be treated as "is empty or missing". 
            Defaults to true.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonConfSearchConditionsJAEditorAttribute.Validate">
            Indicates if the search conditions should be validated automatically.
            Default = true.
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonConfSearchConditionsJAEditorAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonConfSearchConditionsJAEditorAttribute.HasOptions">
            <summary>
            Determines if this attribute defines custom options.
            </summary>
            <returns>True, when the item has options specified.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonConfSearchConditionsJAEditorAttribute.GetOptions">
            <summary>
            Gets the custom options defined by this attribute.
            </summary>
            <returns>Dynamic expando object</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.ILicensedApplication">
            <summary>
            Licensing interface for required from all license-enabled applications.
            Methods for setting the license and getting the statuses.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.ILicensedApplication.SetApplicationLicense(System.String)">
            <summary>
            Setting in a new license content.
            Gets called from applying new license from MF-Admin.
            </summary>
            <param name="license">The license content.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ILicensedApplication.GetApplicationLicenseStatus(System.String)">
            <summary>
            Called by platform, at any time, to request the license status, 
            either currently set license or the one given as argument.
            Returning the value MFApplicationLicenseStatusFormatError for a new license will prevent 
            the user from saving that license into the database.
            Make this method as fast as possible.
            </summary>
            <param name="license">If not null, return status of this license content.</param>
            <returns>Enumeration status.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.ILicensedApplication.GetApplicationLicenseDetails(System.String)">
            <summary>
            Called by platform, at any time, to request the license details text, 
            either currenly set license or the one given as argument.
            Make this method as fast as possible.
            </summary>
            <param name="license">If not null, return status of this license content.</param>
            <returns>Details text.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.ILicenseDecoder">
            <summary>
            Interface for the license decoder object utilized by the LicenseManagerBase to convert raw license into readable.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.ILicenseDecoder.Decode(System.String)">
            <summary>
            Method used to decode the raw license into json output.
            Throw exception if the format is not recognized or otherwise invalid.
            </summary>
            <param name="input">Raw input</param>
            <returns>Decoded output</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.IApplicationLicenseContent">
            <summary>
            Interface for the application license content class utilized by the LicenseManagerBase.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.IApplicationLicenseContent.LicenseStatus">
            <summary>
            The contents license status.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.IApplicationLicenseContent.ToString">
            <summary>
            The text details of the license state.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.IApplicationLicenseContent.IsFormatCorrect(System.Guid,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Method to check contents sanity. 
            Conditions are checked with TermCheck.
            </summary>
            <param name="appGuid">Guid of the running application.</param>
            <param name="errors">List of errors.</param>
            <param name="infos">List of infos.</param>
            <returns>Correctness</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.IApplicationLicenseContent.IsConditionsOK(MFilesAPI.Vault,MFilesAPI.LicenseStatus,System.DateTime,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Method to check if license's conditions are ok.
            </summary>
            <param name="vault">Vault we are in, CanBeNull.</param>
            <param name="serverLicenseStatus">License Status of current server license, CanBeNull.</param>
            <param name="applicationDate">Date of the application binary, CanBeNull.</param>
            <param name="errors">List of errors.</param>
            <param name="infos">List of infos.</param>
            <returns>Correctness</returns>
        </member>
        <member name="P:MFiles.VAF.Configuration.IApplicationLicenseContent.IsEvaluated">
            <summary>
            Cached value for evaluated conditions.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.IApplicationLicenseContent.IsEmpty">
            <summary>
            Global value for emptiness.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.IApplicationLicenseContent.Errors">
            <summary>
            Internal containers for errors from deserialization etc.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.IApplicationLicenseContent.Infos">
            <summary>
            Internal containers for infos from deserialization etc.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.IApplicationLicenseContent.FormatError">
            <summary>
            Global value for really bad source data.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.ILicensingSupport`1">
            <summary>
            Licensing interface for base implementation.
            </summary>
            <typeparam name="LicenseType">Type of the license content object.</typeparam>
        </member>
        <member name="P:MFiles.VAF.Configuration.ILicensingSupport`1.RawLicense">
            <summary>
            The raw license string.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.ILicensingSupport`1.License">
            <summary>
            The license object of the general type.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.ILicensingSupport`1.Decoder">
            <summary>
            The license decoder used to "open" the raw license, if set.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.LicenseContentBase">
            <summary>
            License Content object with common set of members.
            Includes validation checks for them.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.LicenseContentBase.NEVER">
            <summary>
            Keyword for expiracy.
            No translation.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.LicenseVersion">
            <summary>
            Version of this license format.
            Usefull after version difference becomes relevant.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.Description">
            <summary>
            Description of the application/license.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.SerialNumber">
            <summary>
            Serial number of the license.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.LicensedTo">
            <summary>
            Licensee name.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.IsTrial">
            <summary>
            Is this a trial license.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.Application">
            <summary>
            Identification of the application (GUID).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.LicenseExpireDate">
            <summary>
            Last date of license validity.
            "dd.mm.yyyy" (date,month,year) format.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.MaintenanceExpireDate">
            <summary>
            Last date of Maintenance subscription validity.
            "dd.mm.yyyy" (date,month,year) format.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.GraceDays">
            <summary>
            Number of days to consider grace period after the expiracy.
            Unset/zero value to not use any grace.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.Vaults">
            <summary>
            Identification of the vaults this license is only allowed in.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.Modules">
            <summary>
            List of modules covered in this license.
            Usefull for ModularVaultApplication.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.Groups">
            <summary>
            List of user group max-length requirements.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.MFilesSerialNumber">
            <summary>
            Only work in server with this license number.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.NamedUsers">
            <summary>
            Number of Named user licenses allowed in Server license.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.ConcurrentUsers">
            <summary>
            Number of Concurrent user licenses allowed in Server license.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.ReadOnlyUsers">
            <summary>
            Number of Readonly user licenses allowed in Server license.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.ServerVersions">
            <summary>
            Exclusive list of allowed server versions.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.IsValid">
            <summary>
            Overall validity value.
            This is not read from license directly.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.LicenseContentBase.maintenanceExpireDateTime">
            <summary>
            Internal value of the MaintenanceExpireDate.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.LicenseContentBase.licenseExpireDateTime">
            <summary>
            Internal value of the LicenseExpireDate.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.LicenseContentBase.inGrace">
            <summary>
            We are in grace.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.IsEvaluated">
            <summary>
            Is our instance evaluated.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.Errors">
            <summary>
            List of our errors.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.Infos">
            <summary>
            List of our infos.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.IsEmpty">
            <summary>
            Are we empty.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.FormatError">
            <summary>
            Had we format error from deserializing or smth.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.LicenseContentBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.LicenseContentBase.IsFormatCorrect(System.Guid,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Method to check contents sanity. 
            </summary>
            <param name="appGuid">Application Guid to require.</param>
            <param name="errors">List of errors.</param>
            <param name="infos">List of infos.</param>
            <returns>Correctness</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.LicenseContentBase.IsConditionsOK(MFilesAPI.Vault,MFilesAPI.LicenseStatus,System.DateTime,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Method to check if license's conditions are ok.
            </summary>
            <param name="vault">Vault we are in, CanBeNull.</param>
            <param name="serverLicenseStatus">License Status of current server license, CanBeNull.</param>
            <param name="applicationDate">Date of the application binary.</param>
            <param name="errors">List of errors.</param>
            <param name="infos">List of infos.</param>
            <returns>Correctness</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.LicenseContentBase.ServerLicenseStatusChecks(System.Object,System.Collections.Generic.List{System.String}@)">
            <summary>
            Checks from LicenseStatus of the server.
            Using dynamic member to have backward compatibility with MF 11.2.
            </summary>
            <param name="serverLicenseStatus">Server license status.</param>
            <param name="errors">Errors list, updated by the method.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.LicenseContentBase.VersionMatch(MFilesAPI.MFilesVersion,System.String)">
            <summary>
            Return if the filter matches the version.
            Filter contain any number of parts "12", "11.2", "11.1.4320", "10.3.3210.123"
            </summary>
            <param name="ver">Version</param>
            <param name="filter">Filter</param>
            <returns>True when the filter matches the version.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.LicenseContentBase.VersionIsAtleast(MFilesAPI.MFilesVersion,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Return true if this version is at least the given separate version number
            in branch-specific manner (requires major and minor to match exactly).
            </summary>
            <param name="version">Version to check and compare.</param>
            <param name="major">Major version, exact match.</param>
            <param name="minor">Minor version, exact match.</param>
            <param name="build">Build version, >= comparison.</param>
            <param name="patch">Patch version, >= comparison.</param>
            <returns>The version is at least the given numbers version.</returns>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseContentBase.LicenseStatus">
            <summary>
            The contents license status.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.LicenseContentBase.ToString">
            <summary>
            The text details of the license state.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.GroupLenLimit">
            <summary>
            Group alias/lenght structure.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.GroupLenLimit.Group">
            <summary>
            Identification of the group, Alias.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.GroupLenLimit.Len">
            <summary>
            Max allowed length of users in this group.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.LicenseDecoder">
            <summary>
            Default license decoder that uses the default formatting provided by LicenseHelper.
            Support the few available encoding methods.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.LicenseDecoder.EncMode">
            <summary>
            Our mode.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.LicenseDecoder.EncMode.SharedSecret">
            <summary>
            Shared secret mode.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.LicenseDecoder.EncMode.TwoKey">
            <summary>
            Two key encryption.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.LicenseDecoder.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.LicenseDecoder.#ctor(MFiles.VAF.Configuration.LicenseDecoder.EncMode)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.LicenseDecoder.mode">
            <summary>
            Internal mode selector.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseDecoder.MainKey">
            <summary>
            XML format representation of public key used to verify license signature.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseDecoder.AltKey">
            <summary>
            XML format representation of secondary key used.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.LicenseDecoder.SharedSecret">
            <summary>
            Shared password used to AES decode the content.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.LicenseDecoder.Decode(System.String)">
            <summary>
            Decode the input into output.
            Throw exception if the format is not recognized or otherwise invalid.
            </summary>
            <param name="input">Input</param>
            <returns>output</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.LicenseDecoder.SharedSecretDecode(System.String)">
            <summary>
            Decode the input into output using Shared Secret method.
            Throw exception if the format is not recognized or otherwise invalid.
            </summary>
            <param name="input">Input</param>
            <returns>output</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.LicenseDecoder.TwoKeyDecode(System.String)">
            <summary>
            Decode the input into output using Two Key method.
            Throw exception if the format is not recognized or otherwise invalid.
            </summary>
            <param name="input">Input</param>
            <returns>output</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFSubstructureReferenceAttribute">
            <summary>
            Substructure (IE: Workflow => State / State Transition || ObjType => Class ) element reference.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFSubstructureReferenceAttribute.FilterReferencePath">
            <summary>
            When Value List Item filtering based on a owner Value List that is defined within the
            object hierarchy, this attribute is used to define to JSPath to the 'item' that contains the 
            value list definition to filter against.
            <usage>
            // FilterReferencePath = ".parent._children{.key = 'MySiblingItem' } "
            var refItem = JSPath.apply( item.options.filterReferencePath, item )[ 0 ];
            var structureDef = refItem.structureDef;
            </usage>
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFSubstructureReferenceAttribute.ChildFilterReferencePath">
            <summary>
            The value given here is passed on to the child options, use this if the decorated 
            property is a collection.
            
            When Value List Item filtering based on a owner Value List that is defined within the
            object hierarchy, this attribute is used to define to JSPath to the 'item' that contains the 
            value list definition to filter against.
            <usage>
            // FilterReferencePath = ".parent._children{.key = 'MySiblingItem' } "
            var refItem = JSPath.apply( item.options.filterReferencePath, item )[ 0 ];
            var structureDef = refItem.structureDef;
            </usage>
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFSubstructureReferenceAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFSubstructureReferenceAttribute.HasOptions">
            <summary>
            Determines if this attribute defines custom options.
            </summary>
            <returns>True, if the object has options specified.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFSubstructureReferenceAttribute.GetOptions">
            <summary>
            Gets the custom options defined by this attribute.
            </summary>
            <returns>Dynamic expando object</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFPropertyDefReferenceAttribute">
            <summary>
            PropertyDef structure element reference specific attribute class.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFPropertyDefReferenceAttribute.Datatypes">
            <summary>
            Valid <see cref="T:MFilesAPI.MFDataType"/>'s available for the target <see cref="T:MFilesAPI.PropertyDef"/>.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFPropertyDefReferenceAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFPropertyDefReferenceAttribute.HasOptions">
            <summary>
            Determines if this attribute defines custom options.
            </summary>
            <returns>True, if the object has options specified.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFPropertyDefReferenceAttribute.GetOptions">
            <summary>
            Gets the custom options defined by this attribute.
            </summary>
            <returns>Dynamic expando object</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFStructureReferenceAttribute">
            <summary>
            Structure element reference specific attribute class.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFStructureReferenceAttribute.MFStructureReferenceType">
            <summary>
            Reference types for a given Structure Element Reference.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFStructureReferenceAttribute.MFStructureReferenceType.ID">
            <summary>
            ID.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFStructureReferenceAttribute.MFStructureReferenceType.ObjID">
            <summary>
            ObjID.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFStructureReferenceAttribute.MFStructureReferenceType.Alias">
            <summary>
            Alias.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFStructureReferenceAttribute.MFStructureReferenceType.Guid">
            <summary>
            Guid.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFStructureReferenceAttribute.MFStructureReferenceType.ExternalID">
            <summary>
            External ID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFStructureReferenceAttribute.ChildRestrictReferenceTypes">
            <summary>
            Collection of reference types that are not allowed for child items.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFStructureReferenceAttribute.RestrictReferenceTypes">
            <summary>
            Collection of reference types that are not allowed.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFStructureReferenceAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFStructureReferenceAttribute.HasOptions">
            <summary>
            Determines if this attribute defines custom options.
            </summary>
            <returns>True, if the object has options specified.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFStructureReferenceAttribute.GetOptions">
            <summary>
            Gets the custom options defined by this attribute.
            </summary>
            <returns>Dynamic expando object</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.IntelligenceServices.ProviderTerm">
            <summary>
            Root level Provider Term.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.IntelligenceServices.ProviderTerm.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.IntelligenceServices.ProviderTerm.Term">
            <summary>
            Term value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.IntelligenceServices.ProviderTerm.Mode">
            <summary>
            Mapping Mode.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.IntelligenceServices.ProviderTerm.Type">
            <summary>
            Any Property Mode : Mapping.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.IntelligenceServices.ProviderTerm.Property">
            <summary>
            Specific Property Mode : Mapping.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.IntelligenceServices.ProviderTerm.InstanceTerms">
            <summary>
            Collection of Instance Terms, for this Term.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.IntelligenceServices.SubTermMap">
            <summary>
            Sub-Term Mapping.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.IntelligenceServices.SubTermMap.TermValue">
            <summary>
            Term value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.IntelligenceServices.SubTermMap.MFValue">
            <summary>
            Item value. 
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.IntelligenceServices.SubTermMap.SubTerms">
            <summary>
            Collection of nested Sub-Terms.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.IntelligenceServices.TermMap">
            <summary>
            Term mapping.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.IntelligenceServices.TermMap.TermValue">
            <summary>
            Term value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.IntelligenceServices.TermMap.MFValue">
            <summary>
            Dynamic Item value. 
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.IntelligenceServices.TermMap.InstanceTerms">
            <summary>
            Collection of nested Instance-Terms.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.IntelligenceServices.TermMap.SubTerms">
            <summary>
            Collection of nested Sub-Terms.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.IntelligenceServices.TermMode">
            <summary>
            Term Filter Mode.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.IntelligenceServices.TermMode.NotMapped">
            <summary>
            No value has yet been selected.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.IntelligenceServices.TermMode.SpecificPropertyMode">
            <summary>
            The filter is to be based off of a specific property.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.IntelligenceServices.TermMode.AnyPropertyMode">
            <summary>
            The filter is to be based off of a Value List Type ( so it works for any property targeting the value list ).
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.MultilineTextEditorAttribute">
            <summary>
            JsonConEditor - Multi-line Text Editor Options Attribute.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MultilineTextEditorAttribute.#ctor">
            <summary>
            Default Constructor, explicitly sets the TypeEditor property.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MultilineTextEditorAttribute.MaxRowHeight">
            <summary>
            Maximum row height visible before the scroll bar is activated.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MultilineTextEditorAttribute.HasOptions">
            <summary>
            Determines if this attribute defines custom options.
            </summary>
            <returns>True, if the object has options specified.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MultilineTextEditorAttribute.GetOptions">
            <summary>
            Gets the custom options defined by this attribute.
            </summary>
            <returns>Dynamic expando object</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.SecureConfigurationManager`1">
            <summary>
            Manages the loading and saving of configurations
            while enforcing permission checks, and redacting/restoring sensitive
            settings when displaying/saving them.
            </summary>
            <typeparam name="TConfig">The type of configuration class this instance manages.</typeparam>
        </member>
        <member name="P:MFiles.VAF.Configuration.SecureConfigurationManager`1.Storage">
            <summary>
            The storage manager of the configuration.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.SecureConfigurationManager`1.Security">
            <summary>
            Security settings to enforce for the TConfig instance and references.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.SecureConfigurationManager`1.Namespace">
            <summary>
            Namespace in NVS where the configuration is stored.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.SecureConfigurationManager`1.Key">
            <summary>
            Key where the configuration is stored in the <see cref="P:MFiles.VAF.Configuration.SecureConfigurationManager`1.Namespace"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.SecureConfigurationManager`1.ResourceManager">
            <summary>
            Resource manager to use for the configuration when generating it's schema.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecureConfigurationManager`1.#ctor(System.String,System.String,MFiles.VAF.Configuration.SecurityAttribute.UserLevel,System.Resources.ResourceManager)">
            <summary>
            Constructor.
            </summary>
            <param name="ns">The namespace in NVS where the configuration is stored.</param>
            <param name="key">The key in the namespace where the configuration is stored.</param>
            <param name="defaultLevel">
            The default security level needed to modify the configuration.
            This can be overridden for certain settings and settings nodes (objects) with the
            security attribute.
            </param>
            <param name="resourceManager">
            Resource manager to use for the configuration when generating it's schema.
            </param>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecureConfigurationManager`1.LoadRedactedText(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Loads the configuration text so that is safe to show in MFAdmin.
            All password fields will be redacted.
            As a safety precaution, this method Throws an exception if the configuration
            is not valid json, and user is not a sysadmin. This is the only way to ensure
            non-sysadmins do not see sensitive information.
            </summary>
            <param name="context">The vault and user requesting the Configuration.</param>
            <returns>The redacted configuration text.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecureConfigurationManager`1.LoadRedactedText(MFilesAPI.Vault,MFiles.VAF.Configuration.SecurityAttribute.UserLevel)">
            <summary>
            Loads the configuration text so that is safe to show in MFAdmin.
            All password fields will be redacted.
            As a safety precaution, this method Throws an exception if the configuration
            is not valid json, and user is not a sysadmin. This is the only way to ensure
            non-sysadmins do not see sensitive information.
            </summary>
            <param name="vault">The vault to load the configuration from.</param>
            <param name="userLevel">The access level of the user requesting the configuration.</param>
            <returns>The redacted configuration text.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecureConfigurationManager`1.SaveRedactedText(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,System.String)">
            <summary>
            Saves a configuration text, ensuring that:
            1. It is valid json (parseable).
            2. No settings were modified that should be restricted for the current user.
            3. Any passwords that were redacted when provided to the user, are restored first.
               If previous version cannot be parsed, no passwords would have been redacted, so this check isn't done,
               However, we would not have provided the unparseable text to vaultAdmins, so we don't allow them to
               save in this situation either.
            </summary>
            <param name="context">The vault and user requesting the save.</param>
            <param name="configuration">The configuration text to save.</param>
            <returns>The saved configuration.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecureConfigurationManager`1.SaveRedactedText(MFilesAPI.Vault,MFiles.VAF.Configuration.SecurityAttribute.UserLevel,System.String)">
            <summary>
            Saves a configuration text, ensuring that:
            1. It is valid json (parseable).
            2. No settings were modified that should be restricted for the current user.
            3. Any passwords that were redacted when provided to the user, are restored first.
               If previous version cannot be parsed, no passwords would have been redacted, so this check isn't done,
               However, we would not have provided the unparseable text to vaultAdmins, so we don't allow them to
               save in this situation either.
            </summary>
            <param name="vault">The vault to save the configuration to.</param>
            <param name="userLevel">The access level of the user saving the configuration.</param>
            <param name="configuration">The configuration text to save.</param>
            <returns>The saved configuration.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecureConfigurationManager`1.GetSchema(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Resolves a schema for the configuration class based on the user's
            security level.
            </summary>
            <param name="context">The vault and user requesting the schema.</param>
            <returns>The configuration schema.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecureConfigurationManager`1.LoadText(MFilesAPI.Vault)">
            <summary>
            Load the configuration text from storage.
            </summary>
            <param name="vault">The vault to load the configuration from.</param>
            <returns>The configuration text.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecureConfigurationManager`1.Load(MFilesAPI.Vault)">
            <summary>
            Loads the configuration object from storage.
            </summary>
            <param name="vault">The vault to load the configuration from.</param>
            <returns>The configuration.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecureConfigurationManager`1.Save(MFilesAPI.Vault,System.String)">
            <summary>
            Saves the raw configuration text to storage.
            </summary>
            <param name="vault">The vault to save the configuration to.</param>
            <param name="configText">The configuration text to save.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecureConfigurationManager`1.Serialize(`0)">
            <summary>
            Serializes a configuration object into text.
            </summary>
            <param name="config">The configuration to serialize.</param>
            <returns>The serialized configuration text.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecureConfigurationManager`1.Deserialize(System.String)">
            <summary>
            Deserializes a configuration text into an object.
            </summary>
            <param name="configText">The configuration text to deserialize.</param>
            <returns>The deserialized configuration object.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.SecuritySettings`1">
            <summary>
            Class for handling the SecurityAttribute settings in the configuration.
            - Prevents saving the configuration from a user without correct permissions.
            - Hides password value from the shown configuration.
            </summary>
            <typeparam name="TConfig">Configuration class.</typeparam>
        </member>
        <member name="F:MFiles.VAF.Configuration.SecuritySettings`1.ArrayMarker">
            <summary>
            Marker in JSON path used to identify array of objects.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.SecuritySettings`1.PasswordDisplayValue">
            <summary>
            Value used to show as a value of password property.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.SecuritySettings`1.defaultRequiredUserLevel">
            <summary>
            Default required user level when none is set with Security attribute.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecuritySettings`1.#ctor(MFiles.VAF.Configuration.SecurityAttribute.UserLevel)">
            <summary>
            Constructor.
            </summary>
            <param name="defaultUserLevel">
            Default required user level, if no security attribute setting in place.
            </param>
        </member>
        <member name="T:MFiles.VAF.Configuration.SecuritySettings`1.PathContainer">
            <summary>
            Collection of string lists.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.SecuritySettings`1.PathContainer.PasswordPaths">
            <summary>
            List of JSON paths identifying the IsPassword properties.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.SecuritySettings`1.PathContainer.SysAdminPaths">
            <summary>
            List of JSON paths identifying the ModifyBy=SysAdmin properties.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.SecuritySettings`1.cachedSecurityJsonPathsByType">
            <summary>
            Cache of JSON paths per each configuration type.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecuritySettings`1.GetSecurityAttributeJsonPaths">
            <summary>
            Return list of JSON paths of properties that have SecurityAttribute defined for the Configuration.
            </summary>
            <returns>Container with the property JSON paths.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecuritySettings`1.GetSecurityAttributeJsonPathsImpl(System.Type,MFiles.VAF.Configuration.SecuritySettings{`0}.PathContainer@,System.String,System.Collections.Generic.List{System.Type},MFiles.VAF.Configuration.SecurityAttribute.UserLevel)">
            <summary>
            Recursible method to return list of JSON paths of properties that have SecurityAttribute defined.
            </summary>
            <param name="objType">Currently checked piece of the configuration object.</param>
            <param name="pathContainer">Container with lists of JSON paths, values modified by this method.</param>
            <param name="path">Current JObject-element path matching the obj.</param>
            <param name="recursiveTree">List of types in this object.</param>
            <param name="parentSecurityLevel">Security level set to the parent node.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecuritySettings`1.GetGenericIEnumerables(System.Type)">
            <summary>
            Get the internal type used inside enumerable types.
            </summary>
            <param name="type">Any input type.</param>
            <returns>Type within type.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecuritySettings`1.ErasePasswords(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.List{System.String})">
            <summary>
            Method to erase values of IsPassword fields from the json object.
            </summary>
            <param name="json">JObject structure of the configuration, might get modified.</param>
            <param name="passwordPaths">List of JSON path keys with IsPassword field.</param>
            <returns>The modified JSON as string.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecuritySettings`1.SecurityCheckForSaving(MFiles.VAF.Configuration.SecurityAttribute.UserLevel,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject@,MFiles.VAF.Configuration.SecuritySettings{`0}.PathContainer)">
            <summary>
            Check the configuration changes, enforce SecurityAttribute settings.
            </summary>
            <param name="userLevel">The user level.</param>
            <param name="oldJson">The existing configuration as JObject.</param>
            <param name="newJson">The new configuration as JObject which may be modified.</param>
            <param name="pathContainer">Set of JSON paths.</param>
            <returns>The configuration as string, after optional modification.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecuritySettings`1.ArrayToUniquePaths(System.Collections.Generic.List{System.String},Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Return list of unique JSON paths matching to all structures of old and new JSON configurations.
            Expands each entry in the list of JSON paths to itself or to multiple copies with unique filters based 
            on given config instances.
            </summary>
            <param name="sourcePaths">List of keys for the type of the configurations.</param>
            <param name="oldJson">Old/existing configuration as JObject.</param>
            <param name="newJson">New configuration as JObject.</param>
            <returns>Full list of JSON paths, present in the two configurations.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecuritySettings`1.PathToUnique(System.String,Newtonsoft.Json.Linq.JObject,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            Return list of paths based on one input path and matching the given JSON object.
            </summary>
            <param name="propertyPath">The one input JSON path.</param>
            <param name="json">A configuration object as JObject.</param>
            <param name="valueCache">Collection of already found parts, gets updated at each run.</param>
            <returns>Either the propertyPath as such or it with multiple instances containing unique filters.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecuritySettings`1.EnforceSecurityAttribute(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject@)">
            <summary>
            Performs a security check to the configuration.
            </summary>
            <param name="context">The configuration request context.</param>
            <param name="oldJson">Old/existing configuration as JObject.</param>
            <param name="newJson">The new configuration as JObject.</param>
            <returns>Security checked and possibly modified configuration.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecuritySettings`1.EnforceSecurityAttribute(MFiles.VAF.Configuration.SecurityAttribute.UserLevel,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject@)">
            <summary>
            Performs a security check to the configuration.
            </summary>
            <param name="userLevel">The user security level.</param>
            <param name="oldJson">Old/existing configuration as JObject.</param>
            <param name="newJson">The new configuration as JObject.</param>
            <returns>Security checked and possibly modified configuration.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecuritySettings`1.StripPasswords(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Strips the password field values from the configuration.
            </summary>
            <param name="context">The configuration request context.</param>
            <param name="configurationJson">The configuration as JObject. Might get modified.</param>
            <returns>The configuration with password values removed.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecuritySettings`1.StripPasswords(MFiles.VAF.Configuration.SecurityAttribute.UserLevel,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Strips the password field values from the configuration.
            </summary>
            <param name="userLevel">The user security level.</param>
            <param name="configurationJson">The configuration as JObject. Might get modified.</param>
            <returns>The configuration with password values removed.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.TermOptionsEditorAttribute">
            <summary>
            JsonConEditor - Term Options Editor Attribute.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.TermOptionsEditorAttribute.#ctor">
            <summary>
            Default Constructor, explicitly sets the TypeEditor property.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.TermOptionsEditorAttribute.DisableTermCaching">
            <summary>
            When true, term caching is disabled and terms are fetched from the server each time
            the options dropdown is shown.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.TermOptionsEditorAttribute.HasOptions">
            <summary>
            Determines if this attribute defines custom options.
            </summary>
            <returns>True when there are options specified.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.TermOptionsEditorAttribute.GetOptions">
            <summary>
            Gets the custom options defined by this attribute.
            </summary>
            <returns>Dynamic expando object</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.TextEditorAttribute">
            <summary>
            JsonConEditor - Text Editor Options Attribute.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.TextEditorAttribute.#ctor">
            <summary>
            Default Constructor, explicitly sets the TypeEditor property.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.TextEditorAttribute.MaxLength">
            <summary>
            Maximum length restriction for strings used with this property.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.TextEditorAttribute.HasOptions">
            <summary>
            Determines if this attribute defines custom options.
            </summary>
            <returns>True, if the object has options specified.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.TextEditorAttribute.GetOptions">
            <summary>
            Gets the custom options defined by this attribute.
            </summary>
            <returns>Dynamic expando object</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.SecurityAttribute">
            <summary>
            Define the security information about the configuration property.
            </summary>
            <remarks>
            When password fields are used in the UI, those values will be redacted via a password mask "****" in a
            configuration object that has been parsed using json passed from the UI. The exception is when the password
            has been input into the UI and is first being saved. Therefore the password should only be used from
            configuration objects that have been loaded from NamedValueStorage (the non-redacted version).
            Note that the OnConfigurationChange handler will be passed a configuration object that contains the
            unredacted value.
            </remarks>
        </member>
        <member name="T:MFiles.VAF.Configuration.SecurityAttribute.UserLevel">
            <summary>
            User level enumeration.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.SecurityAttribute.UserLevel.Undefined">
            <summary>
            User is not defined.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.SecurityAttribute.UserLevel.User">
            <summary>
            Any user.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.SecurityAttribute.UserLevel.VaultAdmin">
            <summary>
            Vault administrator.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.SecurityAttribute.UserLevel.SystemAdmin">
            <summary>
            System administrator.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.SecurityAttribute.UserLevel.Nobody">
            <summary>
            Non-existing user level, Read-only value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.SecurityAttribute.ChangeBy">
            <summary>
            Defines the minimum user level required for changing the value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.SecurityAttribute.ViewBy">
            <summary>
            Defines the minimum user level required for viewing the value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.SecurityAttribute.IsPassword">
            <summary>
            Is the property a password field, which is returned as empty.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecurityAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecurityAttribute.CanGenerateMember(System.Reflection.MemberInfo,MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Determines whether the schema generator should add a member definition
            to the schema it is generating.
            </summary>
            <param name="member">The data member that could be added to the schema.</param>
            <param name="configurationRequestContext">The configuration request context.</param>
            <returns>True if the member should be added to the schema, false otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.SecurityAttribute.ResolveUserLevel(MFiles.VAF.Configuration.AdminConfigurations.IConfigurationRequestContext)">
            <summary>
            Resolves the current user's user level based on the given operation context.
            </summary>
            <param name="operationContext">The operation context.</param>
            <returns>The current user's user level.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Validation.IConditionalRequirement">
            <summary>
            Defines the conditions for both the server and client
            when a member of a configuration class is required,
            based on other values in the configuration that are set.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Validation.IConditionalRequirement.Description">
            <summary>
            Simplified user-friendly text describing the condition
            when this implementation will require a member.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Validation.IConditionalRequirement.JsPath">
            <summary>
            The JsPath query to run on the clients.
            If results are found by the query, the member will be
            required. When no results are found, it won't be required.
            Should match the <see cref="M:MFiles.VAF.Configuration.Validation.IConditionalRequirement.IsRequired(System.Object)"/>
            implementation in terms of logic.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Validation.IConditionalRequirement.IsRequired(System.Object)">
            <summary>
            Determines if a member is currently required or not.
            Should match the <see cref="P:MFiles.VAF.Configuration.Validation.IConditionalRequirement.JsPath"/> implementation in terms
            of logic.
            </summary>
            <param name="conf">The configuration in which the requiring is in question.</param>
            <returns>True if a member should be required in the configuration, false otherwise.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.Validation.RequireWhenAttribute">
            <summary>
            An attribute that can be used to mark a configuration value as
            being conditionally required, based on other values within the
            configuration.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Validation.RequireWhenAttribute.ConditionTypes">
            <summary>
            The type that should be used to determine whether the decorated member is required or not.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Validation.RequireWhenAttribute.HideWhenNotRequired">
            <summary>
            Indicates whether the decorated member should be hidden from the property grid when it is not required.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.Validation.RequireWhenAttribute.#ctor(System.Type[])">
            <summary>
            Constructor.
            </summary>
            <param name="conditionTypes">
            The types of condition that should be used to determine whether the decorated member is required or not.
            Each type must implement <see cref="T:MFiles.VAF.Configuration.Validation.IConditionalRequirement"/> to work correctly. 
            </param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Validation.RequireWhenAttribute.#ctor(System.Boolean,System.Type[])">
            <summary>
            Constructor.
            </summary>
            <param name="hideWhenNotRequired">
              Indicates whether the decorated member should be hidden from the property grid when it is not required.
            </param>
            <param name="conditionTypes">
            The types of condition that should be used to determine whether the decorated member is required or not.
            Each type must implement <see cref="T:MFiles.VAF.Configuration.Validation.IConditionalRequirement"/> to work correctly. 
            </param>
        </member>
        <member name="M:MFiles.VAF.Configuration.Validation.RequireWhenAttribute.GetConditions">
            <summary>
            The conditions the member was declared with.
            </summary>
            <returns>The conditions.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.IMetadataStructureValidator">
            <summary>
            The validator interface for checking if the metadata structure reference of given object is valid.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.IMetadataStructureValidator.ValidateItem(MFilesAPI.Vault,System.String,System.Object,MFiles.VAF.Configuration.ValidationResultBase,System.Reflection.Assembly[],System.Int32)">
            <summary>
            Validate item with its children. Can validate static and instance objects.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="configurationId">The id of the configuration that is being validated.</param>
            <param name="item">The validated item "value". To validate static structure use: <c>typeof(somestatic)</c></param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <param name="level">Hierarchy level limiter. Number of levels how deep to check. Set only for dev reasons.</param>
            <param name="containingAssemblies">Set of assemblies that are allowed to contain the validated items. Can be null in which case the set defaults to the assembly that contains the item.</param>
            <returns>True when everything is ok.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.IMetadataStructureValidator.ValidateItem(MFilesAPI.Vault,System.String,System.Object,MFiles.VAF.Configuration.ValidationResultBase,System.Resources.ResourceManager,System.Reflection.Assembly[],System.Int32)">
            <summary>
            Validate item with its children. Can validate static and instance objects.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="configurationId">The id of the configuration that is being validated.</param>
            <param name="item">The validated item "value". To validate static structure use: <c>typeof(somestatic)</c></param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <param name="resourceManager">The resource manager object that contains needed resources for validating the given item.</param>
            <param name="level">Hierarchy level limiter. Number of levels how deep to check. Set only for dev reasons.</param>
            <param name="containingAssemblies">Set of assemblies that are allowed to contain the validated items. Can be null in which case the set defaults to the assembly that contains the item.</param>
            <returns>True when everything is ok.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.IMetadataStructureValidator.ValidateItem(MFilesAPI.Vault,MFiles.VAF.Configuration.IConfiguration,System.Object,MFiles.VAF.Configuration.ValidationResultBase,System.Reflection.Assembly[],System.Int32)">
            <summary>
            Validate item with its children. Can validate static and instance objects.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="item">The validated item "value". To validate static structure use: <c>typeof(somestatic)</c></param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <param name="level">Hierarchy level limiter. Number of levels how deep to check. Set only for dev reasons.</param>
            <param name="containingAssemblies">Set of assemblies that are allowed to contain the validated items. Can be null in which case the set defaults to the assembly that contains the item.</param>
            <returns>True when everything is ok.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.ValidationInterruptedException">
            <summary>
            Exception that marks that the validation of an class hierarchy has been interrupted. This shouldn't be handled as an error.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.MetadataStructureValidator">
            <summary>
            Validation of Vault.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.MetadataStructureValidator.ReferenceEqualityComparer">
            <summary>
            Comparer object for comparing object references.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.ReferenceEqualityComparer.Equals(System.Object,System.Object)">
            <summary>
            Compares the reference equality of two objects.
            </summary>
            <param name="lhs">The first parameter.</param>
            <param name="rhs">The second parameter</param>
            <returns>True if the references are equal.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.ReferenceEqualityComparer.GetHashCode(System.Object)">
            <summary>
            Returns the hash code for the object.
            </summary>
            <param name="obj">Object to get the hash code for.</param>
            <returns>Hash code.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.MetadataStructureValidator.TemporaryConfiguration">
            <summary>
            A dummy class for enabling the ValidateItem call with just the configuration id string.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.TemporaryConfiguration.#ctor(System.Resources.ResourceManager)">
            <summary>
            Constructor.
            </summary>
            <param name="resourceManager">The resource manager object that is associated with this configuration. Can be null.</param>
        </member>
        <member name="P:MFiles.VAF.Configuration.MetadataStructureValidator.TemporaryConfiguration.ConfigurationId">
            <summary>
            The ID of the configuration.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MetadataStructureValidator.TemporaryConfiguration.ResourceManager">
            <summary>
            Returns the resource manager object that is associated with this configuration. Can be null.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.TemporaryConfiguration.Valid">
            <summary>
            Method for resolving if the configuration is valid.
            </summary>
            <returns>True if the configuration is valid.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.ValidateItem(MFilesAPI.Vault,System.String,System.Object,MFiles.VAF.Configuration.ValidationResultBase,System.Reflection.Assembly[],System.Int32)">
            <summary>
            Validate item with its children. Can validate static and instance objects.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="configurationId">The id of the configuration that is being validated.</param>
            <param name="item">The validated item "value". To validate static structure use: <c>typeof(somestatic)</c></param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <param name="level">Hierarchy level limiter. Number of levels how deep to check. Set only for dev reasons.</param>
            <param name="containingAssemblies">Set of assemblies that are allowed to contain the validated items. Can be null in which case the set defaults to the assembly that contains the item.</param>
            <returns>True when everything is ok.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.ValidateItem(MFilesAPI.Vault,System.String,System.Object,MFiles.VAF.Configuration.ValidationResultBase,System.Resources.ResourceManager,System.Reflection.Assembly[],System.Int32)">
            <summary>
            Validate item with its children. Can validate static and instance objects.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="configurationId">The id of the configuration that is being validated.</param>
            <param name="item">The validated item "value". To validate static structure use: <c>typeof(somestatic)</c></param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <param name="resourceManager">The resource manager object that contains needed resources for validating the given item.</param>
            <param name="level">Hierarchy level limiter. Number of levels how deep to check. Set only for dev reasons.</param>
            <param name="containingAssemblies">Set of assemblies that are allowed to contain the validated items. Can be null in which case the set defaults to the assembly that contains the item.</param>
            <returns>True when everything is ok.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.ValidateItem(MFilesAPI.Vault,MFiles.VAF.Configuration.IConfiguration,System.Object,MFiles.VAF.Configuration.ValidationResultBase,System.Reflection.Assembly[],System.Int32)">
            <summary>
            Validate item with its children. Can validate static and instance objects.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="item">The validated item "value". To validate static structure use: <c>typeof(somestatic)</c></param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <param name="level">Hierarchy level limiter. Number of levels how deep to check. Set only for dev reasons.</param>
            <param name="containingAssemblies">Set of assemblies that are allowed to contain the validated items. Can be null in which case the set defaults to the assembly that contains the item.</param>
            <returns>True when everything is ok.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.ValidateItemInternal(MFilesAPI.Vault,MFiles.VAF.Configuration.IConfiguration,System.Object,MFiles.VAF.Configuration.ValidationResultBase,System.Object,System.Reflection.MemberInfo,System.Int32,System.Reflection.Assembly[],System.Collections.Generic.HashSet{System.Object})">
            <summary>
            Validate item with its children. Can validate static and instance objects.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="item">The validated item "value". To validate static structure use: <c>typeof(somestatic)</c></param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <param name="parent">Parent object of item. Can be null.</param>
            <param name="member">The member in which this item is, can be null, and usually is.</param>
            <param name="level">Hierarchy level limiter. Number of levels how deep to check. Set only for dev reasons.</param>
            <param name="containingAssemblies">Set of assemblies that are allowed to contain the validated items.</param>
            <param name="handledItems">Collection of items that have already been validated.</param>
            <returns>True when everything is ok.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.CheckAndProcessDeprecatedMember(MFiles.VAF.Configuration.IConfiguration,System.Object,System.Reflection.MemberInfo,MFiles.VAF.Configuration.ValidationResultBase,System.Boolean@)">
            <summary>
            Checks and sets an error if a deprecated member has been found to have a value. Processes the value assignment to the replacement member.
            </summary>
            <param name="configuration">The configuration object.</param>
            <param name="item">The item to validate.</param>
            <param name="childMember">The child member info.</param>
            <param name="validationResult">The validation result to populate.</param>
            <param name="failed">Reference to the boolean that holds the validity value.</param>
        </member>
        <member name="F:MFiles.VAF.Configuration.MetadataStructureValidator.unacceptableTypes">
            <summary>
            List of types which should not be validated and traversed into.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.GetValue(System.Object,System.Object)">
            <summary>
            Get value of obj, that is member of mother.
            </summary>
            <param name="obj">Any object, can be field or property or type ..</param>
            <param name="parentObj">Instance containing the obj, can be instance or Type.</param>
            <returns>Extracted value, or null.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.Items(System.Object)">
            <summary>
            Return items in the obj as list.
            </summary>
            <param name="obj">Object to extract the values from.</param>
            <returns>Collection of extracted items.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.GetChildren(System.Object)">
            <summary>
            Get first level of children of the target object.
            Returns as members of the o, as FieldInfo or PropertyInfo.
            </summary>
            <param name="target">Target object to extract the child member info values from.</param>
            <returns>Collection of child member info objects.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.GetIdentifier(MFilesAPI.Vault,System.Object,MFiles.VAF.Configuration.VaultElementReferenceAttribute)">
            <summary>
            Return resolved reference for the object.
            </summary>
            <param name="vault">The vault.</param>
            <param name="reference">Reference to object of validation.</param>
            <param name="attribute">The attribute from which the reference is resolved.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.GetReferenceAsIdentifier(System.Object,MFiles.VAF.Configuration.VaultElementReferenceAttribute)">
            <summary>
            Return value of given reference and handle a few special cases.
            </summary>
            <param name="reference">Reference.</param>
            <param name="attribute">Attribute of the reference.</param>
            <returns>Reference as MFIdentifier.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.IsValid(MFilesAPI.Vault,MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFWorkflowAttribute,System.Object,System.Object,MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Check the validity of Workflow reference and its states in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="attribute">The attribute that contains the validation rules.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.IsValid(MFilesAPI.Vault,MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFStateAttribute,System.Object,System.Object,MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="attribute">The attribute that contains the validation rules.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param> 
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.IsValid(MFilesAPI.Vault,MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFViewAttribute,System.Object,System.Object,MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="attribute">The attribute that contains the validation rules.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.IsValid(MFilesAPI.Vault,MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFValueListAttribute,System.Object,System.Object,MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="attribute">The attribute that contains the validation rules.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.IsValid(MFilesAPI.Vault,MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFValueListItemAttribute,System.Object,System.Object,MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="attribute">The attribute that contains the validation rules.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation result that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.IsValid(MFilesAPI.Vault,MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFUserGroupAttribute,System.Object,System.Object,MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="attribute">The attribute that contains the validation rules.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.IsValid(MFilesAPI.Vault,MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFSkipAttribute,System.Object,System.Object,MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="attribute">The attribute that contains the validation rules.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.TryGetPropertyDefAdmin(MFilesAPI.Vault,System.Int32,MFilesAPI.PropertyDefAdmin@)">
            <summary>
            Attempts to get the property def admin for the passed property def id.
            Does not expose any potential errors in the resolution. Returns false if resolution fails.
            </summary>
            <param name="vault">Vault connection.</param>
            <param name="propertyDefId">Property def id to resolve.</param>
            <param name="propDefAdmin">The resulting <see cref="T:MFilesAPI.PropertyDefAdmin"/> object ( or null )</param>
            <returns>True when the property def was resolved.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.IsValid(MFilesAPI.Vault,MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFPropertyDefAttribute,System.Object,System.Object,MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="attribute">The attribute that contains the validation rules.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.IsValid(MFilesAPI.Vault,MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFObjTypeAttribute,System.Object,System.Object,MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="attribute">The attribute that contains the validation rules.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.IsValid(MFilesAPI.Vault,MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFObjectAttribute,System.Object,System.Object,MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="attribute">The attribute that contains the validation rules.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.IsValid(MFilesAPI.Vault,MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFNamedACLAttribute,System.Object,System.Object,MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="attribute">The attribute that contains the validation rules.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.IsValid(MFilesAPI.Vault,MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFClassGroupAttribute,System.Object,System.Object,MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="attribute">The attribute that contains the validation rules.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.IsValid(MFilesAPI.Vault,MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFClassAttribute,System.Object,System.Object,MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="attribute">The attribute that contains the validation rules.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.IsValid(MFilesAPI.Vault,MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFAssociatedPropertyAttribute,System.Object,System.Object,MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="attribute">The attribute that contains the validation rules.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.IsValid(MFilesAPI.Vault,MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFStateTransitionAttribute,System.Object,System.Object,MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="attribute">The attribute that contains the validation rules.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.IsValid(MFilesAPI.Vault,MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.IJsonConfEditorAttr,System.Object,System.Object,MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Check the validity of reference in the vault.
            </summary>
            <param name="vault">Vault in which to check.</param>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="attribute">The attribute that contains the validation rules.</param>
            <param name="reference">Reference to object to validate.</param>
            <param name="parent">Parent of the object reference. Can be null.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
            <returns>Returns true if the validation succeeded.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MetadataStructureValidator.GetMemberLabel(System.Reflection.MemberInfo,System.Resources.ResourceManager)">
            <summary>
            Tries to resolve a label or localized label for a member, and falls back
            to the member's dataMember name if it can't find a label, and then the
            member name if that isn't available.
            </summary>
            <param name="member">The member to get the label of.</param>
            <param name="resourceManager">The resource manager to localize member labels with.</param>
            <returns>The best label found.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFAssociatedPropertyAttribute">
            <summary>
            Associated Property Definition.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFAssociatedPropertyAttribute.Class">
            <summary>
            Reference (ID, GUID, alias) to the class type this property must be associated to.
            Not needed if nested under MFClass object.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFAssociatedPropertyAttribute.RequiredState">
            <summary>
            Tri-state value of the associations ValueRequired
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFAssociatedPropertyAttribute.RequiredState.Yes">
            <summary>
            Must be Required.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFAssociatedPropertyAttribute.RequiredState.No">
            <summary>
            Must not be Required 
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFAssociatedPropertyAttribute.RequiredState.Any">
            <summary>
            Can be required or not.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFAssociatedPropertyAttribute.ValueRequired">
            <summary>
            Is property required property of the class.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFAssociatedPropertyAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFAssociatedPropertyAttribute.ToString">
            <summary>
            Customized String representation with attributes.
            </summary>
            <returns>"MFAssociatedProperty()"</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFClassAttribute">
            <summary>
            Class object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFClassAttribute.ObjectType">
            <summary>
            Object type reference this class should be able to be assigned to.
            Can be set manually if the ObjectType is not available as member of this class object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFClassAttribute.AssociatedProperties">
            <summary>
            PropertyDef references this class should be associated with, with Required flag false.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFClassAttribute.RequiredAssociatedProperties">
            <summary>
            PropertyDef references this class should be associated with, with Required flag true.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFClassAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFClassGroupAttribute">
            <summary>
            ClassGroup object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFClassGroupAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFDeprecatedAttribute">
            <summary>
            Attribute that specifies if a configuration key is deprecated.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFDeprecatedAttribute.#ctor">
            <summary>
            Construtor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFDeprecatedAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="isError">True if the use of the configuration key should be an error and prevent the use of the configuration.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFDeprecatedAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The error message to use if the configuration contains a value for this key.</param>
            <param name="isError">True if the use of the configuration key should be an error and prevent the use of the module.</param>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFDeprecatedAttribute.IsError">
            <summary>
            True if the use of the configuration key should be an error and prevent the use of the configuration.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFDeprecatedAttribute.Message">
            <summary>
            The error message about deprecated key.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFDeprecatedAttribute.MessageResourceId">
            <summary>
            The resource id of the error message about the deprecated key. This is used instead of the Message if specified.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFDeprecatedAttribute.Replacement">
            <summary>
            The name of the replacement configuration member.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFIdentifierFormatConstants">
            <summary>
            Format and regex strings used by MFIdentifier.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFIdentifierFormatConstants.ObjIDFormat">
            <summary>
            Format string for ObjID, "(0-1)"
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFIdentifierFormatConstants.ObjIDRegEx">
            <summary>
            Regex matcher for ObjID.
            Supports negative pseudo-id values.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFIdentifierFormatConstants.ObjVerFormat">
            <summary>
            Format string for ObjVer, "(0-1-2)"
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFIdentifierFormatConstants.ObjVerRegEx">
            <summary>
            Regex matcher for ObjVer.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFIdentifier">
            <summary>
            Identification object type, that can be set to string and int.
            Implicit conversion to integer, explicit to alias string.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFIdentifier.BuiltInDocumentClass">
            <summary>
            Built in document class ids.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFIdentifier.BuiltInProperties">
            <summary>
            Built in property def ids.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFIdentifier.BuiltInObjectClasses">
            <summary>
            Built in object class ids.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFIdentifier.BuiltInObjTypes">
            <summary>
            Built in object type ids.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFIdentifier.BuiltInValueLists">
            <summary>
            Built in value list ids.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFIdentifier.BuiltInUserGroups">
            <summary>
            Built in user group ids.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFIdentifier.BuiltInViews">
            <summary>
            Built in view ids.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFIdentifier.Alias">
            <summary>
            Alias string.
            Setting this will clear the resolved ID value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFIdentifier.ID">
            <summary>
            ID integer.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFIdentifier.GUID">
            <summary>
            Alias for the Guid member.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFIdentifier.Guid">
            <summary>
            GUID if original string value was valid GUID, else empty string.
            AsOfNow the Alias will also return valid GUID, this might change in the future.
            </summary>
            <remarks>Internally GUID is not any different from Alias.</remarks>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFIdentifier.ValueList">
            <summary>
            The value list related to the resolved id (if relevant)
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFIdentifier.ObjID">
            <summary>
            The ObjID of the item.
            Only relevant for ValueListItems and ObjIDs.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFIdentifier.alias">
            <summary>
            Internal field of Alias string.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFIdentifier.originalID">
            <summary>
            Internal version of original ID value, not the resolved one.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.Equals(MFiles.VAF.Configuration.MFIdentifier)">
            <summary>
            Equality of two MFIdentifiers.
            For resolved identifiers, type and ID must match.
            If either one is unresolved, aliases or original ids must match.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.Equals(System.Object)">
            <summary>
            Equality with any other object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.GetHashCode">
            <summary>
            Get Hash Code.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFIdentifier.IsEmpty">
            <summary>
            Indicates if the identifier is not set, or set to empty.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFIdentifier.IsResolved">
            <summary>
            Indicates if the set identifier is already resolved.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFIdentifier.IsGuid">
            <summary>
            Indicates if the set identifier is valid GUID format.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFIdentifier.IsObjVer">
            <summary>
            Indicates if the identifier is valid ObjVer format.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFIdentifier.IsObjID">
            <summary>
            Indicates if the identifier is valid ObjID format.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFIdentifier.IsIDAvailable">
            <summary>
            Indicates if there is a valid ID value available (even if it wasn't resolved).
            Returns <c>true</c> if the id has been resolved, or if the identifier was set
            with an id or ObjID and the id isn't considered unresolved (-1).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFIdentifier.UnsafeID">
            <summary>
            Returns an ID value if available (even if it wasn't resolved).
            The ID is available if it has been resolved, or if the identifier was set
            with an id or ObjID and the id isn't considered unresolved (-1).
            It is unsafe because it hasn't necessary been resolved (verified to exist) in the current vault.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.ShouldSerializeAlias">
            <summary>
            Method deciding should we include Alias into serialization output.
            Yes when we have an alias.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.ShouldSerializeID">
            <summary>
            Method deciding should we include ID into serialization output.
            Yes only when we dont have an alias.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.SetAsID">
            <summary>
            Indicates whether the MFIdentifier was intially set as an id.
            Allows serialization to match deserialized values, or to skip resolution.
            </summary>
            <returns></returns>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFIdentifier.resolvedOnce">
            <summary>
            Additional internal flag for Resolved state.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFIdentifier.Resolved">
            <summary>
            Is this identifier is resolved to valid ID. Use IsResolved.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFIdentifier.Empty">
            <summary>
            Is this MFIdentifier empty == unset value. Use IsEmpty.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFIdentifier.UnresolvedID">
            <summary>
            Value of unresolved ID used as "error-value" (for this structure type).
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier._Resolve(MFilesAPI.Vault)">
            <summary>
            Internal resolving method.
            </summary>
            <param name="vault">The vault where to resolve.</param>
            <returns>true if handled, false is nothing done.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.Resolve(MFilesAPI.Vault,System.Type,System.Int32,System.Boolean)">
            <summary>
            Update this MFIdentifier to contain resolved ID of the alias, if it is not already resolved.
            Returns itself to allow command chaining.
            </summary>
            <param name="vault">The vault where to resolve.</param>
            <param name="targetType">Type of the object</param>
            <param name="valueList">The value list if resolving ValueListItems or ObjIDs</param>
            <param name="forceRefresh">Forces re-resolution if the identifier has already been resolved.</param>
            <returns>this MFIdentifier</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.Resolve(MFilesAPI.Vault,System.Type,System.Boolean)">
            <summary>
            Update this MFIdentifier to contain resolved ID of the alias, if it is not already resolved.
            Returns itself to allow command chaining.
            </summary>
            <param name="vault">The vault where to resolve.</param>
            <param name="targetType">Type of the object</param>
            <param name="forceRefresh">Forces re-resolution if the identifier has already been resolved.</param>
            <returns>this MFIdentifier</returns>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFIdentifier.ResolvedType">
            <summary>
            The type which the identifier was resolved as.
            Null if the identifier is not resolved.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFIdentifier.type">
            <summary>
            Last used target type.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFIdentifier.SetAsType">
            <summary>
            Types of values set into MFIdentifier.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFIdentifier.SetAsType.Unset">
            <summary>
            The content is unset.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFIdentifier.SetAsType.Alias">
            <summary>
            The content is set as alias.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFIdentifier.SetAsType.ID">
            <summary>
            The content is set as ID.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFIdentifier.SetAsType.Guid">
            <summary>
            The content is set as Guid.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFIdentifier.SetAsType.ObjID">
            <summary>
            The content is set as ObjID.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFIdentifier.SetAs">
            <summary>
            Internal information keeping track which type of value was set into this identifier.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.#ctor(System.Object)">
            <summary>
            Constructor to unknown any type object.
            </summary>
            <param name="source">Source data object of many type.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.#ctor(System.Int32)">
            <summary>
            Constructor with known integer ID value.
            </summary>
            <param name="id">Known ID value.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.#ctor(System.String)">
            <summary>
            Constructor with known string value.
            </summary>
            <param name="str">Known alias string.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.#ctor(MFilesAPI.ObjID)">
            <summary>
            Constructor for ObjIDs.
            </summary>
            <param name="objID">ObjId.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.op_Implicit(MFiles.VAF.Configuration.MFIdentifier)~System.Int32">
            <summary>
            Implicit conversion to int identifier, allowing direct use in place of int.
            </summary>
            <param name="identifier">The MFIdentifier to convert.</param>
            <returns>ID</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.op_Explicit(MFiles.VAF.Configuration.MFIdentifier)~System.String">
            <summary>
            Original value string value can be got by explicit request.
            Allowing conversion and assignment into string.
            <c>string s = (string)SomeIdent;</c>
            If only ID number available, returns it as a string.
            </summary>
            <param name="identifier">The MFIdentifier to convert.</param>
            <returns>The alias</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.op_Implicit(MFilesAPI.MFBuiltInObjectType)~MFiles.VAF.Configuration.MFIdentifier">
            <summary>
            Implicit cast from M-Files enum to identifier.
            </summary>
            <param name="objType">Enum reference.</param>
            <returns>MFIdentifier for the reference.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.op_Implicit(MFilesAPI.MFBuiltInObjectClass)~MFiles.VAF.Configuration.MFIdentifier">
            <summary>
            Implicit cast from M-Files enum to identifier.
            </summary>
            <param name="objClass">Enum reference.</param>
            <returns>MFIdentifier for the reference.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.op_Implicit(MFilesAPI.MFBuiltInDocumentClass)~MFiles.VAF.Configuration.MFIdentifier">
            <summary>
            Implicit cast from M-Files enum to identifier.
            </summary>
            <param name="docClass">Enum reference.</param>
            <returns>MFIdentifier for the reference.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.op_Implicit(MFilesAPI.MFBuiltInPropertyDef)~MFiles.VAF.Configuration.MFIdentifier">
            <summary>
            Implicit cast from M-Files enum to identifier.
            </summary>
            <param name="propDef">Enum reference.</param>
            <returns>MFIdentifier for the reference.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.op_Implicit(MFilesAPI.MFBuiltInUserGroup)~MFiles.VAF.Configuration.MFIdentifier">
            <summary>
            Implicit cast from M-Files enum to identifier.
            </summary>
            <param name="userGroup">Enum reference.</param>
            <returns>MFIdentifier for the reference.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.op_Implicit(MFilesAPI.MFBuiltInValueList)~MFiles.VAF.Configuration.MFIdentifier">
            <summary>
            Implicit cast from M-Files enum to identifier.
            </summary>
            <param name="valueList">Enum reference.</param>
            <returns>MFIdentifier for the reference.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.op_Implicit(MFilesAPI.MFBuiltInView)~MFiles.VAF.Configuration.MFIdentifier">
            <summary>
            Implicit cast from M-Files enum to identifier.
            </summary>
            <param name="view">Enum reference.</param>
            <returns>MFIdentifier for the reference.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.Set(System.Object)">
            <summary>
            Helper function able to set the identifier value to almost any object type.
            Accepts MFIdentifier, string, int, enum, and other that cast to string.
            Returns itself to allow command chaining.
            </summary>
            <remarks>Note that using with integer like object will clear the alias, unlike setting the .ID directly.</remarks>
            <param name="anyObject">Source of any type.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.SetStr(System.String)">
            <summary>
            Set the value to string value, handles also string containing integer.
            </summary>
            <param name="value">String value to set.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.SetInt(System.Int32)">
            <summary>
            Set the value to integer ID.
            </summary>
            <param name="value">Numeric value to set.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.ToString">
            <summary>
            Returns this instance of Alias value, if not avail, returns string of ID.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.op_Implicit(System.String)~MFiles.VAF.Configuration.MFIdentifier">
            <summary>
            Implicit conversion of string to MFIdentifier.
            Allowing: <c>MFIdentifier x = "string";</c>
            </summary>
            <param name="str">Value to convert to MFIdentifier.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.op_Implicit(System.Int32)~MFiles.VAF.Configuration.MFIdentifier">
            <summary>
            Implicit conversion of int to Ident, allowing: <c>MFIdentifier x = 109;</c>
            </summary>
            <param name="id">Value to convert to MFIdentifier.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.op_Implicit(System.Int64)~MFiles.VAF.Configuration.MFIdentifier">
            <summary>
            Implicit conversion of long int to Ident, allowing: <c>MFIdentifier x = 109;</c>
            </summary>
            <param name="id">Value to convert to MFIdentifier.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.IsNullOrEmpty(MFiles.VAF.Configuration.MFIdentifier)">
            <summary>
            Indicates whether specified MFIdentifier is null or empty.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.IsNullOrUnresolved(MFiles.VAF.Configuration.MFIdentifier)">
            <summary>
            Indicates whether specified MFIdentifier is null or empty or not Resolved.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.IsValidGuid(System.String)">
            <summary>
            Indicates whether the passed string is a valid M-Files formatted GUID.
            
            {00000000-0000-0000-0000-000000000000}
            
            </summary>
            <param name="guid">A guid string.</param>
            <returns>True if the string has the correct format, false otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.IsObjIDString(System.String)">
            <summary>
            Indicates if the passed string matches a valid ObjID format.
            </summary>
            <param name="objIDString">A string representation of an ObjID</param>
            <returns>True if the string has the correct format, false otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.IsObjVerString(System.String)">
            <summary>
            Indicates if the passed string matches a valid ObjVer format.
            </summary>
            <param name="objVerString">A string representation of an ObjVer.</param>
            <returns>True if the string has the correct format, false otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.ParseObjIDString(System.String)">
            <summary>
            Parses a string into an ObjID object.
            </summary>
            <param name="objIDString">A string representation of an ObjID.</param>
            <returns>The corresponding ObjID object</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifier.ResolveID(MFilesAPI.Vault,System.Type,System.Object)">
            <summary>
            Resolves the id of a vault element by reference.
            </summary>
            <param name="vault">The vault in which the element is defined.</param>
            <param name="type">M-Files API type of the element to resolve.</param>
            <param name="reference">
             Identifier can be:
            	- int (ID of the element)
            	- string (GUID, ID or Alias of the element)
            	- GUID (GUID of the element)
            	- enum (ID of the element)
            </param>
            <returns>The id of the element, the int value of the reference, or -1 if reference not resolved.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFIdentifier.LookupID">
            <summary>
            Delegate to lookup an id with an alias or guid.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="alias">The alias that should be resolved into the id.</param>
            <returns>The id of the metadata structure element.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFIdentifier.LookupIDID">
            <summary>
            Delegate to lookup an id with an id. 
            </summary>
            <param name="vault">The vault object.</param>
            <param name="id">The id that should be resolved into the id.</param>
            <returns>The id of the metadata structure element.</returns>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFIdentifier.VaultElementFinder.FromAlias">
            <summary>
            A delegate that will lookup an element by alias.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFIdentifier.VaultElementFinder.FromGuid">
            <summary>
            A delegate that will lookup an element by GUID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFIdentifier.VaultElementFinder.FromID">
            <summary>
            A delegate that will lookup/verify an element by ID.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFIdentifierJsonConverter">
            <summary>
            JSON converter for MFIdentifier for serialization purposes.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifierJsonConverter.CanConvert(System.Type)">
            <summary>
            Can the object be converted with this.
            </summary>
            <param name="objectType">Type to convert.</param>
            <returns>True if the type can be converted.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifierJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serialize MFIdentifier as JSON.
            </summary>
            <param name="writer">The JSON writer.</param>
            <param name="value">The value to write.</param>
            <param name="serializer">The JSON serializer.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFIdentifierJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Read JSON into MFIdentifier.
            </summary>
            <param name="reader">The JSON reader.</param>
            <param name="objectType">The type to deserialize into.</param>
            <param name="existingValue">The value.</param>
            <param name="serializer">The JSON serializer.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonAdaptor.ExpressionJA">
            <summary>
            JSON compatible adaptor for the MFilesAPI Expression type.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.ExpressionJA.FullTextSearchFlags">
            <summary>
            Maps to Expression's DataAnyFieldFTSFlags Property.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.ExpressionJA.FileType">
            <summary>
            Maps to Expression's DataFileValueType Property.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.ExpressionJA.SegmentSize">
            <summary>
            Maps to Expression's DataObjectIDSegmentSegmentSize Property.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.ExpressionJA.PermissionsType">
            <summary>
            Maps to Expression's DataPermissionsType Property.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.ExpressionJA.DataFunction">
            <summary>
            Maps to Expression's DataPropertyValueDataFunction, DataStatusValueDataFunction, DataTypedValueDataFunction Property.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.ExpressionJA.ParentChildBehavior">
            <summary>
            Maps to Expression's DataPropertyValueParentChildBehavior, DataTypedValueParentChildBehavior Property.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.ExpressionJA.PropertyDef">
            <summary>
            Maps to Expression's DataPropertyValuePropertyDef Property.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.ExpressionJA.StatusType">
            <summary>
            Maps to Expression's DataStatusValueType Property.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.ExpressionJA.DataType">
            <summary>
            Maps to Expression's DataTypedValueDatatype Property.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.ExpressionJA.ValueList">
            <summary>
            Maps to Expression's DataTypedValueValueList Property.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.ExpressionJA.IndirectionLevels">
            <summary>
            Maps to Expression's IndirectionLevels Property.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.ExpressionJA.Type">
            <summary>
            Maps to Expression's Type Property.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.ExpressionJA.#ctor">
            <summary>
            Simple Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.ExpressionJA.#ctor(MFilesAPI.Expression)">
            <summary>
            Constructor that initializes itself with an existing api object.
            </summary>
            <param name="expression">An api object instance to initailize this object with.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.ExpressionJA.FromJson(System.String)">
            <summary>
            Creates an instance from a json representation.
            </summary>
            <param name="json">The json representation of the object.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.ExpressionJA.LoadApiObject(MFilesAPI.Expression)">
            <summary>
            (Re-)Initializes this adaptor object to be the equivilent of the passed API object.
            </summary>
            <param name="expression">The API object used to set the values of this object.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.ExpressionJA.ToApiObject(MFilesAPI.Vault)">
            <summary>
            Converts this JsonCompatible object to an equivalent API object. 
            </summary>
            <param name="vault">A vault instance used to resolve aliases or guids referenced in the adaptor object.</param>
            <returns>An API object instance.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.ExpressionJA.GetDataFunctionCallForExpression(MFilesAPI.MFDataFunction)">
            <summary>
            Helper method for converting an MFDataFunction into a DataFunctionCall.
            </summary>
            <param name="dataFunction">The dataFunction to convert.</param>
            <returns>The equivalent DataFunctionCall.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonAdaptor.FullTextSearchFlagsJA">
            <summary>
            JSON adaptor object for <see cref="T:MFilesAPI.MFFullTextSearchFlags"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.FullTextSearchFlagsJA.Stemming">
            <summary>
            Maps to <see cref="F:MFilesAPI.MFFullTextSearchFlags.MFFullTextSearchFlagsStemming"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.FullTextSearchFlagsJA.AllWords">
            <summary>
            Maps to <see cref="F:MFilesAPI.MFFullTextSearchFlags.MFFullTextSearchFlagsTypeAllWords"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.FullTextSearchFlagsJA.AnyWords">
            <summary>
            Maps to <see cref="F:MFilesAPI.MFFullTextSearchFlags.MFFullTextSearchFlagsTypeAnyWords"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.FullTextSearchFlagsJA.LookInFileData">
            <summary>
            Maps to <see cref="F:MFilesAPI.MFFullTextSearchFlags.MFFullTextSearchFlagsLookInFileData"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.FullTextSearchFlagsJA.LookInMetaData">
            <summary>
            Maps to <see cref="F:MFilesAPI.MFFullTextSearchFlags.MFFullTextSearchFlagsLookInMetaData"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.FullTextSearchFlagsJA.Value">
            <summary>
            Underlying "wrapped" value of the object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.FullTextSearchFlagsJA.#ctor">
            <summary>
            Simple constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.FullTextSearchFlagsJA.#ctor(MFilesAPI.MFFullTextSearchFlags)">
            <summary>
            Constructor that initializes itself with an existing api object.
            </summary>
            <param name="fullTextSearchFlags">An api object instance to initailize this object with.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.FullTextSearchFlagsJA.op_Implicit(MFilesAPI.MFFullTextSearchFlags)~MFiles.VAF.Configuration.JsonAdaptor.FullTextSearchFlagsJA">
            <summary>
            Converts a <see cref="T:MFilesAPI.MFFullTextSearchFlags"/> into <see cref="T:MFiles.VAF.Configuration.JsonAdaptor.FullTextSearchFlagsJA"/>.
            </summary>
            <param name="fullTextSearchFlags">API object.</param>
            <returns>Json adaptor.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.FullTextSearchFlagsJA.op_Implicit(MFiles.VAF.Configuration.JsonAdaptor.FullTextSearchFlagsJA)~MFilesAPI.MFFullTextSearchFlags">
            <summary>
            Converts a <see cref="T:MFiles.VAF.Configuration.JsonAdaptor.FullTextSearchFlagsJA"/> into <see cref="T:MFilesAPI.MFFullTextSearchFlags"/>.
            </summary>
            <param name="fullTextSearchFlags">Json adaptor.</param>
            <returns>API object.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.FullTextSearchFlagsJA.LoadApiObject(MFilesAPI.MFFullTextSearchFlags)">
            <summary>
            (Re-)Initializes this adaptor object to be the equivilent of the passed API object.
            </summary>
            <param name="fullTextSearchFlags">The API object used to set the values of this object.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.FullTextSearchFlagsJA.ToApiObject(MFilesAPI.Vault)">
            <summary>
            Converts this JsonCompatible object to an equivilent API object. 
            </summary>
            <param name="vault">A vault instance used to resolve aliases or guids referenced in the adaptor object.</param>
            <returns>An API object instance.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.FullTextSearchFlagsJA.UpdateFlag(MFilesAPI.MFFullTextSearchFlags,System.Boolean)">
            <summary>
            Updates the underlying flags value, setting or unsetting
            it based on the set param.
            </summary>
            <param name="flag">The flag to set or unset.</param>
            <param name="set"><c>True</c> to set the flag, <c>false</c> to unset it.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.FullTextSearchFlagsJA.IsFlagSet(MFilesAPI.MFFullTextSearchFlags)">
            <summary>
            Checks whether the object's underlying flags value has the specified flag.
            </summary>
            <param name="flag">The flag to check.</param>
            <returns><c>True</c> if the flag is set, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonAdaptor.IMFJsonAdaptor`1">
            <summary>
            Interface for implementing JSON compatible adaptors for MFilesAPI objects.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.IMFJsonAdaptor`1.LoadApiObject(`0)">
            <summary>
            (Re-)Initializes this adaptor object to be the equivalent of the passed API object.
            </summary>
            <param name="apiObject">The API object used to set the values of this object.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.IMFJsonAdaptor`1.ToApiObject(MFilesAPI.Vault)">
            <summary>
            Converts this JsonCompatible object to an equivalent API object. 
            </summary>
            <param name="vault">A vault instance used to resolve aliases or guids referenced in the adaptor object.</param>
            <returns>An API object instance.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.IMFJsonAdaptor`1.Validate(MFilesAPI.Vault,System.String)">
            <summary>
            Performs validation checks on the object and sub-objects and returns
            any findings.
            </summary>
            <param name="vault">The vault.</param>
            <param name="path">The path to assign to validation findings for this object.</param>
            <returns>A list of validation findings.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.IMFJsonAdaptor`1.ToJson(System.Boolean)">
            <summary>
            Serialize the object to a json string.
            </summary>
            <param name="format">Indicates if the json should be formatted with new lines and indentation.</param>
            <returns>JSON string.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor">
            <summary>
            Json adaptor for the item value in <see cref="T:MFilesAPI.Lookup"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.ObjType">
            <summary>
            A reference to an object type.
            Only available when <c><see cref="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.StructureType"/> = <see cref="F:MFilesAPI.MFMetadataStructureItem.MFMetadataStructureItemObjectType"/></c>
            Will not be serialized if unavailable.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.PropertyDef">
            <summary>
            A reference to a property def.
            Only available when <c><see cref="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.StructureType"/> = <see cref="F:MFilesAPI.MFMetadataStructureItem.MFMetadataStructureItemPropertyDef"/></c>
            Will not be serialized if unavailable.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.ObjectClass">
            <summary>
            A reference to a class.
            Only available when <c><see cref="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.StructureType"/> = <see cref="F:MFilesAPI.MFMetadataStructureItem.MFMetadataStructureItemClass"/></c>
            Will not be serialized if unavailable.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.Workflow">
            <summary>
            A reference to a workflow.
            Only available when <c><see cref="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.StructureType"/> = <see cref="F:MFilesAPI.MFMetadataStructureItem.MFMetadataStructureItemWorkflow"/></c>
            Will not be serialized if unavailable.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.State">
            <summary>
            A reference to a state.
            Only available when <c><see cref="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.StructureType"/> = <see cref="F:MFilesAPI.MFMetadataStructureItem.MFMetadataStructureItemState"/></c>
            Will not be serialized if unavailable.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.Transition">
            <summary>
            A reference to a state transition.
            Only available when <c><see cref="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.StructureType"/> = <see cref="F:MFilesAPI.MFMetadataStructureItem.MFMetadataStructureItemStateTransition"/></c>
            Will not be serialized if unavailable.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.NamedACL">
            <summary>
            A reference to a named ACL.
            Only available when <c><see cref="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.StructureType"/> = <see cref="F:MFilesAPI.MFMetadataStructureItem.MFMetadataStructureItemNamedACL"/></c>
            Will not be serialized if unavailable.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.UserGroup">
            <summary>
            A reference to a user group.
            Only available when <c><see cref="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.StructureType"/> = <see cref="F:MFilesAPI.MFMetadataStructureItem.MFMetadataStructureItemUserGroup"/></c>
            Will not be serialized if unavailable.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.User">
            <summary>
            A reference to a user.
            Only available when <c><see cref="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.StructureType"/> = <see cref="F:MFilesAPI.MFMetadataStructureItem.MFMetadataStructureItemUser"/></c>
            Will not be serialized if unavailable.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.ClassGroup">
            <summary>
            A reference to a class group.
            Only available when <c><see cref="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.StructureType"/> = <see cref="F:MFilesAPI.MFMetadataStructureItem.MFMetadataStructureItemClassGroup"/></c>
            Will not be serialized if unavailable.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.View">
            <summary>
            A reference to a view.
            Only available when <c><see cref="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.StructureType"/> = <see cref="F:MFilesAPI.MFMetadataStructureItem.MFMetadataStructureItemViewDef"/></c>
            Will not be serialized if unavailable.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.ValueListItem">
            <summary>
            A reference to a value list item.
            Only available when <c><see cref="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.StructureType"/> = <see cref="F:MFilesAPI.MFMetadataStructureItem.MFMetadataStructureItemValueListItem"/></c>
            Will not be serialized if unavailable.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.ObjID">
            <summary>
            Alias of <see cref="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.ValueListItem" />.
            Will never be serialized.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.ValueList">
            <summary>
            A reference to a value list.
            Only available when <c><see cref="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.StructureType"/> = <see cref="F:MFilesAPI.MFMetadataStructureItem.MFMetadataStructureItemValueList"/></c>
            Will not be serialized if unavailable.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.ID">
            <summary>
            A reference to a value of an unknow structure type.
            Only available when <c><see cref="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.StructureType"/> = <see cref="F:MFilesAPI.MFMetadataStructureItem.MFMetadataStructureItemNone"/></c>
            Will not be serialized if unavailable.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.Reference">
            <summary>
            The reference currently set in the object. Available regardless of <see cref="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.StructureType"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.StructureType">
            <summary>
            The type of structure item the current reference refers to.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.Type">
            <summary>
            The MFilesAPI type that the <see cref="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.StructureType"/> corresponds to used
            for resolving id's with <see cref="T:MFiles.VAF.Configuration.MFIdentifier"/>.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.#ctor">
            <summary>
            Simple Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.#ctor(MFiles.VAF.Configuration.MFIdentifier,MFilesAPI.MFMetadataStructureItem)">
            <summary>
            Constructor.
            </summary>
            <param name="reference">The reference.</param>
            <param name="structureType">The structure type of the reference.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.op_Implicit(System.Int32)~MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor">
            <summary>
            Converts a valuelist item id into a JsonLookupItemAdaptor.
            </summary>
            <param name="id">The id of the value list item.</param>
            <returns>The adapted id value.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.ResolveID(MFilesAPI.Vault,System.Boolean)">
            <summary>
            Resolve the id of the current reference.
            </summary>
            <param name="vault">The vault to resolve the reference in.</param>
            <param name="forceRefresh">Indicates whether resolution should be retried if the reference has already been resolved.</param>
            <returns>The resolved id of the reference.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.GetReference(MFilesAPI.MFMetadataStructureItem)">
            <summary>
            Gets the reference if it matches the passed type, otherwise null.
            </summary>
            <param name="structureType">The desired reference type.</param>
            <returns>The reference if it matches the passed type, otherwise null.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptor.SetReference(MFilesAPI.MFMetadataStructureItem,MFiles.VAF.Configuration.MFIdentifier)">
            <summary>
            Set this objects reference to the type and value passed.
            </summary>
            <param name="structureType">The reference value's structure type.</param>
            <param name="value">The reference value.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptorJsonConverter">
            <summary>
            JSON converter for MFIdentifier for serialization purposes.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptorJsonConverter.CanWrite">
            <summary>
            Indicates whether the converter can write (serialize) an object to json.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptorJsonConverter.CanConvert(System.Type)">
            <summary>
            Can the object be converted with this.
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptorJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serialize MFIdentifier as JSON.
            </summary>
            <param name="writer">The JSON writer.</param>
            <param name="value">The value. to write.</param>
            <param name="serializer">The JSON serializer.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.JsonLookupItemAdaptorJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Read JSON into MFIdentifier.
            </summary>
            <param name="reader">The JSON reader.</param>
            <param name="objectType">The type.</param>
            <param name="existingValue">The existing object.</param>
            <param name="serializer">The JSON serializer.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor">
            <summary>
            JSON adaptor for the underlying value in <see cref="T:MFilesAPI.TypedValue"/>.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty">
            <summary>
            The value properties that are serialized from this object based on the <see cref="T:MFilesAPI.MFDataType"/>.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty.Undefined">
            <summary>
            Unknown or uninitialized property/datatype.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty.Text">
            <summary>
            Property used for <see cref="F:MFilesAPI.MFDataType.MFDatatypeText"/> and <see cref="F:MFilesAPI.MFDataType.MFDatatypeMultiLineText"/>
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty.Boolean">
            <summary>
            Property used for <see cref="F:MFilesAPI.MFDataType.MFDatatypeBoolean"/>.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty.Integer">
            <summary>
            Property used for <see cref="F:MFilesAPI.MFDataType.MFDatatypeInteger"/> and <see cref="F:MFilesAPI.MFDataType.MFDatatypeInteger64"/>.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty.Float">
            <summary>
            Property used for <see cref="F:MFilesAPI.MFDataType.MFDatatypeFloating"/>.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty.Date">
            <summary>
            Property used for <see cref="F:MFilesAPI.MFDataType.MFDatatypeDate"/>.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty.Time">
            <summary>
            Property used for <see cref="F:MFilesAPI.MFDataType.MFDatatypeTime"/>.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty.Timestamp">
            <summary>
            Property used for <see cref="F:MFilesAPI.MFDataType.MFDatatypeTimestamp"/>.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty.Lookup">
            <summary>
            Property used for <see cref="F:MFilesAPI.MFDataType.MFDatatypeLookup"/>.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty.Lookups">
            <summary>
            Property used for <see cref="F:MFilesAPI.MFDataType.MFDatatypeMultiSelectLookup"/>.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty.Null">
            <summary>
            Used for any <see cref="T:MFilesAPI.MFDataType"/> when the value is null. Serialized to "isNull".
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.propsByValueType">
            <summary>
            Mapping between <see cref="T:MFilesAPI.MFDataType"/> values and <see cref="T:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty"/>
            indicating which property is serialized for a given <see cref="T:MFilesAPI.MFDataType"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.Value">
            <summary>
            The underlying value of the object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.IsNull">
            <summary>
            Indicates when the value is considered null.
            Only available when <c><see cref="T:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty"/> = <see cref="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty.Null"/></c>
            Will only be serialized if available, and in those cases, it is always set to <c>true</c>.
            
            Setting the value to <c>false</c> will have no effect on the object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.Boolean">
            <summary>
            Boolean value.
            Only available when <c><see cref="T:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty"/> = <see cref="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty.Boolean"/></c>
            Will only be serialized if available.
            
            Accepts <see cref="T:System.Boolean"/> and values that are implicitly cast to it.		
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.Text">
            <summary>
            Text value.
            Only available when <c><see cref="T:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty"/> = <see cref="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty.Text"/></c>
            Will only be serialized if available.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.Integer">
            <summary>
            Integer value.
            Only available when <c><see cref="T:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty"/> = <see cref="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty.Integer"/></c>
            Will only be serialized if available.
            
            Accepts <see cref="T:System.Int64"/> and values that are implicitly cast to it.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.Float">
            <summary>
            Float value.
            Only available when <c><see cref="T:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty"/> = <see cref="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty.Float"/></c>
            Will only be serialized if available.
            
            Accepts <see cref="T:System.Double"/> and values that are implicitly cast to it.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.Date">
            <summary>
            Date value.
            Only available (not null) when <c><see cref="T:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty"/> = <see cref="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty.Date"/></c>
            Will only be serialized if available.
            
            Accepts <see cref="T:System.DateTime"/> and strings that can be parsed to it.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.Time">
            <summary>
            Time value.
            Only available (not null) when <c><see cref="T:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty"/> = <see cref="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty.Time"/></c>
            Will only be serialized if available.
            
            Accepts <see cref="T:System.DateTime"/> and strings that can be parsed to it.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.Timestamp">
            <summary>
            Timestamp value.
            Only available (not null) when <c><see cref="T:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty"/> = <see cref="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty.Timestamp"/></c>
            Will only be serialized if available.
            
            Accepts <see cref="T:System.DateTime"/> and strings that can be parsed to it.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.Lookup">
            <summary>
            Lookup value.
            Only available (not null) when <c><see cref="T:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty"/> = <see cref="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty.Date"/></c>
            Will only be serialized if available.
            
            Accepts all types adaptable via <see cref="M:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.TryAdapt(System.Object,MFiles.VAF.Configuration.JsonAdaptor.LookupJA@)"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.Lookups">
            <summary>
            Lookups value.
            Only available (not null) when <c><see cref="T:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty"/> = <see cref="F:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.ValueProperty.Lookups"/></c>
            Will only be serialized if available.
            
            Accepts all types adaptable via <see cref="M:MFiles.VAF.Configuration.JsonAdaptor.LookupsJA.TryAdapt(System.Object,MFiles.VAF.Configuration.JsonAdaptor.LookupsJA@)"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.valueProperty">
            <summary>
            Indicates the property that will be serialized for the current value.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.#ctor">
            <summary>
            Simple Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.#ctor(MFilesAPI.MFDataType,System.Object)">
            <summary>
            Constructor that sets the value immediately.
            </summary>
            <param name="dataType">The datatype of the value.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.SetValue(MFilesAPI.MFDataType,System.Object)">
            <summary>
            Sets the object's underlying value with an explicit data type.
            </summary>
            <param name="dataType">The data type of the value being set.</param>
            <param name="value">The value being set.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.JsonValueAdaptor.AssertNotNull(System.Object)">
            <summary>
            Helper method to ensure the value being set is not null.
            </summary>
            <param name="value">The value being set.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonAdaptor.LookupJA">
            <summary>
            Json compatible adaptor for <see cref="T:MFilesAPI.Lookup"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.Deleted">
            <summary>
            Maps to <see cref="T:MFilesAPI.Lookup"/><c>.Deleted</c>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.DisplayID">
            <summary>
            Maps to <see cref="T:MFilesAPI.Lookup"/><c>.DisplayID</c>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.DisplayIDAvailable">
            <summary>
            Maps to <see cref="T:MFilesAPI.Lookup"/><c>.DisplayIDAvailable</c>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.DisplayValue">
            <summary>
            Maps to <see cref="T:MFilesAPI.Lookup"/><c>.DisplayValue</c>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.Hidden">
            <summary>
            Maps to <see cref="T:MFilesAPI.Lookup"/><c>.Hidden</c>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.Item">
            <summary>
            Maps to <see cref="T:MFilesAPI.Lookup"/><c>.Item</c>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.ItemGUID">
            <summary>
            Maps to <see cref="T:MFilesAPI.Lookup"/><c>.ItemGUID</c>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.ObjectFlags">
            <summary>
            Maps to <see cref="T:MFilesAPI.Lookup"/><c>.ObjectFlags</c>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.ObjectType">
            <summary>
            Maps to <see cref="T:MFilesAPI.Lookup"/><c>.ObjectType</c>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.Version">
            <summary>
            Maps to <see cref="T:MFilesAPI.Lookup"/><c>.Version</c>.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.#ctor">
            <summary>
            Simple Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.#ctor(MFilesAPI.Lookup)">
            <summary>
            Constructor that initializes itself with an existing api object.
            </summary>
            <param name="lookup">An api object instance to initailize this object with.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.#ctor(System.Int32)">
            <summary>
            Constructor that initializes itself with a lookup id.
            </summary>
            <param name="id">The lookup item id.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.#ctor(System.String)">
            <summary>
            Constructor that initializes itself with a lookup reference.
            </summary>
            <param name="reference">The lookup item reference.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.op_Implicit(System.Int32)~MFiles.VAF.Configuration.JsonAdaptor.LookupJA">
            <summary>
            Converts a valuelist item id into a LookupJA.
            </summary>
            <param name="id">The id of the value list item.</param>
            <returns>The adapted id value.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.op_Implicit(System.String)~MFiles.VAF.Configuration.JsonAdaptor.LookupJA">
            <summary>
            Converts a valuelist item reference into a LookupJA.
            </summary>
            <param name="reference">The id of the value list item.</param>
            <returns>The adapted id value.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.TryAdapt(System.Object,MFiles.VAF.Configuration.JsonAdaptor.LookupJA@)">
            <summary>
            Attempts to convert a value into a json adapted lookup.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="lookup">The created lookup (when the method succeeds). </param>
            <returns><c>True</c> if the conversion was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.LoadApiObject(MFilesAPI.Lookup)">
            <summary>
            (Re-)Initializes this adaptor object to be the equivalent of the passed API object.
            </summary>
            <param name="lookup">The API object used to set the values of this object.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.ToApiObject(MFilesAPI.Vault)">
            <summary>
            Converts this JsonCompatible object to an equivalent API object. 
            </summary>
            <param name="vault">A vault instance used to resolve aliases or guids referenced in the adaptor object.</param>
            <returns>An API object instance.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.ToApiObject(MFilesAPI.Vault,System.Boolean)">
            <summary>
            Converts this JsonCompatible object to an equivalent API object. 
            </summary>
            <param name="vault">A vault instance used to resolve aliases or guids referenced in the adaptor object.</param>
            <param name="negateGroups">For instances where user and group lookups are intermixed, the group values should be negated.</param>
            <returns>An API object instance.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.LookupJA.Validate(MFilesAPI.Vault,System.String)">
            <summary>
            Performs validation checks on the object and sub-objects and returns
            any findings.
            </summary>
            <param name="vault">The vault.</param>
            <param name="path">The path to assign to validation findings for this object.</param>
            <returns>A list of validation findings.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonAdaptor.LookupsJA">
            <summary>
            Json compatible adaptor for <see cref="T:MFilesAPI.Lookups"/>.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.LookupsJA.#ctor">
            <summary>
            Simple constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.LookupsJA.#ctor(MFilesAPI.Lookups)">
            <summary>
            Constructor that initializes itself with an existing api object.
            </summary>
            <param name="lookups">An api collection to initialize this object with.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.LookupsJA.TryAdapt(System.Object,MFiles.VAF.Configuration.JsonAdaptor.LookupsJA@)">
            <summary>
            Attempts to convert a value into a json adapted lookups.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="lookups">The created lookups (when the method succeeds). </param>
            <returns><c>True</c> if the conversion was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.LookupsJA.LoadApiObject(MFilesAPI.Lookups)">
            <summary>
            (Re-)Initializes this adaptor object to be the equivalent of the passed API object.
            </summary>
            <param name="lookups">The API object used to set the values of this object.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.LookupsJA.ToApiObject(MFilesAPI.Vault)">
            <summary>
            Converts this JsonCompatible object to an equivalent API object. 
            </summary>
            <param name="vault">A vault instance used to resolve aliases or guids referenced in the adaptor object.</param>
            <returns>An API object instance.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.LookupsJA.ToApiObject(MFilesAPI.Vault,System.Boolean)">
            <summary>
            Converts this JsonCompatible object to an equivalent API object. 
            </summary>
            <param name="vault">A vault instance used to resolve aliases or guids referenced in the adaptor object.</param>
            <param name="negateGroups">For instances where user and group lookups are intermixed, the group values should be negated.</param>
            <returns>An API object instance.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonAdaptor.MFEnumJsonConverter">
            <summary>
            Converts MFilesAPI enums to between their standard values and their custom json serialized forms.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonAdaptor.MFEnumJsonConverter.namesByTypeAndValue">
            <summary>
            Mapping of serializable names to enum values.
            Used to lookup the names when the value is known.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonAdaptor.MFEnumJsonConverter.valuesByTypeAndName">
            <summary>
            Mapping of enum values to serializable names.
            Used to lookup the values when the name is known.
            </summary>
            <remarks>
            Created at runtime from namesByValue.
            </remarks>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.MFEnumJsonConverter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.MFEnumJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.MFEnumJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.MFEnumJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.MFEnumJsonConverter.GetEnumName(System.Type,System.Enum)">
            <summary>
            Returns the serializable name of an enum value.
            </summary>
            <param name="enumType">The enum type.</param>
            <param name="value">The enum value.</param>
            <returns>JSON name.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.MFEnumJsonConverter.GetEnumValue(System.Type,System.String)">
            <summary>
            Returns the value of an enum by the serializable name.
            </summary>
            <param name="enumType">The enum type.</param>
            <param name="shortName">The JSON short name.</param>
            <returns>JSON name.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonAdaptor.MFJsonCollectionAdaptor`3">
            <summary>
            Abstract class implementing JSON compatible adaptors for MFilesAPI collections.
            </summary>
            <typeparam name="T">The api type with with this json adaptor is compatible.</typeparam>
            <typeparam name="IT">The item type which this collection contains.</typeparam>
            <typeparam name="TI">The item type which the adapted API type contains.</typeparam>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.MFJsonCollectionAdaptor`3.#ctor">
            <summary>
            Simple constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.MFJsonCollectionAdaptor`3.#ctor(`0)">
            <summary>
            Constructor that initializes itself with an existing api object.
            </summary>
            <param name="apiCollection">An api collection to initialize this object with.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.MFJsonCollectionAdaptor`3.LoadApiObject(`0)">
            <summary>
            (Re-)Initializes this adaptor object to be the equivalent of the passed API object.
            </summary>
            <param name="apiObject">The API object used to set the values of this object.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.MFJsonCollectionAdaptor`3.ToApiObject(MFilesAPI.Vault)">
            <summary>
            Converts this JsonCompatible object to an equivalent API object. 
            </summary>
            <param name="vault">A vault instance used to resolve aliases or guids referenced in the adaptor object.</param>
            <returns>An API object instance.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.MFJsonCollectionAdaptor`3.Validate(MFilesAPI.Vault,System.String)">
            <summary>
            Performs validation checks on the object and sub-objects and returns
            any findings.
            </summary>
            <param name="vault">The vault.</param>
            <param name="path">The path to assign to validation findings for this object.</param>
            <returns>A list of validation findings.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.MFJsonCollectionAdaptor`3.ToJson(System.Boolean)">
            <summary>
            Serialize the object to a json string.
            </summary>
            <param name="format">Indicates if the json should be formatted with new lines and indentation.</param>
            <returns>JSON string.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonAdaptor.MFJsonObjectAdaptor`1">
            <summary>
            Base abstract class for implementing JSON compatible adaptors for MFilesAPI objects.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.MFJsonObjectAdaptor`1.#ctor">
            <summary>
            Simple constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.MFJsonObjectAdaptor`1.#ctor(`0)">
            <summary>
            Constructor that initializes itself with an existing api object.
            </summary>
            <param name="apiObject">An api object instance to initailize this object with.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.MFJsonObjectAdaptor`1.LoadApiObject(`0)">
            <summary>
            (Re-)Initializes this adaptor object to be the equivalent of the passed API object.
            </summary>
            <param name="apiObject">The API object used to set the values of this object.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.MFJsonObjectAdaptor`1.ToApiObject(MFilesAPI.Vault)">
            <summary>
            Converts this JsonCompatible object to an equivalent API object.
            </summary>
            <param name="vault">A vault instance used to resolve aliases or guids referenced in the adaptor object.</param>
            <returns>An API object instance.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.MFJsonObjectAdaptor`1.Validate(MFilesAPI.Vault,System.String)">
            <summary>
            Performs validation checks on the object and sub-objects and returns
            any findings.
            </summary>
            <param name="vault">The vault.</param>
            <param name="path">The path to assign to validation findings for this object.</param>
            <returns>A list of validation findings.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.MFJsonObjectAdaptor`1.ToJson(System.Boolean)">
            <summary>
            Serialize the object to a json string.
            </summary>
            <param name="format">Indicates if the json should be formatted with new lines and indentation.</param>
            <returns>JSON string.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.MFJsonObjectAdaptor`1.ResolveID(MFiles.VAF.Configuration.MFIdentifier,System.Type,MFilesAPI.Vault)">
            <summary>
            Resolves the id of the of the identifier if the vault object is not null.
            </summary>
            <param name="mfId">The MFIdentifier to resolve.</param>
            <param name="type">The type to resolve the MFIdentifer as.</param>
            <param name="vault">The vault instance to use for MFIdentifer resolution.</param>
            <returns>The resolved id.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonAdaptor.PropertyDefOrObjectTypeJA">
            <summary>
            JSON compatible adaptor for the MFilesAPI PropertyDefOrObjectTypeJA type.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.PropertyDefOrObjectTypeJA.PropertyDef">
            <summary>
            Maps to the PropertyDefOrObjectType's ID property when IsPropertyDef = <c>true</c>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.PropertyDefOrObjectTypeJA.ObjType">
            <summary>
            Maps to the PropertyDefOrObjectType's ID property when IsPropertyDef = <c>false</c>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.PropertyDefOrObjectTypeJA.IsPropertyDef">
            <summary>
            Maps to the PropertyDefOrObjectType's PropertyDef property.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.PropertyDefOrObjectTypeJA.#ctor">
            <summary>
            Simple Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.PropertyDefOrObjectTypeJA.#ctor(MFilesAPI.PropertyDefOrObjectType)">
            <summary>
            Constructor that initializes itself with an existing api object.
            </summary>
            <param name="propertyDefOrObjectType">An api object instance to initialize this object with.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.PropertyDefOrObjectTypeJA.LoadApiObject(MFilesAPI.PropertyDefOrObjectType)">
            <summary>
            (Re-)Initializes this adaptor object to be the equivilent of the passed API object.
            </summary>
            <param name="propertyDefOrObjectType">The API object used to set the values of this object.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.PropertyDefOrObjectTypeJA.ToApiObject(MFilesAPI.Vault)">
            <summary>
            Converts this JsonCompatible object to an equivilent API object. 
            </summary>
            <param name="vault">A vault instance used to resolve aliases or guids referenced in the adaptor object.</param>
            <returns>An API object instance.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.PropertyDefOrObjectTypeJA.Validate(MFilesAPI.Vault,System.String)">
            <summary>
            Performs validation checks on the object and sub-objects and returns
            any findings.
            </summary>
            <param name="vault">The vault.</param>
            <param name="path">The path to assign to validation findings for this object.</param>
            <returns>A list of validation findings.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonAdaptor.PropertyDefOrObjectTypesJA">
            <summary>
            JSON compatible adaptor for <see cref="T:MFilesAPI.PropertyDefOrObjectTypes"/>.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.PropertyDefOrObjectTypesJA.#ctor">
            <summary>
            Simple constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.PropertyDefOrObjectTypesJA.#ctor(MFilesAPI.PropertyDefOrObjectTypes)">
            <summary>
            Constructor that initializes itself with an existing api object.
            </summary>
            <param name="propertyDefOrObjectTypes">An api collection to initialize this object with.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.PropertyDefOrObjectTypesJA.LoadApiObject(MFilesAPI.PropertyDefOrObjectTypes)">
            <summary>
            (Re-)Initializes this adaptor object to be the equivalent of the passed API object.
            </summary>
            <param name="propertyDefOrObjectTypes">The API object used to set the values of this object.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.PropertyDefOrObjectTypesJA.ToApiObject(MFilesAPI.Vault)">
            <summary>
            Converts this JsonCompatible object to an equivalent API object. 
            </summary>
            <param name="vault">A vault instance used to resolve aliases or guids referenced in the adaptor object.</param>
            <returns>An API object instance.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonAdaptor.SearchConditionJA">
            <summary>
            JSON compatible adaptor for the MFilesAPI SearchCondition type.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.SearchConditionJA.ConditionType">
            <summary>
            Maps to SearchCondition's ConditionType Property.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.SearchConditionJA.Expression">
            <summary>
            Maps to SearchCondition's Expression Property.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.SearchConditionJA.TypedValue">
            <summary>
            Maps to SearchCondition's TypedValue Property.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.SearchConditionJA.#ctor">
            <summary>
            Simple constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.SearchConditionJA.#ctor(MFilesAPI.SearchCondition)">
            <summary>
            Constructor that initializes itself with an existing api object.
            </summary>
            <param name="searchCondition">An api object instance to initialize this object with.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.SearchConditionJA.LoadApiObject(MFilesAPI.SearchCondition)">
            <summary>
            (Re-)Initializes this adaptor object to be the equivalent of the passed API object.
            </summary>
            <param name="searchCondition">The API object used to set the values of this object.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.SearchConditionJA.ToApiObject(MFilesAPI.Vault)">
            <summary>
            Converts this JsonCompatible object to an equivalent API object. 
            </summary>
            <param name="vault">A vault instance used to resolve aliases or guids referenced in the adaptor object.</param>
            <returns>An API object instance.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.SearchConditionJA.Validate(MFilesAPI.Vault,System.String)">
            <summary>
            Performs validation checks on the object and sub-objects and returns
            any findings.
            </summary>
            <param name="vault">The vault.</param>
            <param name="path">The path to assign to validation findings for this object.</param>
            <returns>A list of validation findings.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonAdaptor.SearchConditionsJA">
            <summary>
            JSON compatible adaptor for the MFilesAPI SearchConditions collection.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.SearchConditionsJA.#ctor">
            <summary>
            Simple constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.SearchConditionsJA.#ctor(MFilesAPI.SearchConditions)">
            <summary>
            Constructor that initializes itself with an existing api object.
            </summary>
            <param name="searchConditions">An api collection to initialize this object with.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.SearchConditionsJA.LoadApiObject(MFilesAPI.SearchConditions)">
            <summary>
            (Re-)Initializes this adaptor object to be the equivalent of the passed API object.
            </summary>
            <param name="searchConditions">The API object used to set the values of this object.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.SearchConditionsJA.ToApiObject(MFilesAPI.Vault)">
            <summary>
            Converts this JsonCompatible object to an equivalent API object. 
            </summary>
            <param name="vault">A vault instance used to resolve aliases or GUID's referenced in the adaptor object.</param>
            <returns>An API object instance.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.SearchConditionsJA.Parse(System.String)">
            <summary>
            Parses a Serialized <see cref="T:MFilesAPI.SearchConditions"/> string into an empty <see cref="T:MFiles.VAF.Configuration.JsonAdaptor.SearchConditionsJA"/> object.
            </summary>
            <param name="serializedString">Serialized <see cref="T:MFilesAPI.SearchConditions"/> string.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.JsonAdaptor.TypedValueJA">
            <summary>
            JSON compatible adaptor for <see cref="T:MFilesAPI.TypedValue"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.TypedValueJA.DataType">
            <summary>
            Maps to <see cref="T:MFilesAPI.TypedValue"/><c>.DataType</c>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.TypedValueJA.Value">
            <summary>
            Maps to <see cref="T:MFilesAPI.TypedValue"/><c>.Value</c>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.TypedValueJA.ValueAdaptor">
            <summary>
            Wrapper for the Value field.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.TypedValueJA.DisplayValue">
            <summary>
            Maps to <see cref="T:MFilesAPI.TypedValue"/><c>.DisplayValue</c>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.JsonAdaptor.TypedValueJA.IsNull">
            <summary>
            Maps to <see cref="T:MFilesAPI.TypedValue"/><c>.IsNULL</c>.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.TypedValueJA.#ctor">
            <summary>
            Simple Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.TypedValueJA.#ctor(MFilesAPI.TypedValue)">
            <summary>
            Constructor that initializes itself with an existing api object.
            </summary>
            <param name="typedValue">An api object instance to initialize this object with.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.TypedValueJA.FromJson(System.String)">
            <summary>
            Creates an instance from a json representation.
            </summary>
            <param name="json">The json representation of the object.</param>
            <returns>The deserialized instance.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.TypedValueJA.LoadApiObject(MFilesAPI.TypedValue)">
            <summary>
            (Re-)Initializes this adaptor object to be the equivalent of the passed API object.
            </summary>
            <param name="typedValue">The API object used to set the values of this object.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.TypedValueJA.ToApiObject(MFilesAPI.Vault)">
            <summary>
            Converts this JsonCompatible object to an equivalent API object. 
            </summary>
            <param name="vault">A vault instance used to resolve aliases or guids referenced in the adaptor object.</param>
            <returns>An API object instance.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.TypedValueJA.ToApiObject(MFilesAPI.Vault,System.Boolean)">
            <summary>
            Converts this JsonCompatible object to an equivalent API object. 
            </summary>
            <param name="vault">A vault instance used to resolve aliases or guids referenced in the adaptor object.</param>
            <param name="negateGroups">For instances where user and group lookups are intermixed, the group values should be negated.</param>
            <returns>An API object instance.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.TypedValueJA.Validate(MFilesAPI.Vault,System.String)">
            <summary>
            Performs validation checks on the object and sub-objects and returns
            any findings.
            </summary>
            <param name="vault">The vault.</param>
            <param name="path">The path to assign to validation findings for this object.</param>
            <returns>A list of validation findings.</returns>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonAdaptor.TypedValueJA.TypedValueSignature_Integer64">
            <summary>
            The signature of an Integer64 datatype in an exported search conditions string.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.JsonAdaptor.TypedValueJA.TypedValueSignature_FILETIME">
            <summary>
            The signature of an FILETIME datatype in an exported search conditions string.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.TypedValueJA.FileTimeToDate(MFilesAPI.TypedValue)">
            <summary>
            Resolves the date time value stored in a typed value with a FILETIME datatype.
            </summary>
            <param name="typedValue">The typedvalue.</param>
            <returns>The datetime.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.TypedValueJA.DateToFileTimeValue(System.DateTime)">
            <summary>
            Creates a typed value with datatype FILETIME and a value equivalent to the passed DateTime.
            </summary>
            <param name="dateTime">DateTime to convert.</param>
            <returns>Converted TypedValue</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.JsonAdaptor.TypedValueJA.ToggleTypedValueDataType(MFilesAPI.TypedValue,System.String,System.String)">
            <summary>
            Safely changes the datatype of a typed value without losing the value itself.
            Used to set Datatypes which the API technically does not support.
            </summary>
            <param name="typedValue">The typedvalue to convert.</param>
            <param name="fromSig">The signature of the typedValue's current datatype in an exported search conditions string.</param>
            <param name="toSig">The signature of the desired datatype in an exported search conditions string.</param>
            <returns>Converted TypedValue.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFNamedACLAttribute">
            <summary>
            Named Access Control List.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFNamedACLAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFNamedACLAttribute.ToString">
            <summary>
            Customized String representation with attributes.
            </summary>
            <returns>"MFNamedACL()"</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFObjectAttribute">
            <summary>
            M-Files Object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFObjectAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFObjectAttribute.ToString">
            <summary>
            Customized String representation with attributes.
            </summary>
            <returns>"MFObject()"</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFObjTypeAttribute">
            <summary>
            Object Type.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFObjTypeAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFPropertyDefAttribute">
            <summary>
            Property Definition.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.MFPropertyDefAttribute.Datatypes">
            <summary>
            Optional array of DataTypes the property needs to be one of.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFPropertyDefAttribute.ValueList">
            <summary>
            Optional reference (ID, GUID, alias) to the ValueList (or object type) which SSLU or MSLU must refer.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFPropertyDefAttribute.ObjectType">
            <summary>
            Optional reference (ID, GUID, alias) to the object type this property must be able to be assigned to.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFPropertyDefAttribute.ObjectTypeMember">
            <summary>
            Alternative for ObjectType=, used only with class type objects.
            Name of the class member containing the reference value of ObjectType.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFPropertyDefAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFPropertyDefAttribute.ToString">
            <summary>
            Customized String representation with attributes.
            </summary>
            <returns>MFPropertyDef({Datatypes},{ValueList})</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFSkipAttribute">
            <summary>
            Attribute noting that this object should not be traversed while validation.
            As Validation reads the value of object, this might cause problems in some cases, and this Attribute can be used to "fix" problem easily.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFStateAttribute">
            <summary>
            Workflow State.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFStateAttribute.Workflow">
            <summary>
            Reference to Workflow this state belongs to.
            Can be set manually if the object is not already hierarchically a member of the MFWorkflow object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFStateAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFStateAttribute.ToString">
            <summary>
            Customized String representation with attributes.
            </summary>
            <returns>MFState({Workflow})</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFStateTransitionAttribute">
            <summary>
            Workflow State Transition.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFStateTransitionAttribute.Workflow">
            <summary>
            Reference to Workflow this transition belongs to.
            Can be set manually if the object is not already hierarchically a member of the MFWorkflow object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFStateTransitionAttribute.FromState">
            <summary>
            Reference to the From state. Workflow must be known for this to be validated.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFStateTransitionAttribute.ToState">
            <summary>
            Reference to the To state. Workflow must be known for this to be validated.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFStateTransitionAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFStateTransitionAttribute.ToString">
            <summary>
            Customized String representation with attributes.
            </summary>
            <returns>MFStateTransition({Workflow}, {FromState}, {ToState})</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFUserGroupAttribute">
            <summary>
            UserGroup object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFUserGroupAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFValueListAttribute">
            <summary>
            ValueList.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFValueListAttribute.Items">
            <summary>
            Optional references to value list items of the value list.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFValueListAttribute.AllowObjTypes">
            <summary>
            Indicates whether the attribute allows/matches all value lists (including real object types).
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFValueListAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFValueListItemAttribute">
            <summary>
            ValueList Item.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFValueListItemAttribute.ValueList">
            <summary>
            Reference to the ValueList this item belongs to.
            Not needed when nested under MFValueList.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFValueListItemAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFViewAttribute">
            <summary>
            View object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFViewAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.MFWorkflowAttribute">
            <summary>
            Workflow.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.MFWorkflowAttribute.States">
            <summary>
            Reference to states of the workflow.
            Can be set manually, if not available as members of this class with MFState.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.MFWorkflowAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.PropertyValueSetter">
            <summary>
            Property value resolution class, used for static value resolution.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.PropertyValueSetter.Property">
            <summary>
            Property for which the value is to be set.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.PropertyValueSetter.Value">
            <summary>
            Value to set on the property.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.Resources.TextResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.CannotBeNull">
            <summary>
              Looks up a localized string similar to Cannot be null..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.CannotConvertNull">
            <summary>
              Looks up a localized string similar to Cannot convert a null value to the type &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ClassNotObjType">
            <summary>
              Looks up a localized string similar to The object type is not &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.Configuration">
            <summary>
              Looks up a localized string similar to Configuration.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ConfigurationIncomplete">
            <summary>
              Looks up a localized string similar to The configuration for the module &quot;{0}&quot; is incomplete..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ConfigurationKeyDeprecated">
            <summary>
              Looks up a localized string similar to The configuration key is deprecated..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ConfigurationKeyDeprecatedWithReplacement">
            <summary>
              Looks up a localized string similar to The configuration key is deprecated. Please use &quot;{0}&quot; instead..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ConfigurationKeyDeprecatedWithReplacementUnambiguousValue">
            <summary>
              Looks up a localized string similar to The deprecated configuration key ({0}) and the configuration key replacing it ({1}) both have a value specified..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ConfigurationUnserializationFailed">
            <summary>
              Looks up a localized string similar to The unserialization of the configuration &quot;{0}&quot; failed..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.CustomFailureTypeKey">
            <summary>
              Looks up a localized string similar to Key.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.DataFunctionLeftCharsNotSupported">
            <summary>
              Looks up a localized string similar to The &quot;LeftChars&quot; data function is not supported in search conditions..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.DynamicListNameMissing">
            <summary>
              Looks up a localized string similar to The DynamicList &apos;ListName&apos; must be explicitly defined..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.EmptyValue">
            <summary>
              Looks up a localized string similar to Empty reference value in the &quot;{0}&quot; key..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.EmptyValueFor">
            <summary>
              Looks up a localized string similar to Empty reference value for &quot;{0}&quot; in &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ErrorConvertingValue">
             <summary>
               Looks up a localized string similar to Error converting value {0} to type &quot;{1}&quot;.
              
            {2}.
             </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ErrorRealObjTypesNotAllowed">
            <summary>
              Looks up a localized string similar to Object types are not allowed..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ExceptionDeprecatedMemberReplacementMemberDeprecatedToo">
            <summary>
              Looks up a localized string similar to The key &quot;{0}&quot; and its replacement key, &quot;{1}&quot;, are both deprecated..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ExceptionDeprecatedMemberReplacementMemberNotFoundOrUnambiguous">
            <summary>
              Looks up a localized string similar to The key &quot;{0}&quot; is deprecated, and the replacement key, &quot;{1}&quot;, is either not found or not unambiguous..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ExceptionDeprecatedMemberReplacementMemberNotGood">
            <summary>
              Looks up a localized string similar to The key &quot;{0}&quot; is deprecated, and the replacement key, &quot;{1}&quot;, is incompatible..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.IllegalNullValueSettings">
            <summary>
              Looks up a localized string similar to Null values must be set with the &quot;IsNull&quot; property..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.InvalidConfigurationJson">
            <summary>
              Looks up a localized string similar to The configuration contains JSON data in an invalid format. Contact your system administrator for resolving the issue..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.InvalidItemReference">
            <summary>
              Looks up a localized string similar to The item reference {0} is not valid..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.InvalidPropertyDefOrObjectType">
            <summary>
              Looks up a localized string similar to Either the &quot;PropertyDef&quot; or the &quot;ObjType&quot; property must be set. Both cannot be set at the same time..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.KeyMissingFromNamedValueStorage">
            <summary>
              Looks up a localized string similar to The given key is missing in the named value storage: &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseDecodingFailed">
            <summary>
              Looks up a localized string similar to License decoding failed..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseExpireNever">
            <summary>
              Looks up a localized string similar to Never.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseFormatError">
            <summary>
              Looks up a localized string similar to License is incorrect. The file is either not a license or it is corrupt or falsified..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseHasExpired">
            <summary>
              Looks up a localized string similar to The license is expired..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseIncorrectApplication">
            <summary>
              Looks up a localized string similar to The license is not for this application..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseIncorrectServerSerial">
            <summary>
              Looks up a localized string similar to License requires a different server license..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseInGracePeriod">
            <summary>
              Looks up a localized string similar to The license is in grace period. Renew the license as soon as possible..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseIsRequiredButMissing">
            <summary>
              Looks up a localized string similar to License is required but not installed..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseLicensedTo">
            <summary>
              Looks up a localized string similar to Licensed to.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseLicenseExpires">
            <summary>
              Looks up a localized string similar to License expires.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseMaintenanceExpires">
            <summary>
              Looks up a localized string similar to Maintenance subscription expires.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseMaintenanceHasExpired">
            <summary>
              Looks up a localized string similar to The maintenance subscription does not cover this version..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseNoLicenseNeeded">
            <summary>
              Looks up a localized string similar to Application does not need a license..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseNotAllowedInThisServerVersion">
            <summary>
              Looks up a localized string similar to The license is not valid for this server version..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseNotAllowedInThisVault">
            <summary>
              Looks up a localized string similar to The license is not valid for this vault..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseNumberConcurrent">
            <summary>
              Looks up a localized string similar to Maximum number of concurrent user licenses.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseNumberNamedUsers">
            <summary>
              Looks up a localized string similar to Maximum number of named user licenses.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseNumberReadOnly">
            <summary>
              Looks up a localized string similar to Maximum number of read-only licenses.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseRestrictedToVaults">
            <summary>
              Looks up a localized string similar to Valid for {0} identified vault(s)..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseSerialNumber">
            <summary>
              Looks up a localized string similar to Serial number.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseServerSerial">
            <summary>
              Looks up a localized string similar to Required server serial number.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseTooManyConcurrentUsers">
            <summary>
              Looks up a localized string similar to Too many concurrent user licenses on the server..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseTooManyNamedUsers">
            <summary>
              Looks up a localized string similar to Too many named user licenses on the server..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseTooManyReadOnlyUsers">
            <summary>
              Looks up a localized string similar to Too many read-only licenses on the server..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LicenseUserGroupTooManyMembers">
            <summary>
              Looks up a localized string similar to The user group &quot;{0}&quot; has over {1} members..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LookupJA_MissingReference">
            <summary>
              Looks up a localized string similar to Lookup reference is not specified correctly..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.LookupJA_StructureTypeUnknown">
            <summary>
              Looks up a localized string similar to The alias &quot;{0}&quot; cannot be resolved, the structure type could not be inferred..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.MFIdentifierExceptionIsNotValidGuid">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; is not valid GUID..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.MFIdentifierExceptionMultipleInstances">
            <summary>
              Looks up a localized string similar to Multiple instances of type &quot;{0}&quot; were found with alias &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.MFIdentifierExceptionNotFoundAlias">
            <summary>
              Looks up a localized string similar to Vault element with the alias &quot;{0}&quot; is not found..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.MFIdentifierExceptionNotFoundAliasWithType">
            <summary>
              Looks up a localized string similar to Vault element of type &quot;{1}&quot; with the alias &quot;{0}&quot; is not found..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.MFIdentifierExceptionNotFoundGuid">
            <summary>
              Looks up a localized string similar to Vault element with the GUID &quot;{0}&quot; is not found..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.MFIdentifierExceptionNotFoundGuidWithType">
            <summary>
              Looks up a localized string similar to Vault element of type &quot;{1}&quot; with the GUID &quot;{0}&quot; is not found..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.MFIdentifierExceptionNotFoundID">
            <summary>
              Looks up a localized string similar to Vault element with the ID &quot;{0}&quot; is not found..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.MFIdentifierExceptionNotFoundIDWithType">
            <summary>
              Looks up a localized string similar to Vault element of type &quot;{1}&quot; with the ID &quot;{0}&quot; is not found..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.MFIdentifierExceptionValueListNotSet">
            <summary>
              Looks up a localized string similar to The value list cannot be resolved..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.MissingPropertyException">
            <summary>
              Looks up a localized string similar to No &quot;{0}&quot; property for &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.MissingValueFor">
            <summary>
              Looks up a localized string similar to The value of the &quot;{0}&quot; key is null or empty..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.MissingValueForIn">
            <summary>
              Looks up a localized string similar to The value of the &quot;{0}&quot; key in the &quot;{1}&quot; element is null or empty..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.MissingValueForInConditional">
            <summary>
              Looks up a localized string similar to The value of the &quot;{0}&quot; key in the &quot;{1}&quot; element is null or empty. The value is required when {2}..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.MissingValueType">
            <summary>
              Looks up a localized string similar to Configuration.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.NoReference">
            <summary>
              Looks up a localized string similar to No reference has been set..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.NullValue">
            <summary>
              Looks up a localized string similar to Null value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.NullValueInStructureIdentifierList">
            <summary>
              Looks up a localized string similar to The collection of configuration items contains a null or an incorrect value..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.NumberTooBig">
            <summary>
              Looks up a localized string similar to The numeric value must be {0} or lower..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.NumberTooSmall">
            <summary>
              Looks up a localized string similar to The numeric value must be {0} or higher..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ObjectTypeMemberMissingException">
            <summary>
              Looks up a localized string similar to No &quot;{0}&quot; property for &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ParseErrorException">
            <summary>
              Looks up a localized string similar to The {0} string &quot;{1}&quot; is not valid..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ProcessingMemberFailedException">
            <summary>
              Looks up a localized string similar to Unexpected error while processing the &quot;{0}&quot; key..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.PropDefAssociation">
            <summary>
              Looks up a localized string similar to Has the property &quot;{0}&quot; but the &quot;required&quot; setting is wrong. The property should {1} for the class..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.PropDefAssociationNeedClass">
            <summary>
              Looks up a localized string similar to Cannot resolve the property association &quot;{0}&quot; without a class..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.PropDefNoAssociation">
            <summary>
              Looks up a localized string similar to Does not contain the property &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.PropDefNotObjType">
            <summary>
              Looks up a localized string similar to Cannot be used with the object type &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.PropDefWrongType">
            <summary>
              Looks up a localized string similar to Does not represent the data type &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.PropDefWrongValuelist">
            <summary>
              Looks up a localized string similar to Does not use the value list &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.PropertyDefOrObjectTypeRequired">
            <summary>
              Looks up a localized string similar to Either the &quot;PropertyDef&quot; or the &quot;ObjType&quot; property must be set..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.PropertyDefOrObjectTypeRestricted">
            <summary>
              Looks up a localized string similar to The &quot;ObjType&quot; and &quot;PropertyDef&quot; properties cannot be set at the same time..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.PropertyRequiredAny">
            <summary>
              Looks up a localized string similar to Any.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.PropertyRequiredNo">
            <summary>
              Looks up a localized string similar to not be required.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.PropertyRequiredYes">
            <summary>
              Looks up a localized string similar to be required.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ReferenceNotResolved">
            <summary>
              Looks up a localized string similar to The reference to the following metadata structure element could not be resolved: {0}.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.StateFound">
            <summary>
              Looks up a localized string similar to Is in the workflow &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.StateMissing">
            <summary>
              Looks up a localized string similar to Is missing, required in the workflow &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.StateNotIn">
            <summary>
              Looks up a localized string similar to Is not in the workflow &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.StatusDashboard_ConfigureButtonLabel">
            <summary>
              Looks up a localized string similar to Configure.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.StringTooLong">
            <summary>
              Looks up a localized string similar to The string value cannot be longer than {0} characters..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.SystemAdminNeededToSaveConfiguration">
            <summary>
              Looks up a localized string similar to Your login account needs to have the &quot;System administrator&quot; server role for changing the value of the &quot;{0}&quot; setting..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TransitionFound">
            <summary>
              Looks up a localized string similar to Is in the workflow &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TransitionFoundWithFrom">
            <summary>
              Looks up a localized string similar to Is in the workflow &quot;{0}&quot; and the initial state is &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TransitionFoundWithFromTo">
            <summary>
              Looks up a localized string similar to Is in the workflow &quot;{0}&quot;, and is from the state &quot;{1}&quot; to the state &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TransitionFoundWithTo">
            <summary>
              Looks up a localized string similar to Is in the workflow &quot;{0}&quot; and the target state is &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TransitionMissing">
            <summary>
              Looks up a localized string similar to Is missing, required in the workflow &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TransitionNeedsWorkflow">
            <summary>
              Looks up a localized string similar to No workflow specified. Unable to verify the initial and target states..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TransitionNotCorrectFrom">
            <summary>
              Looks up a localized string similar to The initial state is not &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TransitionNotCorrectFromTo">
            <summary>
              Looks up a localized string similar to Is not from the state &quot;{0}&quot; to the state &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TransitionNotCorrectTo">
            <summary>
              Looks up a localized string similar to The target state is not &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TransitionNotIn">
            <summary>
              Looks up a localized string similar to Is not in the workflow &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TypeClass">
            <summary>
              Looks up a localized string similar to Class.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TypeClassGroup">
            <summary>
              Looks up a localized string similar to Class group.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TypeEventHandler">
            <summary>
              Looks up a localized string similar to Event handler.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TypeNACL">
            <summary>
              Looks up a localized string similar to Named access control list.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TypeObjectType">
            <summary>
              Looks up a localized string similar to Object type.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TypePropDef">
            <summary>
              Looks up a localized string similar to Property definition.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TypeStateTransition">
            <summary>
              Looks up a localized string similar to Workflow state transition.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TypeUnknownException">
            <summary>
              Looks up a localized string similar to Unknown metadata item type..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TypeUser">
            <summary>
              Looks up a localized string similar to User.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TypeUserGroup">
            <summary>
              Looks up a localized string similar to User group.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TypeValuelist">
            <summary>
              Looks up a localized string similar to Value list.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TypeValuelistItem">
            <summary>
              Looks up a localized string similar to Value list item.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TypeView">
            <summary>
              Looks up a localized string similar to View.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TypeWorkflow">
            <summary>
              Looks up a localized string similar to Workflow.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.TypeWorkflowState">
            <summary>
              Looks up a localized string similar to Workflow state.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.UnexpectedEnumValueJson">
            <summary>
              Looks up a localized string similar to Unsupported token type &quot;{0}&quot; while parsing an enumeration..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.Unknown">
            <summary>
              Looks up a localized string similar to Unknown.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.UnknownValuelistText">
            <summary>
              Looks up a localized string similar to Unknown.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.UnrecognizedLookupJsonType">
            <summary>
              Looks up a localized string similar to Unrecognized JSON value type for the following value list item: {0}.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.UnrecognizedTranslatableContentJsonType">
            <summary>
              Looks up a localized string similar to Unrecognized JSON value type for the following item: {0}.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ValidationProtectionException">
            <summary>
              Looks up a localized string similar to Too deep recursion encountered. Either too deep object is been validated or it contains some unhandled special type..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ValuelistItemFound">
            <summary>
              Looks up a localized string similar to Is in the list &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ValuelistItemMissing">
            <summary>
              Looks up a localized string similar to Does not contain the item &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ValuelistItemNeedList">
            <summary>
              Looks up a localized string similar to The value list item &quot;{0}&quot; at {1} cannot be resolved without a list..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ValuelistItemNotIn">
            <summary>
              Looks up a localized string similar to Is not in the value list &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ValuelistOfItemMissing">
            <summary>
              Looks up a localized string similar to Is missing, required by &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.ValueOutOfRange">
            <summary>
              Looks up a localized string similar to The value must be between {0} and {1}..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.WorkflowFilterReferencePathMissing">
            <summary>
              Looks up a localized string similar to Either the workflow filter reference path or child workflow filter reference path must be defined when using the MFWorkflowSubstructure attribute..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.Resources.TextResources.WorkflowUndefined">
            <summary>
              Looks up a localized string similar to Required workflow is undefined..
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.TranslatableValue">
            <summary>
            Class representing a single translated text value.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.TranslatableValue.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.TranslatableValue.#ctor(System.Boolean,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="isDefault">Specifies if this text is the default language version of the translatable text.</param>
            <param name="cultureOrLanguage">The culture name in standard format e.g. 'en-US' or 'fi-FI' or the corresponding three-letter ISO language identifier e.g. 'eng' or 'fin'.</param>
            <param name="translatedText">The translated text.</param>
        </member>
        <member name="P:MFiles.VAF.Configuration.TranslatableValue.Default">
            <summary>
            Is this the translation in the default language. Optional. If the value is in the default language the culture or language identifier isn't provided.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.TranslatableValue.CultureOrLanguage">
            <summary>
            The culture name of the translated text e.g. 'en-US' or 'fi-FI' or the three-letter language identifier of the text e.g. 'eng' or 'fin'.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.TranslatableValue.Text">
            <summary>
            The translated text.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.TranslatableContent">
            <summary>
            A class representing a collection of translated texts.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.TranslatableContent.supportedCultures">
            <summary>
            List of supported cultures as CultureInfo objects.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.TranslatableContent.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.TranslatableContent.#ctor(System.Collections.Generic.IEnumerable{MFiles.VAF.Configuration.TranslatableValue})">
            <summary>
            Constructor.
            <param name="collection">The other collection whose contents are copied into this one.</param>
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.TranslatableContent.GetDefaultText">
            <summary>
            Returns the translation that is marked as default.
            </summary>
            <returns>The default translation.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.TranslatableContent.GetTranslatedText">
            <summary>
            Returns the translated text according to the set culture (CultureInfo.CurrentUICulture).
            </summary>
            <returns>The translated text.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.TranslatableContent.GetTranslatedTextInVaultLanguage(MFilesAPI.Vault)">
            <summary>
            Returns the translated text according to the user's vault language.
            </summary>
            <param name="vault">The vault object.</param>
            <returns>The translated text.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.TranslatableContent.GetTranslatedText(System.Globalization.CultureInfo)">
            <summary>
            Returns the translated text according to the given culture
            </summary>
            <param name="culture">CultureInfo that specifies which translation to return. Can be null in which case default translation is returned.</param>
            <returns>The translated text.</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.TranslatableContentJsonConverter">
            <summary>
            Json converter for the TranslatableContent class.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.TranslatableContentJsonConverter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.TranslatableContentJsonConverter.CanConvert(System.Type)">
            <summary>
            Checks if the type can be converted with this converter.
            </summary>
            <param name="objectType">The target type.</param>
            <returns>True if the type can be handled with this converter.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.TranslatableContentJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Convert the JSON into TranslatableContent object.
            </summary>
            <param name="reader">The JSON reader.</param>
            <param name="objectType">The type to read the data into.</param>
            <param name="existingValue">Existing value (unused).</param>
            <param name="serializer">The JSON serializer.</param>
            <returns>The constructed object.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.TranslatableContentJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Convert the TranslatableContent object into JSON.
            </summary>
            <param name="writer">The JSON writer.</param>
            <param name="value">The value to serialize.</param>
            <param name="serializer">The JSON serializer.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.TypedValueSetter">
            <summary>
            Property value resolution class, used for static and dynamic value resolution.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.TypedValueSetter.op_Implicit(MFiles.VAF.Configuration.TypedValueSetter)~MFilesAPI.TypedValueClass">
            <summary>
            Allows for implicit conversion to a <see cref="P:MFiles.VAF.Configuration.TypedValueSetter.TypedValue"/>.
            </summary>
            <param name="valueSetter"></param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Configuration.TypedValueSetter.Mode">
            <summary>
            Editor mode.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.TypedValueSetter.DynamicValue">
            <summary>
            Dynamic Value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.TypedValueSetter.TypedValue">
            <summary>
            Static Value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.TypedValueSetter.TranslatableValue">
            <summary>
            Translatable Value.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.TypedValueSettingMode">
            <summary>
            Mode used to set the value of a property.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.TypedValueSettingMode.Dynamic">
            <summary>
            Placeholder text dynamic resolution mode.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.TypedValueSettingMode.Static">
            <summary>
            Static value mode.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.TypedValueSettingMode.TranslatableContent">
            <summary>
            Translatable Content mode.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.TypedValueSettingMode.SetToNULL">
            <summary>
            Sets the typed value to null.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.ValidationFindingType">
            <summary>
            Types of Validation findings.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationFindingType.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationFindingType.Exception">
            <summary>
            Validation check threw an error (findings inconclusive).
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationFindingType.Error">
            <summary>
            Critical problem found, item is not valid.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationFindingType.Warning">
            <summary>
            Potential problem found, but item is valid.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationFindingType.Ok">
            <summary>
            Validation checks were passed without problem.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationFindingType.Skipped">
            <summary>
            Validation checks were skipped (not run).
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationFindingType.Info">
            <summary>
            Informational only. Can be used for debugging.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.ValidationFinding">
            <summary>
            Represents a finding found during validation.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.ValidationFinding.Source">
            <summary>
            The top level item being validated.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.ValidationFinding.Reference">
            <summary>
            A reference to the specific item this finding is for (the item being validated).
            Relative to the source.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.ValidationFinding.Type">
            <summary>
            The type of validaiton issue.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.ValidationFinding.Category">
            <summary>
            The json path to to item this issue is for.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.ValidationFinding.Description">
            <summary>
            The description of the issue.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.ValidationFinding.Data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationFinding.#ctor(MFiles.VAF.Configuration.ValidationFindingType,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="type">The type of validation finding.</param>
            <param name="reference">The json path to the item this issue is for.</param>
            <param name="description">The description of the issue.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationFinding.#ctor(MFiles.VAF.Configuration.ValidationFindingType,System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="type">The type of validation finding.</param>
            <param name="source">The top level item being validated.</param>
            <param name="reference">The json path to the item this issue is for.</param>
            <param name="category">The category of the item.</param>
            <param name="description">The description of the issue.</param>
            <param name="data">The data.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.ValidationResultBase">
            <summary>
            Base class for validation and upgrade-related activity. Receives the notifications from vault metadata element existence.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.ObjTypeMissing(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing object type.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="objtype">The object type identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.ClassMissing(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing class.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="objclass">The class identifier (alias, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.ClassWrongObjType(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing class.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="objclass">The class identifier (alias, guid, id).</param>
            <param name="objtype">The requested object type identifier (alias, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.ClassGroupMissing(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing class group.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="classGroup">The classgroup identifier (guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.UserGroupMissing(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing user group.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="userGroup">The user group identifier (guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.ViewMissing(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing view.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="view">The view identifier (guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.PropertyDefMissing(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing property definition.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="propdef">The property definition identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.PropertyDefWrongObjType(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report property definition that cannot be used with requested object type.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="propdef">The property definition identifier (alias, guid, id).</param>
            <param name="objtype">Requested object type (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.PropertyDefWrongType(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFilesAPI.MFDataType[],System.Boolean,System.Boolean)">
            <summary>
            Report property definition that has wrong datatype.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="propdef">The property definition identifier (alias, guid, id).</param>
            <param name="datatypes">Requested datatypes</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.PropertyDefWrongValueList(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report property definition that has wrong valuelist.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="propdef">The property definition identifier (alias, guid, id).</param>
            <param name="valuelist">Requested valuelist</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.PropertyAssociationFailure(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFAssociatedPropertyAttribute.RequiredState,System.Boolean,System.Boolean)">
            <summary>
            Report wrongness in property definition association to class.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="propdef">The property definition identifier (alias, guid, id).</param>
            <param name="classobj">Associated class</param>
            <param name="valueRequired">Propertys value is required</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.PropertyAssociationNotFound(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFAssociatedPropertyAttribute.RequiredState,System.Boolean,System.Boolean)">
            <summary>
            Report wrongness in property definition association to class.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="propdef">The property definition identifier (alias, guid, id).</param>
            <param name="classobj">Associated class</param>
            <param name="valueRequired">Propertys value is required</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.WorkflowMissing(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing workflow.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="workflow">The workflow identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.StateMissing(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing state.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="state">The state identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier that is expected to contain the state (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.StateNotIn(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report misplaced state.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="state">The state identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier that is expected to contain the state (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.StateTransitionMissing(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing transition.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="transition">The transition identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier that is expected to contain the transition (alias, guid, id) can be empty.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.StateTransitionNotIn(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report misplaced state transition.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="transition">The transition identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier that is expected to contain the state (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.StateTransitionNotCorrect(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report incorrect state transition from and to details.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="transition">The transition identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier that is expected to contain the state (alias, guid, id).</param>
            <param name="fromState">The from state identifier (alias, guid, id), this or toState can be empty.</param>
            <param name="toState">The to state identifier (alias, guid, id), this or fromState can be empty.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.ValueListMissing(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean,System.String)">
            <summary>
            Report missing value list.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="valuelist">The value list identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
            <param name="messageCanBeNull">Additional details to log.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.ValueListItemNeedList(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report that we cant find value list item without a list
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="item">The value list item identifier (guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.ValueListItemMissing(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing value list item.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="item">The value list item identifier (guid, id).</param>
            <param name="valuelist">The container value list identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.ValueListItemNotIn(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report misplaced value list item.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="valueListItem">The value list item identifier (guid, objid string, id).</param>
            <param name="valueList">The workflow identifier that is expected to contain the state (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.NamedACLMissing(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing NACL.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="nacl">The NACL identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.EmptyValue(MFiles.VAF.Configuration.IConfiguration,MFilesAPI.MFMetadataStructureItem,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean,System.String)">
            <summary>
            Empty value error.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="identifier">The missing element.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
            <param name="message">String specifying the location.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.EmptyValue(MFiles.VAF.Configuration.IConfiguration,MFilesAPI.MFMetadataStructureItem,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean,System.String)">
            <summary>
            Empty value error.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="identifier">The missing element.</param>
            <param name="parentIdentifier">The parent element for the missing element. Helps to identify the actual missing item.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
            <param name="message">String specifying the location.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.MissingValue(MFiles.VAF.Configuration.IConfiguration,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Missing or empty value error, not specifically to reference value.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="keyName">The missing element.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
            <param name="message">String specifying the location.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.MarkObjectRef(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier)">
            <summary>
            Indicates an object reference in the configuration file.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="identifier">The object reference.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.ObjTypeFound(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found object type.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="objtype">The object type identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.ClassFound(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found class.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="objclass">The class identifier (alias, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.ClassGroupFound(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found class group.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="classGroup">The classgroup identifier (id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.UserGroupFound(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found user group.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="userGroup">The classgroup identifier (id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.ViewFound(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found view.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="view">The view identifier (guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.PropertyDefFound(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found property definition.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="propdef">The property definition identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.WorkflowFound(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found workflow.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="workflow">The workflow identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.StateFound(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found state.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="state">The state identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier (alias, guid, id) can be empty.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.StateTransitionFound(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found transition.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="transition">The transition identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier (alias, guid, id) can be empty.</param>
            <param name="fromState">The from state identifier (alias, guid, id) can be empty.</param>
            <param name="toState">The to state identifier (alias, guid, id) can be empty.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.ValueListFound(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found value list.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="valuelist">The value list identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.ValueListItemFound(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found value list item.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="item">The value list item identifier (guid,id)</param>
            <param name="valuelist">The value list identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.NamedACLFound(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found NACL.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="nacl">The NACL identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.ReportCustomFailure(MFiles.VAF.Configuration.IConfiguration,System.String,MFiles.VAF.Configuration.MFIdentifier,System.String,System.Nullable{System.Boolean})">
            <summary>
            Report custom validation failure.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="itemType">Custom type identifier string of the item.</param>
            <param name="item">The identifier (name, alias, guid, id) of the failed item.</param>
            <param name="message">The custom error message</param>
            <param name="required">Is the reference required, or optional</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.ReportCustomFailure(MFiles.VAF.Configuration.IConfiguration,MFilesAPI.MFMetadataStructureItem,MFiles.VAF.Configuration.MFIdentifier,System.String,System.Nullable{System.Boolean})">
            <summary>
            Report custom validation failure.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="itemType">The metadatastructure item type of the item.</param>
            <param name="item">The identifier (name, alias, guid, id) of the failed item.</param>
            <param name="message">The custom error message</param>
            <param name="required">Is the reference required, or optional</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.ReportError(MFiles.VAF.Configuration.IConfiguration,System.String)">
            <summary>
            Reports the error.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="error">The error string.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.MissingItemAction(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFilesAPI.MFMetadataStructureItem,System.Boolean,System.Boolean)">
            <summary>
            Perform the error action with single metadata element.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="element">The string that identifies the metadata element.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="required">Is the reference required, or optional.</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.FailedItemAction(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFilesAPI.MFMetadataStructureItem,System.Boolean,System.Boolean,System.String)">
            <summary>
            Perform the error action with single metadata element.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="element">The string that identifies the metadata element.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="required">Is the reference required, or optional.</param>
            <param name="validate">True if the validation action should be performed.</param>
            <param name="message">Custom message.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultBase.FoundItemAction(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFilesAPI.MFMetadataStructureItem,System.Boolean,System.Boolean)">
            <summary>
            Perform the action with single found metadata element.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="element">The string that identifies the metadata element.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.ValidationResultForValidation">
            <summary>
            Class interface for handling validation errors.
            Either by throwing an error or fixing the error.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.ValidationResultForValidation.SummaryModule">
            <summary>
            Summary data object for each Configuration.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationResultForValidation.SummaryModule.Name">
            <summary>
            Name of the module.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationResultForValidation.SummaryModule.ConfigKey">
            <summary>
            ConfigKey of the module.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationResultForValidation.SummaryModule.Enabled">
            <summary>
            Configuration is enabled.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationResultForValidation.SummaryModule.Valid">
            <summary>
            Validation is ok.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationResultForValidation.SummaryModule.NoConfig">
            <summary>
            Bad case of no configuration.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.ValidationResultForValidation.DetailItem">
            <summary>
            Detail item info.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationResultForValidation.DetailItem.Configuration">
            <summary>
            Name of the configuration.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationResultForValidation.DetailItem.Type">
            <summary>
            Object type string.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationResultForValidation.DetailItem.Reference">
            <summary>
            Reference name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationResultForValidation.DetailItem.Error">
            <summary>
            Error state.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationResultForValidation.DetailItem.Missing">
            <summary>
            Missing state.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationResultForValidation.DetailItem.Required">
            <summary>
            Required or optional.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationResultForValidation.DetailItem.Message">
            <summary>
            Additional message.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationResultForValidation.DetailItem.Id">
            <summary>
            Found item id.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.DetailItem.Equals(System.Object)">
            <summary>
            Equality check, needed by duplicate elimination.
            Two items are equal only if all members are equal.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.DetailItem.GetHashCode">
            <summary>
            HashCode override wanted by compiler warning.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.ValidationResultForValidation.Results">
            <summary>
            Result object with summary and details.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.Results.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.Results.AddDetail(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Boolean},System.String,System.Int32)">
            <summary>
            Method to add new detail entry. Ignores duplicates.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationResultForValidation.Results.Summary">
            <summary>
            Summary list.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationResultForValidation.Results.Details">
            <summary>
            Details list.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.ValidationResultForValidation.Results.ErrorModules">
            <summary>
            Names of modules in error state.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.GetAsValidationFindings(System.Boolean)">
            <summary>
            Converts the results to new ValidationFinding list.
            </summary>
            <param name="distinctWarnings">
            	Whether non-critical errors are emitted as warnings.
            	By default they are emitted as errors.
            </param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.StructureItemName(MFilesAPI.MFMetadataStructureItem)">
            <summary>
            Return string name of metadata type.
            </summary>
            <param name="metadataStructureItem">The structure item to et the name of.</param>
            <returns>The structure item name.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.MissingItemAction(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFilesAPI.MFMetadataStructureItem,System.Boolean,System.Boolean)">
            <summary>
            Perform the error action with single metadata element.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="element">The string that identifies the metadata element.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.FailedItemAction(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.String,System.Nullable{System.Boolean},System.Boolean,System.String)">
            <summary>
            Perform the error action with single metadata element.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="element">The string that identifies the metadata element.</param>
            <param name="type">The metadata element type.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
            <param name="message">Custom message</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.FailedItemAction(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFilesAPI.MFMetadataStructureItem,System.Boolean,System.Boolean,System.String)">
            <summary>
            Perform the error action with single metadata element.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="element">The string that identifies the metadata element.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
            <param name="message">Custom message</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.FoundItemAction(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFilesAPI.MFMetadataStructureItem,System.Boolean,System.Boolean)">
            <summary>
            Perform the action with single found metadata element.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="element">The string that identifies the metadata element.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.FoundItemAction(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Perform the action with single found metadata element.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="element">The string that identifies the metadata element.</param>
            <param name="type">The metadata element type.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
            <param name="message">Pre made log message</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.EmptyValue(MFiles.VAF.Configuration.IConfiguration,MFilesAPI.MFMetadataStructureItem,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean,System.String)">
            <summary>
            Empty value error.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="identifier">The missing element.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
            <param name="message">String specifying the location.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.EmptyValue(MFiles.VAF.Configuration.IConfiguration,MFilesAPI.MFMetadataStructureItem,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean,System.String)">
            <summary>
            Empty value error.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="identifier">The missing element.</param>
            <param name="parentIdentifier">Parent element of the identifier.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
            <param name="message">String specifying the location.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.MissingValue(MFiles.VAF.Configuration.IConfiguration,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Missing or empty value error, not specifically to reference value.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="keyName">The missing element.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
            <param name="message">String specifying the location.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.ValueListItemFound(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found value list item.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="item">The value list item identifier (guid, id).</param>
            <param name="valuelist">The container value list identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.ValueListItemMissing(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing value list item.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="item">The value list item identifier (guid, id).</param>
            <param name="valuelist">The container value list identifier (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.ValueListItemNotIn(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report misplaced value list item.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="valueListItem">The value list item identifier (guid, objid string, id).</param>
            <param name="valueList">The workflow identifier that is expected to contain the state (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.ValueListItemNeedList(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report that we cant find value list item without a list
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="item">The value list item identifier (guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.PropertyAssociationFailure(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFAssociatedPropertyAttribute.RequiredState,System.Boolean,System.Boolean)">
            <summary>
            Report wrongness in property definition association to class.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="propdef">The property definition identifier (alias, guid, id).</param>
            <param name="classobj">Associated class</param>
            <param name="valueRequired">Propertys value is required</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.PropertyAssociationNotFound(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFAssociatedPropertyAttribute.RequiredState,System.Boolean,System.Boolean)">
            <summary>
            Report wrongness in property definition association to class.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="propdef">The property definition identifier (alias, guid, id).</param>
            <param name="classobj">Associated class</param>
            <param name="valueRequired">Propertys value is required</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.StateFound(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found state.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="state">The state identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier (alias, guid, id)</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.StateMissing(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing state.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="state">The state identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier (alias, guid, id)</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.StateNotIn(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report misplaced state.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="state">The state identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier that is expected to contain the state (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.StateTransitionFound(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report found transition.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="transition">The transition identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier (alias, guid, id) can be empty.</param>
            <param name="fromState">The from state identifier (alias, guid, id) can be empty.</param>
            <param name="toState">The to state identifier (alias, guid, id) can be empty.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.StateTransitionMissing(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report missing transition.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="transition">The transition identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier that is expected to contain the transition (alias, guid, id) can be empty.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.StateTransitionNotIn(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report misplaced state transition.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="transition">The transition identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier that is expected to contain the state (alias, guid, id).</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.StateTransitionNotCorrect(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Report incorrect state transition from and to details.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="transition">The transition identifier (alias, guid, id).</param>
            <param name="workflow">The workflow identifier that is expected to contain the state (alias, guid, id).</param>
            <param name="fromState">The from state identifier (alias, guid, id), this or toState can be empty.</param>
            <param name="toState">The to state identifier (alias, guid, id), this or fromState can be empty.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.ReportCustomFailure(MFiles.VAF.Configuration.IConfiguration,System.String,MFiles.VAF.Configuration.MFIdentifier,System.String,System.Nullable{System.Boolean})">
            <summary>
            Report custom validation failure.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="itemType">Custom type identifier string of the item.</param>
            <param name="item">The identifier (name, alias, guid, id) of the failed item.</param>
            <param name="message">The custom error message</param>
            <param name="required">Is the reference required, or optional</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.ReportCustomFailure(MFiles.VAF.Configuration.IConfiguration,MFilesAPI.MFMetadataStructureItem,MFiles.VAF.Configuration.MFIdentifier,System.String,System.Nullable{System.Boolean})">
            <summary>
            Report custom validation failure.
            </summary>
            <param name="configuration">The module configuration that is being validated.</param>
            <param name="itemType">The metadatastructure item type of the item.</param>
            <param name="item">The identifier (name, alias, guid, id) of the failed item.</param>
            <param name="message">The custom error message</param>
            <param name="required">Is the reference required, or optional</param>
        </member>
        <member name="P:MFiles.VAF.Configuration.ValidationResultForValidation.SearchResults">
            <summary>
            Log of all events.
            First key = module, second key = type, third alias.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForValidation.ClearLog">
            <summary>
            Clear old log, and prepare SearchResults.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.ValidationResultForUpgrade">
            <summary>
            Class interface for handling validation errors.
            Either by throwing an error or fixing the error.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.ValidationResultForUpgrade.MetadataElements">
            <summary>
            Container for the metadata elements that should be present in the vault after the upgrade. Contains (1) item type, (2) alias and (3) the configuration id that asked the alias.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForUpgrade.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForUpgrade.MarkObjectRef(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier)">
            <summary>
            Indicates an object reference in the configuration file.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="identifier">The object reference.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForUpgrade.MissingItemAction(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFilesAPI.MFMetadataStructureItem,System.Boolean,System.Boolean)">
            <summary>
            Perform the error action with single metadata element.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="element">The string that identifies the metadata element.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValidationResultForUpgrade.FoundItemAction(MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.MFIdentifier,MFilesAPI.MFMetadataStructureItem,System.Boolean,System.Boolean)">
            <summary>
            Perform the action with single found metadata element.
            </summary>
            <param name="configuration">The configuration that is being validated.</param>
            <param name="element">The string that identifies the metadata element.</param>
            <param name="metadataStructureItem">The metadata element type.</param>
            <param name="required">Is the reference required, or optional</param>
            <param name="validate">True if the validation action should be performed.</param>
        </member>
        <member name="T:MFiles.VAF.Configuration.ValidationResultForUpgrade.MetadataItemParams">
            <summary>
            Data content for validated/requested metadata items.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationResultForUpgrade.MetadataItemParams.itemType">
            <summary>
            The metadata structure item type.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationResultForUpgrade.MetadataItemParams.identifier">
            <summary>
            The identifier for the metadata structure item.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationResultForUpgrade.MetadataItemParams.moduleConfigId">
            <summary>
            The configuration identifier where the metadata structure reference origins from.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationResultForUpgrade.MetadataItemParams.wasMissing">
            <summary>
            True if the metadata structure item was not present in the vault metadata structure.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Configuration.ValidationResultForUpgrade.MetadataItemParams.optional">
            <summary>
            True if the metadata structure item was specified to be optional.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.VaultElementReferenceAttribute">
            <summary>
            Base interface of validation attributes.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.VaultElementReferenceAttribute.Required">
            <summary>
            Is the reference absolute requirement, default is true.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.VaultElementReferenceAttribute.Validate">
            <summary>
            Should the reference be validated. Default is true.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.VaultElementReferenceAttribute.AllowEmpty">
            <summary>
            Is it allowed for this item to be unset, empty or null. Default is false.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.VaultElementReferenceAttribute.AttributeType">
            <summary>
            Type of the target, used in id resolving.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.VaultElementReferenceAttribute.RefMember">
            <summary>
            Name of the class member containing the reference alias/guid/id of the type.
            Has a default value. If object with the attribute is not class, this value is ignored.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.VaultElementReferenceAttribute.#ctor">
            <summary>
            Constructor with default values.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Configuration.PreviewableTextEditorAttribute">
            <summary>
            Attribute used on a Class Model or a Property ( of a complex object ) to specify how to generate a preview text string,
            to be applied to the previewable text editor in the JsonConfEditor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.PreviewableTextEditorAttribute.#ctor">
            <summary>
            Default Constructor, explicitly sets the TypeEditor property.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.PreviewableTextEditorAttribute.PreviewTemplate">
            <summary>
            When both the PreviewTemplate and the PreviewSources are provided, a preview text string may be generated.
            This will not be applied to items that have no value.
            Used in combination with PreviewSources[] like, String.Format( PreviewTemplate, PreviewSources ).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.PreviewableTextEditorAttribute.PreviewSources">
            <summary>
            Each item in the string array will be a JSPath query string from the current item to the item for which 
            the display value should be resolved.
            When both the PreviewTemplate and the PreviewSources are provided, a preview text string may be generated.
            This will not be applied to items that have no value.
            Used in combination with PreviewTemplate like, String.Format( PreviewTemplate, PreviewSources ).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.PreviewableTextEditorAttribute.PreviewUnsetTexts">
            <summary>
            The string values to use in the template inplace of an unset or undefined source value.
            By default unset values are shown as "(unset)" or by showing the default value appened with "(default)".
            Items in this array shall match the sources list, first value is used with the first source, and so forth.
            If an entry in this array is null, the default functionality is applied with corresponding source.
            </summary>
            <example>
             PreviewTemplate = "{0}.{1}", PreviewUnsetTexts = [ "", "Nothing" ]
             => If both source value are undefined, produces: ".Nothing".
             => If first source values is unset and second "bar", produces: ".bar"
             => If source values are set to "foo" and "bar", produces: "foo.bar"
            </example>
        </member>
        <member name="P:MFiles.VAF.Configuration.PreviewableTextEditorAttribute.PreviewValueFormats">
            <summary>
            The string values to preformat the values of the sources.
            By default all values are used directly, but with these format strings additional content can be added
            for values which are set.
            Items in this array shall match the sources list, first value is used with the first source, and so forth.
            If an entry in this array is null, the default functionality is applied with the corresponding source.
            Values must include "{0}" or the actual source value is lost.
            </summary>
            <example>
             PreviewTemplate = "Usage: {0}", PreviewValueFormats = [ "Code:{0}" ], PreviewUnsetTexts = [ "Nothing" ]
             => If source value is undefined, produces: "Usage: Nothing".
             => If source value is "foo", produces: "Usage: Code: foo"
            </example>
        </member>
        <member name="P:MFiles.VAF.Configuration.PreviewableTextEditorAttribute.LoadDepth">
            <summary>
            Provides an override depth value to be used in child item generation. Presently, the editor defaults to
            a default depth of a single level in preview text loading. This property allows specifying a depth.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.PreviewableTextEditorAttribute.HasOptions">
            <summary>
            Determines if this attribute defines custom options.
            </summary>
            <returns>True, if the object has options specified.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.PreviewableTextEditorAttribute.GetOptions">
            <summary>
            Gets the custom options defined by this attribute.
            </summary>
            <returns>Dynamic expando object</returns>
        </member>
        <member name="T:MFiles.VAF.Configuration.ValueSetterAttribute">
            <summary>
            [Typed|Property] Value Setter allows for specifying additional Property Setter Options.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.ValueSetterAttribute.AllowedModes">
            <summary>
            Valid modes available for setting the value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Configuration.ValueSetterAttribute.PropertyDefReferencePath">
            <summary>
            Define to JSPath to the 'item' that contains the property definition to filter against.
            <usage>
            // PropertyDefReferencePath = ".parent._children{.key = 'MySiblingItem' } "
            var propdefRefItem = JSPath.apply( item.options.propertyDefReferencePath , item )[ 0 ];
            var propDef = propdefRefItem.structureDef;
            </usage>
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValueSetterAttribute.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValueSetterAttribute.HasOptions">
            <summary>
            Determines if this attribute defines custom options.
            </summary>
            <returns>True, if the object has options specified.</returns>
        </member>
        <member name="M:MFiles.VAF.Configuration.ValueSetterAttribute.GetOptions">
            <summary>
            Gets the custom options defined by this attribute.
            </summary>
            <returns>Dynamic expando object</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.FormattableStringFactory">
            <summary>
            Provides a static method to create a FormattableString object from a composite format string and its arguments.
            </summary>
            <remarks>
            Mimics a built-in type introduced in .NET Framework 4.6
            This can be removed once we upgrade the project's target framework.
            </remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.FormattableStringFactory.Create(System.String,System.Object[])">
            <summary>
            Creates a FormattableString instance from a composite format string and its arguments.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arguments">
               The arguments whose string representations are to be inserted in the result string.
            </param>
            <returns>The object that represents the composite format string and its arguments.</returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.FormattableStringFactory.Create(System.String,System.DateTime,System.Object[])">
            <summary>
            Overload to catch <see cref="T:System.DateTime"/> arguments, which can't be handled.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="bad">Argument to catch initial <see cref="T:System.DateTime"/>.</param>
            <param name="arguments">
                The arguments whose string representations are to be inserted in the result string.
            </param>
            <returns>The object that represents the composite format string and its arguments.</returns>
        </member>
        <member name="T:System.FormattableString">
            <summary>
            Represents a composite format string, along with the arguments to be formatted.
            </summary>
            <remarks>
            Mimics a built-in type introduced in .NET Framework 4.6
            This can be removed once we upgrade the project's target framework.
            </remarks>
        </member>
        <member name="F:System.FormattableString.messageFormat">
            <summary>
            The composite format string.
            </summary>
        </member>
        <member name="F:System.FormattableString.args">
            <summary>
            The objects to be formatted.
            </summary>
        </member>
        <member name="M:System.FormattableString.#ctor(System.String,System.Object[])">
            <summary>
            Instantiates a new instance of the FormattableString class.
            </summary>
            <param name="format">The composite format string.</param>
            <param name="arguments">The objects to be formatted.</param>
        </member>
        <member name="M:System.FormattableString.ToString">
            <summary>
            Returns the string that results from formatting the composite format string along with its arguments.
            </summary>
            <returns>A result string formatted by using the conventions of the current culture.</returns>
        </member>
        <member name="M:System.FormattableString.ToString(System.IFormatProvider)">
            <summary>
            Returns the string that results from formatting the composite format string along with its arguments.
            </summary>
            <param name="formatProvider">An object that provides culture-specific formatting information.</param>
            <returns>A result string formatted by using the conventions of <see cref="T:System.IFormatProvider"/>.</returns>
        </member>
        <member name="M:System.FormattableString.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the string that results from formatting the composite format string along with its arguments.
            </summary>
            <param name="ignored">Ignored.</param>
            <param name="formatProvider">An object that provides culture-specific formatting information.</param>
            <returns>A result string formatted by using the conventions of <see cref="T:System.IFormatProvider"/>.</returns>
        </member>
    </members>
</doc>
