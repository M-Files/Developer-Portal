"use strict";(self.webpackChunkuix_2=self.webpackChunkuix_2||[]).push([[9882],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>h});var a=t(67294);function m(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){m(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,m=function(e,n){if(null==e)return{};var t,a,m={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(m[t]=e[t]);return m}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(m[t]=e[t])}return m}var s=a.createContext({}),r=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},l=function(e){var n=r(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,m=e.mdxType,o=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),c=r(t),p=m,h=c["".concat(s,".").concat(p)]||c[p]||u[p]||o;return t?a.createElement(h,d(d({ref:n},l),{},{components:t})):a.createElement(h,d({ref:n},l))}));function h(e,n){var t=arguments,m=n&&n.mdxType;if("string"==typeof e||m){var o=t.length,d=new Array(o);d[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[c]="string"==typeof e?e:m,d[1]=i;for(var r=2;r<o;r++)d[r]=t[r];return a.createElement.apply(null,d)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},27995:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>p,frontMatter:()=>d,metadata:()=>s,toc:()=>l});var a=t(87462),m=(t(67294),t(3905)),o=(t(47713),t(9826));t(45274);const d={sidebar_position:5},i="Using Custom Commands",s={unversionedId:"Overview/Commands",id:"Overview/Commands",title:"Using Custom Commands",description:"The Custom Commands interface provides a set of commands for customizing menus, creating custom commands, and managing their states in M-Files UI Extensions. The ICommands provides set of tools for developers to customize the user interface, manage commands, and control their visibility and availability within the application.",source:"@site/docs/Overview/Commands.mdx",sourceDirName:"Overview",slug:"/Overview/Commands",permalink:"/Overview/Commands",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Dialogs and Messages",permalink:"/Overview/Messages"},next:{title:"Working with the Shell Listing",permalink:"/Overview/ListingView"}},r={},l=[{value:"Managing Commands",id:"managing-commands",level:2},{value:"Creating a Custom Command",id:"creating-a-custom-command",level:3},{value:"Controlling the Command visibility",id:"controlling-the-command-visibility",level:3},{value:"Executing the Command manually",id:"executing-the-command-manually",level:3},{value:"Listening and Responding to Custom Commands",id:"listening-and-responding-to-custom-commands",level:3},{value:"Command locations",id:"command-locations",level:2},{value:"The context menu",id:"the-context-menu",level:3},{value:"The main menu",id:"the-main-menu",level:3},{value:"Child commands",id:"child-commands",level:4}],c={toc:l},u="wrapper";function p(e){let{components:n,...d}=e;return(0,m.kt)(u,(0,a.Z)({},c,d,{components:n,mdxType:"MDXLayout"}),(0,m.kt)("h1",{id:"using-custom-commands"},"Using Custom Commands"),(0,m.kt)("p",null,"The Custom Commands interface provides a set of commands for customizing menus, creating custom commands, and managing their states in M-Files UI Extensions. The ",(0,m.kt)("a",{parentName:"p",href:"../../UIExt2/Interfaces/ICommands/"},"ICommands")," provides set of tools for developers to customize the user interface, manage commands, and control their visibility and availability within the application."),(0,m.kt)("h2",{id:"managing-commands"},"Managing Commands"),(0,m.kt)("admonition",{type:"note"},(0,m.kt)("p",{parentName:"admonition"},"ICommands is part of ",(0,m.kt)("a",{parentName:"p",href:"../../UIExt2/Interfaces/IShellFrame/"},"IShellFrame")," interface. To use this interface you have to first obtain instance of the IShellFrame. ")),(0,m.kt)("h3",{id:"creating-a-custom-command"},"Creating a Custom Command"),(0,m.kt)("p",null,"The commands created by the ICommands interface are usually so called ",(0,m.kt)("strong",{parentName:"p"},"Custom Commands")," which are available only for your UI Extension application."),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-javascript"},"// Create a new custom command using IShellFrame instance.\nconst commandId = await shellFrame.Commands.CreateCustomCommand(name);\n")),(0,m.kt)("h3",{id:"controlling-the-command-visibility"},"Controlling the Command visibility"),(0,m.kt)("p",null,"Creating a command does not automatically add the command to the user interface.  To do that the ",(0,m.kt)("a",{parentName:"p",href:"../../UIExt2/Interfaces/ICommands/SetCommandState"},"SetCommandState")," method must be used.  This method defines the command state (hidden/visible) in specific parts of the user interface:"),(0,m.kt)(o.ZP,{components:d.components,mdxType:"SetCommandState"}),(0,m.kt)("h3",{id:"executing-the-command-manually"},"Executing the Command manually"),(0,m.kt)("p",null,"The Custom command can executed directly using ",(0,m.kt)("a",{parentName:"p",href:"../../UIExt2/Interfaces/ICommands/ExecuteCommand"},"ExecuteCommand"),", which accepts also optional ",(0,m.kt)("inlineCode",{parentName:"p"},"data")," parameter."),(0,m.kt)("p",null,"The ",(0,m.kt)("inlineCode",{parentName:"p"},"data")," must be serializeable using ",(0,m.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm"},"Structured Cloning Algorithm"),"."),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-javascript"},"// Execute a new custom command with data parameter\nawait shellFrame.Commands.ExecuteCommand(commandId, {\n    someCustomData: 1234\n});\n")),(0,m.kt)("h3",{id:"listening-and-responding-to-custom-commands"},"Listening and Responding to Custom Commands"),(0,m.kt)("p",null,"User can listen to cuostom command events using ",(0,m.kt)("inlineCode",{parentName:"p"},"MFiles.Event.CustomCommand"),", which has a callback having parameters ",(0,m.kt)("inlineCode",{parentName:"p"},"(commandId, data)"),"."),(0,m.kt)("admonition",{type:"tip"},(0,m.kt)("p",{parentName:"admonition"},"It is generally recommended to have a single listener function for custom commands to avoid responding to the same command multiple times.")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-javascript"},"\n// Listen for the custom commands.\nshellFrame.Commands.Events.Register(\n\n    // Listen for the CustomCommand events.\n    MFiles.Event.CustomCommand,\n\n    // Each command has ID and optional data provided with it.\n    ( commandId, data ) => {\n    }\n);\n\n")),(0,m.kt)("h2",{id:"command-locations"},"Command locations"),(0,m.kt)("admonition",{type:"tip"},(0,m.kt)("p",{parentName:"admonition"},"The ",(0,m.kt)("a",{parentName:"p",href:"../../Samples/Commands"},"commands sample")," includes practical examples of code that adds commands to different locations.")),(0,m.kt)("p",null,"Commands can be shown in two primary locations: within the context menu (shown when the user right-clicks on something in a listing), and within the main menu."),(0,m.kt)("h3",{id:"the-context-menu"},"The context menu"),(0,m.kt)("p",null,"Commands can be added to the context menu which is shown when a user right-clicks on something in a listing.  The command may be shown similarly to this:"),(0,m.kt)("p",null,(0,m.kt)("img",{alt:"The command shown in the context menu",src:t(98545).Z,width:"953",height:"695"})),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-javascript"},'// This code should be placed to run when the shell frame is started.\n\n// Create the command.\nconst commandOneId = await shellFrame.Commands.CreateCustomCommand\n(\n    "My First Command"\n);\n\n// Add the command to the bottom of the context menu.\nawait shellFrame.Commands.AddCustomCommandToMenu\n(\n    commandOneId,\n    MFiles.MenuLocation.MenuLocation_ContextMenu_Bottom, // Note: context menu\n    1\n);\n\n// Show a message when the command is clicked.\nshellFrame.Commands.Events.Register(\n    MFiles.Event.CustomCommand,\n    async ( commandId ) => {\n\n        // If something other than our command was clicked then die.\n        if(commandId !== commandOneId)\n            return;\n            \n        // Our context menu command was clicked.\n        await shellFrame.ShowMessage( "My context menu command was clicked." );\n    }\n);\n')),(0,m.kt)("h3",{id:"the-main-menu"},"The main menu"),(0,m.kt)("admonition",{type:"tip"},(0,m.kt)("p",{parentName:"admonition"},"The ",(0,m.kt)("a",{parentName:"p",href:"../../Samples/Commands"},"commands sample")," includes practical examples of code that adds commands to different locations.")),(0,m.kt)("p",null,'Commands can be added to the "main menu", which is located at the top-right of the user interface, as a three-dot icon.  Clicking this icon expands the menu and shows commands added to the menu.'),(0,m.kt)("admonition",{type:"note"},(0,m.kt)("p",{parentName:"admonition"},"The main menu is not shown until one or more UI Extensions add commands to this location.")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-javascript"},'// This code should be placed to run when the shell frame is started.\n\n// Create the command.\nconst commandOneId = await shellFrame.Commands.CreateCustomCommand\n(\n    "My First Command"\n);\n\n// Add the command to the main menu.\nawait shellFrame.Commands.AddCustomCommandToMenu\n(\n    commandOneId,\n    MFiles.MenuLocation.MenuLocation_TopPaneMenu, // Note: top pane menu\n    1\n);\n\n// Show a message when the command is clicked.\nshellFrame.Commands.Events.Register(\n    MFiles.Event.CustomCommand,\n    async ( commandId ) => {\n\n        // If something other than our command was clicked then die.\n        if(commandId !== commandOneId)\n            return;\n            \n        // Our context menu command was clicked.\n        await shellFrame.ShowMessage( "My top menu command was clicked." );\n    }\n);\n')),(0,m.kt)("h4",{id:"child-commands"},"Child commands"),(0,m.kt)("p",null,"The main menu supports commands with sub-menu commands.  This functionality allows you to group commands logically by function within your application:"),(0,m.kt)("p",null,(0,m.kt)("img",{alt:"A main menu command with sub-menu commands",src:t(54770).Z,width:"723",height:"271"})),(0,m.kt)("p",null,"To do this, create the parent command and then call ",(0,m.kt)("inlineCode",{parentName:"p"},"CreateSubMenuItem")," to create child commands:"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-javascript"},'// This code should be placed to run when the shell frame is started.\n\n// Create the parent command.\nconst commandOneId = await shellFrame.Commands.CreateCustomCommand\n(\n    "My First Command"\n);\n\n// Add the parent command to the main menu.\nconst parentMenuItemId  = await shellFrame.Commands.AddCustomCommandToMenu\n(\n    commandOneId,\n    MFiles.MenuLocation.MenuLocation_TopPaneMenu, // Note: top pane menu\n    1\n);\n\n // Create child commands (buttons).\nconst commandChildOneId = await shellFrame.Commands.CreateCustomCommand\n(\n    "My First Child Command"\n);\nconst commandChildTwoId = await shellFrame.Commands.CreateCustomCommand\n(\n    "My Second Child Command"\n);\n\n// Add the child commands to the parent.\nawait shellFrame.Commands.CreateSubMenuItem( parentMenuItemId, commandChildOneId, 1 );\nawait shellFrame.Commands.CreateSubMenuItem( parentMenuItemId, commandChildTwoId, 1 );\n\n\n// Show a message when the command is clicked.\nshellFrame.Commands.Events.Register(\n    MFiles.Event.CustomCommand,\n    async ( commandId ) => {\n\n        // Only react when the child commands are clicked.\n        if(commandId !== commandChildOneId && commandId !== commandChildTwoId)\n            return;\n            \n        // One of the two child commands was clicked.\n        await shellFrame.ShowMessage( "One of the child commands was clicked!" );\n    }\n);\n')),(0,m.kt)("admonition",{type:"note"},(0,m.kt)("p",{parentName:"admonition"},"Context menus do not currently support child commands.")))}p.isMDXComponent=!0},47713:(e,n,t)=>{t.d(n,{ZP:()=>i});var a=t(87462),m=(t(67294),t(3905));const o={toc:[]},d="wrapper";function i(e){let{components:n,...t}=e;return(0,m.kt)(d,(0,a.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null},"Name"),(0,m.kt)("th",{parentName:"tr",align:null},"Value"),(0,m.kt)("th",{parentName:"tr",align:null},"Description"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"MFiles.CommandState.CommandState_Undefined")),(0,m.kt)("td",{parentName:"tr",align:null},"0"),(0,m.kt)("td",{parentName:"tr",align:null},"Undefined value.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"MFiles.CommandState.CommandState_Active")),(0,m.kt)("td",{parentName:"tr",align:null},"1"),(0,m.kt)("td",{parentName:"tr",align:null},"The command is visible and enabled.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"MFiles.CommandState.CommandState_Inactive")),(0,m.kt)("td",{parentName:"tr",align:null},"2"),(0,m.kt)("td",{parentName:"tr",align:null},"The command is visible but not enabled (for example grayed).")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"MFiles.CommandState.CommandState_Hidden")),(0,m.kt)("td",{parentName:"tr",align:null},"3"),(0,m.kt)("td",{parentName:"tr",align:null},"The command is not visible.")))))}i.isMDXComponent=!0},9826:(e,n,t)=>{t.d(n,{ZP:()=>i});var a=t(87462),m=(t(67294),t(3905));const o={toc:[]},d="wrapper";function i(e){let{components:n,...t}=e;return(0,m.kt)(d,(0,a.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-javascript"},"shellFrame.Commands.SetCommandState( \n    commandId, // The ID of the command which state is to be changed\n    MFiles.MenuLocation.MenuLocation_TopPaneMenu, // The menu location of the change\n    MFiles.CommandState.CommandState_Hidden  // New state of the command in specific location or\n);\n")))}i.isMDXComponent=!0},45274:(e,n,t)=>{t(87462),t(67294),t(3905),t(7606),t(94642),t(37415),t(47713),t(9826)},37415:(e,n,t)=>{t.d(n,{ZP:()=>i});var a=t(87462),m=(t(67294),t(3905));const o={toc:[]},d="wrapper";function i(e){let{components:n,...t}=e;return(0,m.kt)(d,(0,a.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,m.kt)("p",null,'This JavaScript code is a UI Extension for M-Files, creating custom commands such as "Hello World" and providing functionality to dynamically show, hide, and remove these commands from the top menu based on user interactions within the M-Files shell.'),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-javascript"},'\n// Called when the UI Extension starts\nfunction OnNewShellUI(shellUI) {\n\n    // Wait for the ShellFrame to be created.\n    shellUI.Events.Register(\n        MFiles.Event.NewShellFrame,\n        async (shellFrame) => {\n\n            // Wait for the shellframe to start\n            shellFrame.Events.Register( \n                MFiles.Event.Started,\n                async () => {\n\n                    // Create a new custom command and menu item for the command\n                    const createCommand = async ( name: string ) => {\n\n                        // Create a new custom command\n                        const commandId = await shellFrame.Commands.CreateCustomCommand(name);\n\n                        // Add the command to the top menu\n                        const menuItemId = await shellFrame.Commands.AddCustomCommandToMenu(\n                            // Command ID\n                            commands.exampleCommand,\n                            // Menulocation\n                            MFiles.MenuLocation.MenuLocation_TopPaneMenu, \n                            // Priority of the command\n                            1 \n                        );\n\n                        // Return a data structure containing essential information about the commands\n                        return {\n                            id: commandId, // ID of the command\n                            menuItemId     // Menu item ID, can be used to add sub menus to this menu item.\n                        }\n                    }\n\n                    // Create an Example command and a set of sample commands to control it\'s visibility\n                    const commands = {\n                        // This is the sample command\n                        exampleCommand : await createCommand("Hello World"),\n\n                        // These commands control the state of the example command\n                        addCommand: await createCommand("Add Command To Menu"),\n                        deleteCustomCommand: await createCommand("Delete Command")\n                        hideCommand: await createCommand("Hide Command"),\n                        showCommand: await createCommand("Activate Command"),\n                        executeCommand: await createCommand("Execute Command"),\n                        getCommandName: await createCommand("Get Name"),\n                        getCommandState: await createCommand("Get Command State"),\n                        removeCommandFromMenu: await createCommand("Remove From Menu"), \n                        removeCommand: await createCommand("Remove Command")\n                    }\n\n                    // Add the command to the top menu\n                    const menuItemId = await shellFrame.Commands.AddCustomCommandToMenu(\n                        commands.exampleCommand,, \n                        MFiles.MenuLocation.MenuLocation_TopPaneMenu, \n                        1 // Priority of the command\n                    );\n\n                    // Listen for the custom commands.\n                    shellFrame.Commands.Events.Register(\n\n                        // Listen for the CustomCommand events.\n                        MFiles.Event.CustomCommand,\n\n                        // Each command has ID and optional data provided with it.\n                        ( commandId, data ) => {\n                            // Respond to the command if custom command sent by the application \n                            switch( commandId ) {\n\n                                // Run the Example command\n                                case commands.exampleCommand.id:\n                                    shellFrame.ShowMessage( "Hello World!" );\n                                    break;\n\n                                // Add the new menuitem which runs the example command\n                                case commands.addCommand.id:\n                                    await shellFrame.Commands.AddCustomCommandToMenu(\n                                        commands.exampleCommand, \n                                        MFiles.MenuLocation.MenuLocation_TopPaneMenu, \n                                        1 // Priority of the command\n                                    );\n                                    break;\n\n                                // Removes the command from particular menu\n                                case commands.removeCommandFromMenu.id:\n                                    await shellFrame.Commands.RemoveCustomCommandFromMenu(\n                                        commands.exampleCommand,, \n                                        MFiles.MenuLocation.MenuLocation_TopPaneMenu\n                                    );\n                                    break;\n\n                                // Deletes the command permanently\n                                case commands.deleteCommand.id:\n                                    shellFrame.Commands.SetCommandState( \n                                        commandId, \n                                        MFiles.CommandLocation.MainMenu,\n                                        MFiles.CommandState.CommandState_Active\n                                    );\n                                    break;\n\n                                // Hiddes all command instances for specific command ID\n                                case commands.hideCommand.id:\n                                     // Hide the command \n                                    shellFrame.Commands.SetCommandState( \n                                        commandId, \n                                        MFiles.CommandLocation.MainMenu,\n                                        MFiles.CommandState.CommandState_Hidden\n                                    );\n                                    break;\n\n                                // Activates (makes visible) all command instances for specific command ID\n                                case commands.showCommand.id:\n                                     // Show the command \n                                    shellFrame.Commands.SetCommandState( \n                                        commandId, \n                                        MFiles.MenuLocation.MenuLocation_TopPaneMenu,\n                                        MFiles.CommandState.CommandState_Active\n                                    );\n                                    break;\n\n                                // Get the command name\n                                case commands.getCommandName.id:\n                                    const name = await shellFrame.Commands.getCommandName(commands.exampleCommand.id);\n                                    shellFrame.ShowMessage( name );\n                                    break;\n\n                                // Get the Command State\n                                case commands.getCommandState.id:\n\n                                    // NOTE: the MFiles.CommandLocation.MainMenu must be used to get state of items added to the Top Menu\n                                    const commandState = await shellFrame.Commands.getCommandState(commands.exampleCommand.id, MFiles.CommandLocation.MainMenu );\n                                    shellFrame.ShowMessage( `Command state: ${commandState}` );\n                                    break;\n\n                            }\n                        }\n                    );\n                }\n            )\n        }\n    )\n}\n')),(0,m.kt)("p",null,"This code is essentially setting up a simple UI extension with custom commands that can be triggered from the top menu, and it allows dynamic control over the visibility of these commands based on user interactions."))}i.isMDXComponent=!0},7606:(e,n,t)=>{t.d(n,{ZP:()=>i});var a=t(87462),m=(t(67294),t(3905));const o={toc:[]},d="wrapper";function i(e){let{components:n,...t}=e;return(0,m.kt)(d,(0,a.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null},"Name"),(0,m.kt)("th",{parentName:"tr",align:null},"Description"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./AddCustomCommandToMenu/"},"AddCustomCommandToMenu")),(0,m.kt)("td",{parentName:"tr",align:null},"Adds existing custom command to the specified context menu location.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./CreateCustomCommand/"},"CreateCustomCommand")),(0,m.kt)("td",{parentName:"tr",align:null},"Creates a custom command that can be added to the application toolbar or to the contextmenu.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./CreateSubMenuItem/"},"CreateSubMenuItem")),(0,m.kt)("td",{parentName:"tr",align:null},"Creates a new SubMenu for already created Menu.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./DeleteCustomCommand/"},"DeleteCustomCommand")),(0,m.kt)("td",{parentName:"tr",align:null},"Deletes a custom command. The command is automatically removed.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./ExecuteCommand/"},"ExecuteCommand")),(0,m.kt)("td",{parentName:"tr",align:null},"Executes a user command.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./GetCommandName/"},"GetCommandName")),(0,m.kt)("td",{parentName:"tr",align:null},"Resolves the name that has been associated with the given command id.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./GetCommandState/"},"GetCommandState")),(0,m.kt)("td",{parentName:"tr",align:null},"Gets the command state for builtin or custom command in specified location.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./RemoveCustomCommandFromMenu/"},"RemoveCustomCommandFromMenu")),(0,m.kt)("td",{parentName:"tr",align:null},"Removes a custom command from the specified menu location.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./RemoveMenuItem/"},"RemoveMenuItem")),(0,m.kt)("td",{parentName:"tr",align:null},"Removes menuitem from the menu.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./SetCommandState/"},"SetCommandState")),(0,m.kt)("td",{parentName:"tr",align:null},"Sets the command's state to be hidden, visible, enabled or disabled. Calling ",(0,m.kt)("br",null),"this method may affect context menu, application toolbar, menus or all of them.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./SetMenuItemState/"},"SetMenuItemState")),(0,m.kt)("td",{parentName:"tr",align:null},"Sets the MenuItem state individually.")))))}i.isMDXComponent=!0},94642:(e,n,t)=>{t.d(n,{ZP:()=>i});var a=t(87462),m=(t(67294),t(3905));const o={toc:[]},d="wrapper";function i(e){let{components:n,...t}=e;return(0,m.kt)(d,(0,a.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null},"Name"),(0,m.kt)("th",{parentName:"tr",align:null},"Type"),(0,m.kt)("th",{parentName:"tr",align:null},"Description"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},"Events"),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/UIExt2/Interfaces/IEvents/"},"IEvents")),(0,m.kt)("td",{parentName:"tr",align:null},"Returns the event registering interface of the ICommands interface.")))))}i.isMDXComponent=!0},98545:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Commands_3-730421ed8e1f84f7055d2d2eb48f0847.png"},54770:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Commands_4-c7b833165385aab6284f99e371dfa361.png"}}]);