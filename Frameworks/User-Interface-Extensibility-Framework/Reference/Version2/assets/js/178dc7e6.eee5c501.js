"use strict";(self.webpackChunkuix_2=self.webpackChunkuix_2||[]).push([[4149],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},m=Object.keys(e);for(a=0;a<m.length;a++)n=m[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(a=0;a<m.length;a++)n=m[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,m=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),c=s(n),p=o,h=c["".concat(l,".").concat(p)]||c[p]||u[p]||m;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var m=n.length,i=new Array(m);i[0]=p;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[c]="string"==typeof e?e:o,i[1]=r;for(var s=2;s<m;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9170:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>m,metadata:()=>r,toc:()=>s});var a=n(87462),o=(n(67294),n(3905));n(47713),n(9826),n(45274);const m={sidebar_position:6},i="Working with the Shell Listing",r={unversionedId:"Overview/ListingView",id:"Overview/ListingView",title:"Working with the Shell Listing",description:"The Shell Listing represents the list of files, objects, views, groupings, or other content shown within the current object listing. Changes in the listing view affect various parts of the client.  For example: when objects are selected or deselected the Preview and Metadata tabs display information about the selected object(s).",source:"@site/docs/Overview/ListingView.mdx",sourceDirName:"Overview",slug:"/Overview/ListingView",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/Version2/Overview/ListingView",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Using Custom Commands",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/Version2/Overview/Commands"},next:{title:"Tabs",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/Version2/Overview/Tabs"}},l={},s=[{value:"Observing the changes to Current Selection",id:"observing-the-changes-to-current-selection",level:3},{value:"Add New File to Multi Document Object",id:"add-new-file-to-multi-document-object",level:3},{value:"Replacing a File",id:"replacing-a-file",level:3},{value:"Selecting Next Object",id:"selecting-next-object",level:3},{value:"Selecting Previous Object",id:"selecting-previous-object",level:3}],d={toc:s},c="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"working-with-the-shell-listing"},"Working with the Shell Listing"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"../../UIExt2/Interfaces/IShellListing/"},"Shell Listing")," represents the list of files, objects, views, groupings, or other content shown within the current object listing. Changes in the listing view affect various parts of the client.  For example: when objects are selected or deselected the Preview and Metadata tabs display information about the selected object(s)."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ActiveListing")," is a property of ",(0,o.kt)("inlineCode",{parentName:"p"},"IShellFrame")," and there are two main events, which are fired when it changes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"MFiles.Event.NewShellListing")," is fired when a new listing is created, for example when user navigates to another view."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"MFiles.Event.SelectionChanged")," is fired when user makes a new selection in the active view, for example by clicking the object with mouse.")),(0,o.kt)("p",null,"All properties and methods of the listing are described in ",(0,o.kt)("a",{parentName:"p",href:"../../UIExt2/Interfaces/IShellListing"},"IShellListing")," and properties and methods of the\nselected items are described in  ",(0,o.kt)("a",{parentName:"p",href:"../../UIExt2/Interfaces/IShellItems"},"IShellItems"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ActiveListing")," has two properties which enumerate the items inside the Listing"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"items")," which is instance of ",(0,o.kt)("a",{parentName:"li",href:"../../UIExt2/Interfaces/IShellItems"},"IShellItems")," holds all items in the listing"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"CurrentSelection")," which is instance of ",(0,o.kt)("a",{parentName:"li",href:"../../UIExt2/Interfaces/IShellItems"},"IShellItems")," holds the user selected items")),(0,o.kt)("h3",{id:"observing-the-changes-to-current-selection"},"Observing the changes to Current Selection"),(0,o.kt)("p",null,"Current selection represents the user selected items from the Listing View."),(0,o.kt)("p",null,"To observe the selection changes of the active selection you can listen to ",(0,o.kt)("inlineCode",{parentName:"p"},"MFiles.Event.SelectionChanged")," event."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"\n// hold the current values \nconst state = {\n    listing: null,\n    selectedItems: null,\n    selectionChangedEventId: 0\n}\n\n// Observe changes to the active view\nshellListing.Events.Register( \n    MFiles.Event.NewShellListing,\n    async (listing) => {\n\n        // Before registering a new handler, unregister the previous event handler\n        if( state.selectionChangedEventId ) {\n            state.listing.Events.Unregister( currentSelection.selectionChangedEventId );\n            state.selectionChangedEventId = 0;\n        }\n\n        // Save the old listing item so that we can unregister the event handler.\n        state.listing = listing;\n\n        // save the event handler id so that we can unregister if if the view changes.\n        state.selectionChangedEventId = await listing.Events.Register(\n            MFiles.Event.SelectionChanged,\n            (items) => {\n                // items is IShellItems instance holding the current selection\n\n                 // log number of selected items\n                console.log( items.Count );\n\n                // get the object verions and log the titles of the files\n                const list = items.ObjectVersions || [];\n                list.forEach( item => {\n                    console.log( item.object_version?.title );\n                })\n            }\n        )\n\n    }\n);\n\n")),(0,o.kt)("h3",{id:"add-new-file-to-multi-document-object"},"Add New File to Multi Document Object"),(0,o.kt)("p",null,"Here is a React example of how to add new file into a multi document object. The Example assumes ",(0,o.kt)("inlineCode",{parentName:"p"},"selectedItems")," has instance of IShellItems."),(0,o.kt)("h3",{id:"replacing-a-file"},"Replacing a File"),(0,o.kt)("p",null,"Here is a  React example of how to replace a file into a normal document object. The Example assumes ",(0,o.kt)("inlineCode",{parentName:"p"},"selectedItems")," has instance of IShellItems."),(0,o.kt)("h3",{id:"selecting-next-object"},"Selecting Next Object"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"listing.SelectNextObject();\n")),(0,o.kt)("h3",{id:"selecting-previous-object"},"Selecting Previous Object"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"listing.SelectPrevObject();\n")))}u.isMDXComponent=!0},47713:(e,t,n)=>{n.d(t,{ZP:()=>r});var a=n(87462),o=(n(67294),n(3905));const m={toc:[]},i="wrapper";function r(e){let{components:t,...n}=e;return(0,o.kt)(i,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Value"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"MFiles.CommandState.CommandState_Undefined")),(0,o.kt)("td",{parentName:"tr",align:null},"0"),(0,o.kt)("td",{parentName:"tr",align:null},"Undefined value.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"MFiles.CommandState.CommandState_Active")),(0,o.kt)("td",{parentName:"tr",align:null},"1"),(0,o.kt)("td",{parentName:"tr",align:null},"The command is visible and enabled.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"MFiles.CommandState.CommandState_Inactive")),(0,o.kt)("td",{parentName:"tr",align:null},"2"),(0,o.kt)("td",{parentName:"tr",align:null},"The command is visible but not enabled (for example grayed).")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"MFiles.CommandState.CommandState_Hidden")),(0,o.kt)("td",{parentName:"tr",align:null},"3"),(0,o.kt)("td",{parentName:"tr",align:null},"The command is not visible.")))))}r.isMDXComponent=!0},9826:(e,t,n)=>{n.d(t,{ZP:()=>r});var a=n(87462),o=(n(67294),n(3905));const m={toc:[]},i="wrapper";function r(e){let{components:t,...n}=e;return(0,o.kt)(i,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"shellFrame.Commands.SetCommandState( \n    commandId, // The ID of the command which state is to be changed\n    MFiles.MenuLocation.MenuLocation_TopPaneMenu, // The menu location of the change\n    MFiles.CommandState.CommandState_Hidden  // New state of the command in specific location or\n);\n")))}r.isMDXComponent=!0},45274:(e,t,n)=>{n(87462),n(67294),n(3905),n(7606),n(94642),n(37415),n(47713),n(9826)},37415:(e,t,n)=>{n.d(t,{ZP:()=>r});var a=n(87462),o=(n(67294),n(3905));const m={toc:[]},i="wrapper";function r(e){let{components:t,...n}=e;return(0,o.kt)(i,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,'This JavaScript code is a UI Extension for M-Files, creating custom commands such as "Hello World" and providing functionality to dynamically show, hide, and remove these commands from the top menu based on user interactions within the M-Files shell.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'\n// Called when the UI Extension starts\nfunction OnNewShellUI(shellUI) {\n\n    // Wait for the ShellFrame to be created.\n    shellUI.Events.Register(\n        MFiles.Event.NewShellFrame,\n        async (shellFrame) => {\n\n            // Wait for the shellframe to start\n            shellFrame.Events.Register( \n                MFiles.Event.Started,\n                async () => {\n\n                    // Create a new custom command and menu item for the command\n                    const createCommand = async ( name: string ) => {\n\n                        // Create a new custom command\n                        const commandId = await shellFrame.Commands.CreateCustomCommand(name);\n\n                        // Add the command to the top menu\n                        const menuItemId = await shellFrame.Commands.AddCustomCommandToMenu(\n                            // Command ID\n                            commands.exampleCommand,\n                            // Menulocation\n                            MFiles.MenuLocation.MenuLocation_TopPaneMenu, \n                            // Priority of the command\n                            1 \n                        );\n\n                        // Return a data structure containing essential information about the commands\n                        return {\n                            id: commandId, // ID of the command\n                            menuItemId     // Menu item ID, can be used to add sub menus to this menu item.\n                        }\n                    }\n\n                    // Create an Example command and a set of sample commands to control it\'s visibility\n                    const commands = {\n                        // This is the sample command\n                        exampleCommand : await createCommand("Hello World"),\n\n                        // These commands control the state of the example command\n                        addCommand: await createCommand("Add Command To Menu"),\n                        deleteCustomCommand: await createCommand("Delete Command")\n                        hideCommand: await createCommand("Hide Command"),\n                        showCommand: await createCommand("Activate Command"),\n                        executeCommand: await createCommand("Execute Command"),\n                        getCommandName: await createCommand("Get Name"),\n                        getCommandState: await createCommand("Get Command State"),\n                        removeCommandFromMenu: await createCommand("Remove From Menu"), \n                        removeCommand: await createCommand("Remove Command")\n                    }\n\n                    // Add the command to the top menu\n                    const menuItemId = await shellFrame.Commands.AddCustomCommandToMenu(\n                        commands.exampleCommand,, \n                        MFiles.MenuLocation.MenuLocation_TopPaneMenu, \n                        1 // Priority of the command\n                    );\n\n                    // Listen for the custom commands.\n                    shellFrame.Commands.Events.Register(\n\n                        // Listen for the CustomCommand events.\n                        MFiles.Event.CustomCommand,\n\n                        // Each command has ID and optional data provided with it.\n                        ( commandId, data ) => {\n                            // Respond to the command if custom command sent by the application \n                            switch( commandId ) {\n\n                                // Run the Example command\n                                case commands.exampleCommand.id:\n                                    shellFrame.ShowMessage( "Hello World!" );\n                                    break;\n\n                                // Add the new menuitem which runs the example command\n                                case commands.addCommand.id:\n                                    await shellFrame.Commands.AddCustomCommandToMenu(\n                                        commands.exampleCommand, \n                                        MFiles.MenuLocation.MenuLocation_TopPaneMenu, \n                                        1 // Priority of the command\n                                    );\n                                    break;\n\n                                // Removes the command from particular menu\n                                case commands.removeCommandFromMenu.id:\n                                    await shellFrame.Commands.RemoveCustomCommandFromMenu(\n                                        commands.exampleCommand,, \n                                        MFiles.MenuLocation.MenuLocation_TopPaneMenu\n                                    );\n                                    break;\n\n                                // Deletes the command permanently\n                                case commands.deleteCommand.id:\n                                    shellFrame.Commands.SetCommandState( \n                                        commandId, \n                                        MFiles.CommandLocation.MainMenu,\n                                        MFiles.CommandState.CommandState_Active\n                                    );\n                                    break;\n\n                                // Hiddes all command instances for specific command ID\n                                case commands.hideCommand.id:\n                                     // Hide the command \n                                    shellFrame.Commands.SetCommandState( \n                                        commandId, \n                                        MFiles.CommandLocation.MainMenu,\n                                        MFiles.CommandState.CommandState_Hidden\n                                    );\n                                    break;\n\n                                // Activates (makes visible) all command instances for specific command ID\n                                case commands.showCommand.id:\n                                     // Show the command \n                                    shellFrame.Commands.SetCommandState( \n                                        commandId, \n                                        MFiles.MenuLocation.MenuLocation_TopPaneMenu,\n                                        MFiles.CommandState.CommandState_Active\n                                    );\n                                    break;\n\n                                // Get the command name\n                                case commands.getCommandName.id:\n                                    const name = await shellFrame.Commands.getCommandName(commands.exampleCommand.id);\n                                    shellFrame.ShowMessage( name );\n                                    break;\n\n                                // Get the Command State\n                                case commands.getCommandState.id:\n\n                                    // NOTE: the MFiles.CommandLocation.MainMenu must be used to get state of items added to the Top Menu\n                                    const commandState = await shellFrame.Commands.getCommandState(commands.exampleCommand.id, MFiles.CommandLocation.MainMenu );\n                                    shellFrame.ShowMessage( `Command state: ${commandState}` );\n                                    break;\n\n                            }\n                        }\n                    );\n                }\n            )\n        }\n    )\n}\n')),(0,o.kt)("p",null,"This code is essentially setting up a simple UI extension with custom commands that can be triggered from the top menu, and it allows dynamic control over the visibility of these commands based on user interactions."))}r.isMDXComponent=!0},7606:(e,t,n)=>{n.d(t,{ZP:()=>r});var a=n(87462),o=(n(67294),n(3905));const m={toc:[]},i="wrapper";function r(e){let{components:t,...n}=e;return(0,o.kt)(i,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./AddCustomCommandToMenu/"},"AddCustomCommandToMenu")),(0,o.kt)("td",{parentName:"tr",align:null},"Adds existing custom command to the specified context menu location.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./CreateCustomCommand/"},"CreateCustomCommand")),(0,o.kt)("td",{parentName:"tr",align:null},"Creates a custom command that can be added to the application toolbar or to the contextmenu.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./CreateSubMenuItem/"},"CreateSubMenuItem")),(0,o.kt)("td",{parentName:"tr",align:null},"Creates a new SubMenu for already created Menu.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./DeleteCustomCommand/"},"DeleteCustomCommand")),(0,o.kt)("td",{parentName:"tr",align:null},"Deletes a custom command. The command is automatically removed.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./ExecuteCommand/"},"ExecuteCommand")),(0,o.kt)("td",{parentName:"tr",align:null},"Executes a user command.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./GetCommandName/"},"GetCommandName")),(0,o.kt)("td",{parentName:"tr",align:null},"Resolves the name that has been associated with the given command id.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./GetCommandState/"},"GetCommandState")),(0,o.kt)("td",{parentName:"tr",align:null},"Gets the command state for builtin or custom command in specified location.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./RemoveCustomCommandFromMenu/"},"RemoveCustomCommandFromMenu")),(0,o.kt)("td",{parentName:"tr",align:null},"Removes a custom command from the specified menu location.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./RemoveMenuItem/"},"RemoveMenuItem")),(0,o.kt)("td",{parentName:"tr",align:null},"Removes menuitem from the menu.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./SetCommandState/"},"SetCommandState")),(0,o.kt)("td",{parentName:"tr",align:null},"Sets the command's state to be hidden, visible, enabled or disabled. Calling ",(0,o.kt)("br",null),"this method may affect context menu, application toolbar, menus or all of them.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./SetMenuItemState/"},"SetMenuItemState")),(0,o.kt)("td",{parentName:"tr",align:null},"Sets the MenuItem state individually.")))))}r.isMDXComponent=!0},94642:(e,t,n)=>{n.d(t,{ZP:()=>r});var a=n(87462),o=(n(67294),n(3905));const m={toc:[]},i="wrapper";function r(e){let{components:t,...n}=e;return(0,o.kt)(i,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Events"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/UIExt2/Interfaces/IEvents/"},"IEvents")),(0,o.kt)("td",{parentName:"tr",align:null},"Returns the event registering interface of the ICommands interface.")))))}r.isMDXComponent=!0}}]);