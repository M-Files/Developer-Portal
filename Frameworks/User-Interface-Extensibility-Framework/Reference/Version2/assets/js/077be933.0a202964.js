"use strict";(self.webpackChunkuix_2=self.webpackChunkuix_2||[]).push([[752],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>C});var a=t(67294);function m(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){m(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,m=function(e,n){if(null==e)return{};var t,a,m={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(m[t]=e[t]);return m}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(m[t]=e[t])}return m}var s=a.createContext({}),i=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=i(e.components);return a.createElement(s.Provider,{value:n},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,m=e.mdxType,o=e.originalType,s=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),l=i(t),p=m,C=l["".concat(s,".").concat(p)]||l[p]||u[p]||o;return t?a.createElement(C,r(r({ref:n},c),{},{components:t})):a.createElement(C,r({ref:n},c))}));function C(e,n){var t=arguments,m=n&&n.mdxType;if("string"==typeof e||m){var o=t.length,r=new Array(o);r[0]=p;var d={};for(var s in n)hasOwnProperty.call(n,s)&&(d[s]=n[s]);d.originalType=e,d[l]="string"==typeof e?e:m,r[1]=d;for(var i=2;i<o;i++)r[i]=t[i];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},18679:(e,n,t)=>{t.d(n,{Z:()=>r});var a=t(67294),m=t(86010);const o={tabItem:"tabItem_Ymn6"};function r(e){let{children:n,hidden:t,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,m.Z)(o.tabItem,r),hidden:t},n)}},34259:(e,n,t)=>{t(67294),t(51048)},92093:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>M,contentTitle:()=>f,default:()=>w,frontMatter:()=>h,metadata:()=>y,toc:()=>k});var a=t(87462),m=(t(67294),t(3905));const o={toc:[]},r="wrapper";function d(e){let{components:n,...t}=e;return(0,m.kt)(r,(0,a.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null},"Type"),(0,m.kt)("th",{parentName:"tr",align:null},"Description"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},"Promise < ",(0,m.kt)("inlineCode",{parentName:"td"},"number")," >"),(0,m.kt)("td",{parentName:"tr",align:null},"Returns the command id of the created custom command.")))))}d.isMDXComponent=!0;const s={toc:[]},i="wrapper";function c(e){let{components:n,...t}=e;return(0,m.kt)(i,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null},"Name"),(0,m.kt)("th",{parentName:"tr",align:null},"Type"),(0,m.kt)("th",{parentName:"tr",align:null},"Description"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},"commandName"),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"string")),(0,m.kt)("td",{parentName:"tr",align:null},"The custom command's name.")))))}c.isMDXComponent=!0;t(34259),t(18679);var l=t(37415);const u={toc:[]},p="wrapper";function C(e){let{components:n,...t}=e;return(0,m.kt)(p,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-javascript"},"// Create a new custom command using IShellFrame instance.\nconst commandId = await shellFrame.Commands.CreateCustomCommand(name);\n")))}C.isMDXComponent=!0;const h={},f="CreateCustomCommand",y={unversionedId:"UIExt2/Interfaces/ICommands/CreateCustomCommand/index",id:"UIExt2/Interfaces/ICommands/CreateCustomCommand/index",title:"CreateCustomCommand",description:"Description",source:"@site/docs/UIExt2/Interfaces/ICommands/CreateCustomCommand/index.mdx",sourceDirName:"UIExt2/Interfaces/ICommands/CreateCustomCommand",slug:"/UIExt2/Interfaces/ICommands/CreateCustomCommand/",permalink:"/UIExt2/Interfaces/ICommands/CreateCustomCommand/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"AddCustomCommandToMenu",permalink:"/UIExt2/Interfaces/ICommands/AddCustomCommandToMenu/"},next:{title:"CreateSubMenuItem",permalink:"/UIExt2/Interfaces/ICommands/CreateSubMenuItem/"}},M={},k=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return type",id:"return-type",level:2},{value:"Example",id:"example",level:2}],b={toc:k},v="wrapper";function w(e){let{components:n,...t}=e;return(0,m.kt)(v,(0,a.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,m.kt)("h1",{id:"createcustomcommand"},"CreateCustomCommand"),(0,m.kt)("h2",{id:"description"},"Description"),(0,m.kt)("p",null,"The ",(0,m.kt)("inlineCode",{parentName:"p"},"CreateCustomCommand")," function is a functionality within the M-Files UI Extension framework designed for creating custom commands dynamically.\nThis function enables developers to define and generate new custom commands programmatically.\nIt accepts the name of the command as a parameter, and it returns a unique identifier (ID) associated with the newly created command. "),(0,m.kt)("p",null,"The created command ID can then be consumed for example by"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",{parentName:"li",href:"../AddCustomCommandToMenu/"},"AddCustomCommandToMenu")," to create a new Menu item which executes the command"),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",{parentName:"li",href:"../ExecuteCommand/"},"ExecuteCommand")," to directly execute the command inside the application with optional command arguments"),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",{parentName:"li",href:"../CreateSubMenuItem/"},"CreateSubMenuItem")," to create submenu commands.")),(0,m.kt)("p",null,"You can control the visibility of the command in M-Files menus using ",(0,m.kt)("a",{parentName:"p",href:"../SetCommandState"},"SetCommandState"),"."),(0,m.kt)("p",null,"Command can be removed using ",(0,m.kt)("a",{parentName:"p",href:"../DeleteCustomCommand"},"DeleteCustomCommand"),"."),(0,m.kt)("h2",{id:"syntax"},"Syntax"),(0,m.kt)(C,{components:t.components,mdxType:"ExampleShort"}),(0,m.kt)("h2",{id:"parameters"},"Parameters"),(0,m.kt)(c,{components:t.components,mdxType:"Params"}),(0,m.kt)("h2",{id:"return-type"},"Return type"),(0,m.kt)(d,{components:t.components,mdxType:"Returns"}),(0,m.kt)("h2",{id:"example"},"Example"),(0,m.kt)(l.ZP,{components:t.components,mdxType:"Example"}))}w.isMDXComponent=!0},37415:(e,n,t)=>{t.d(n,{ZP:()=>d});var a=t(87462),m=(t(67294),t(3905));const o={toc:[]},r="wrapper";function d(e){let{components:n,...t}=e;return(0,m.kt)(r,(0,a.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,m.kt)("p",null,'This JavaScript code is a UI Extension for M-Files, creating custom commands such as "Hello World" and providing functionality to dynamically show, hide, and remove these commands from the top menu based on user interactions within the M-Files shell.'),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-javascript"},'\n// Called when the UI Extension starts\nfunction OnNewShellUI(shellUI) {\n\n    // Wait for the ShellFrame to be created.\n    shellUI.Events.Register(\n        MFiles.Event.NewShellFrame,\n        async (shellFrame) => {\n\n            // Wait for the shellframe to start\n            shellFrame.Events.Register( \n                MFiles.Event.Started,\n                async () => {\n\n                    // Create a new custom command and menu item for the command\n                    const createCommand = async ( name: string ) => {\n\n                        // Create a new custom command\n                        const commandId = await shellFrame.Commands.CreateCustomCommand(name);\n\n                        // Add the command to the top menu\n                        const menuItemId = await shellFrame.Commands.AddCustomCommandToMenu(\n                            // Command ID\n                            commands.exampleCommand,\n                            // Menulocation\n                            MFiles.MenuLocation.MenuLocation_TopPaneMenu, \n                            // Priority of the command\n                            1 \n                        );\n\n                        // Return a data structure containing essential information about the commands\n                        return {\n                            id: commandId, // ID of the command\n                            menuItemId     // Menu item ID, can be used to add sub menus to this menu item.\n                        }\n                    }\n\n                    // Create an Example command and a set of sample commands to control it\'s visibility\n                    const commands = {\n                        // This is the sample command\n                        exampleCommand : await createCommand("Hello World"),\n\n                        // These commands control the state of the example command\n                        addCommand: await createCommand("Add Command To Menu"),\n                        deleteCustomCommand: await createCommand("Delete Command")\n                        hideCommand: await createCommand("Hide Command"),\n                        showCommand: await createCommand("Activate Command"),\n                        executeCommand: await createCommand("Execute Command"),\n                        getCommandName: await createCommand("Get Name"),\n                        getCommandState: await createCommand("Get Command State"),\n                        removeCommandFromMenu: await createCommand("Remove From Menu"), \n                        removeCommand: await createCommand("Remove Command")\n                    }\n\n                    // Add the command to the top menu\n                    const menuItemId = await shellFrame.Commands.AddCustomCommandToMenu(\n                        commands.exampleCommand,, \n                        MFiles.MenuLocation.MenuLocation_TopPaneMenu, \n                        1 // Priority of the command\n                    );\n\n                    // Listen for the custom commands.\n                    shellFrame.Commands.Events.Register(\n\n                        // Listen for the CustomCommand events.\n                        MFiles.Event.CustomCommand,\n\n                        // Each command has ID and optional data provided with it.\n                        ( commandId, data ) => {\n                            // Respond to the command if custom command sent by the application \n                            switch( commandId ) {\n\n                                // Run the Example command\n                                case commands.exampleCommand.id:\n                                    shellFrame.ShowMessage( "Hello World!" );\n                                    break;\n\n                                // Add the new menuitem which runs the example command\n                                case commands.addCommand.id:\n                                    await shellFrame.Commands.AddCustomCommandToMenu(\n                                        commands.exampleCommand, \n                                        MFiles.MenuLocation.MenuLocation_TopPaneMenu, \n                                        1 // Priority of the command\n                                    );\n                                    break;\n\n                                // Removes the command from particular menu\n                                case commands.removeCommandFromMenu.id:\n                                    await shellFrame.Commands.RemoveCustomCommandFromMenu(\n                                        commands.exampleCommand,, \n                                        MFiles.MenuLocation.MenuLocation_TopPaneMenu\n                                    );\n                                    break;\n\n                                // Deletes the command permanently\n                                case commands.deleteCommand.id:\n                                    shellFrame.Commands.SetCommandState( \n                                        commandId, \n                                        MFiles.CommandLocation.MainMenu,\n                                        MFiles.CommandState.CommandState_Active\n                                    );\n                                    break;\n\n                                // Hiddes all command instances for specific command ID\n                                case commands.hideCommand.id:\n                                     // Hide the command \n                                    shellFrame.Commands.SetCommandState( \n                                        commandId, \n                                        MFiles.CommandLocation.MainMenu,\n                                        MFiles.CommandState.CommandState_Hidden\n                                    );\n                                    break;\n\n                                // Activates (makes visible) all command instances for specific command ID\n                                case commands.showCommand.id:\n                                     // Show the command \n                                    shellFrame.Commands.SetCommandState( \n                                        commandId, \n                                        MFiles.MenuLocation.MenuLocation_TopPaneMenu,\n                                        MFiles.CommandState.CommandState_Active\n                                    );\n                                    break;\n\n                                // Get the command name\n                                case commands.getCommandName.id:\n                                    const name = await shellFrame.Commands.getCommandName(commands.exampleCommand.id);\n                                    shellFrame.ShowMessage( name );\n                                    break;\n\n                                // Get the Command State\n                                case commands.getCommandState.id:\n\n                                    // NOTE: the MFiles.CommandLocation.MainMenu must be used to get state of items added to the Top Menu\n                                    const commandState = await shellFrame.Commands.getCommandState(commands.exampleCommand.id, MFiles.CommandLocation.MainMenu );\n                                    shellFrame.ShowMessage( `Command state: ${commandState}` );\n                                    break;\n\n                            }\n                        }\n                    );\n                }\n            )\n        }\n    )\n}\n')),(0,m.kt)("p",null,"This code is essentially setting up a simple UI extension with custom commands that can be triggered from the top menu, and it allows dynamic control over the visibility of these commands based on user interactions."))}d.isMDXComponent=!0}}]);