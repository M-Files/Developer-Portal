"use strict";(self.webpackChunkuix_2=self.webpackChunkuix_2||[]).push([[9688],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var o=a.createContext({}),m=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=m(e.components);return a.createElement(o.Provider,{value:n},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=m(t),p=l,u=c["".concat(o,".").concat(p)]||c[p]||h[p]||r;return t?a.createElement(u,s(s({ref:n},d),{},{components:t})):a.createElement(u,s({ref:n},d))}));function u(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,s=new Array(r);s[0]=p;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i[c]="string"==typeof e?e:l,s[1]=i;for(var m=2;m<r;m++)s[m]=t[m];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},71788:(e,n,t)=>{t.d(n,{Z:()=>r});var a=t(67294),l=t(34274);function r(e){let{children:n}=e;return a.createElement("div",{className:l.Z.filetitle},n)}},84473:(e,n,t)=>{t.d(n,{Z:()=>r});var a=t(67294),l=t(34274);function r(e){let{children:n}=e;return a.createElement("span",{className:l.Z.highlight},n)}},54930:(e,n,t)=>{t.d(n,{Z:()=>r});var a=t(67294),l=t(34274);function r(e){let{children:n}=e;return a.createElement("div",{className:l.Z.idea},n)}},62913:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>m,default:()=>v,frontMatter:()=>o,metadata:()=>d,toc:()=>h});var a=t(87462),l=(t(67294),t(3905)),r=t(84473),s=t(54930),i=t(71788);const o={sidebar_position:7,sidebar_label:"Assign to me UIX sample"},m="Creating assignments for selected objects",d={unversionedId:"Samples/AssignToMe/index",id:"Samples/AssignToMe/index",title:"Creating assignments for selected objects",description:"Overview",source:"@site/docs/Samples/AssignToMe/index.mdx",sourceDirName:"Samples/AssignToMe",slug:"/Samples/AssignToMe/",permalink:"/Samples/AssignToMe/",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,sidebar_label:"Assign to me UIX sample"},sidebar:"tutorialSidebar",previous:{title:"ShellFrame & Dashboard",permalink:"/Samples/ShellFrameAndDashboard/"},next:{title:"Upgrading applications",permalink:"/upgrading"}},c={},h=[{value:"Overview",id:"overview",level:2},{value:"Creating the application structure",id:"creating-the-application-structure",level:2},{value:"Creating the application definition file",id:"creating-the-application-definition-file",level:3},{value:"Creating the module",id:"creating-the-module",level:3},{value:"Reacting to shell listing selection changes",id:"reacting-to-shell-listing-selection-changes",level:3},{value:"Creating the assignment object",id:"creating-the-assignment-object",level:3},{value:"Testing the application",id:"testing-the-application",level:2}],p=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",n)},u=p("Tabs"),g=p("TabItem"),y={toc:h},f="wrapper";function v(e){let{components:n,...o}=e;return(0,l.kt)(f,(0,a.Z)({},y,o,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"creating-assignments-for-selected-objects"},"Creating assignments for selected objects"),(0,l.kt)("h2",{id:"overview"},"Overview"),(0,l.kt)("p",null,"This sample creates a basic User Interface Extensibility Framework application consisting of one ShellUI module which allows the user to select objects within the M-Files vault and assign them to themselves via a button in the main menu."),(0,l.kt)("p",null,"This sample does not show how to create a local development folder or to deploy the code to the M-Files server. It is assumed that a local development folder already exists, and that is the location in which the development is occurring."),(0,l.kt)("h2",{id:"creating-the-application-structure"},"Creating the application structure"),(0,l.kt)("h3",{id:"creating-the-application-definition-file"},"Creating the application definition file"),(0,l.kt)("p",null,"Into this folder we will create an application definition file. This file must be named ",(0,l.kt)(r.Z,{mdxType:"Highlight"},"appdef.xml"),". The application will use version 4 of the client schema (as we are only targeting newer M-Files versions), and the supported platform will be set as newweb only. The application will declare a single Shell UI module (with its code in ",(0,l.kt)(r.Z,{mdxType:"Highlight"},"main.js"),"), and no dashboards."),(0,l.kt)(i.Z,{mdxType:"FileTitle"},"appdef.xml"),(0,l.kt)(u,{mdxType:"Tabs"},(0,l.kt)(g,{value:"xml",label:"XML",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0"?>\n<application xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.m-files.com/schemas/appdef-client-v4.xsd">\n    <guid>C311B570-40F4-4893-96C8-05110A30743C</guid>\n    <name>Assign to me UIX sample</name>\n    <version>0.1</version>\n    <description>A demonstration application for reacting to selected items and assigning them via a command.</description>\n    <publisher>M-Files Corporation</publisher>\n    <copyright>(c) M-Files Corporation</copyright>\n    <required-mfiles-version>24.1.13312.0</required-mfiles-version>\n    <enabled-by-default>true</enabled-by-default>\n    <platforms>\n        <platform>Newweb</platform>\n    </platforms>\n    <modules>\n        <module environment="shellui" fast-browsing-compatible="true">\n        <file>main.js</file>\n        </module>\n    </modules>\n</application>\n\n')))),(0,l.kt)(s.Z,{mdxType:"Idea"},"Ensure that your application has a unique GUID by using a GUID generator."),(0,l.kt)("h3",{id:"creating-the-module"},"Creating the module"),(0,l.kt)("p",null,"Next we will create a module file to contain our actual application logic. Initially:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"We will declare a default entry point for the ShellUI module."),(0,l.kt)("li",{parentName:"ul"},"We will react to the ",(0,l.kt)(r.Z,{mdxType:"Highlight"},"NewShellFrame")," event and obtain a reference to the shell frame."),(0,l.kt)("li",{parentName:"ul"},"We will react to the shell frame\u2019s ",(0,l.kt)(r.Z,{mdxType:"Highlight"},"Started")," event (as using the shell frame before this point will result in an exception)."),(0,l.kt)("li",{parentName:"ul"},"Create a command (button, place it into the menu area, and hide it."),(0,l.kt)("li",{parentName:"ul"},"React to the shellFrame\u2019s ",(0,l.kt)(r.Z,{mdxType:"Highlight"},"CustomCommand")," event and add some placeholder code to execute when the command is clicked.")),(0,l.kt)(i.Z,{mdxType:"FileTitle"},"main.js"),(0,l.kt)(u,{mdxType:"Tabs"},(0,l.kt)(g,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'// NOTE! This code is for demonstration purposes only and does not contain any kind of\n//       error handling. MUST be revised before using in production.\n\nfunction OnNewShellUI( shellUI ) {\n\n    /// <summary>The entry point of ShellUI module.</summary>\n    /// <param name="shellUI" type="MFiles.ShellUI">The new shell UI object.</param> \n    \n    // Register to be notified when a new normal shell frame (Event_NewShellFrame) is created.\n    // We use Event_NewShellFrame rather than Event_NewShellFrame as this won\'t fire for history (etc.) dialogs.\n    shellUI.Events.Register(\n        MFiles.Event.NewShellFrame,\n        handleNewShellFrame );\n}\n\nfunction handleNewShellFrame( shellFrame ) {\n\n    /// <summary>Handles the OnNewShellFrame event for an IShellUI.</summary>\n    /// <param name="shellFrame" type="MFiles.ShellFrame">The shell frame object which was created.</param> \n\n    // Register to listen to the started event.\n    shellFrame.Events.Register(\n        MFiles.Event.Started,\n        getShellFrameStartedHandler( shellFrame ) );\n}\n\nfunction getShellFrameStartedHandler( shellFrame ) {\n\n    /// <summary>Gets a function to handle the Started event for shell frame.</summary>\n    /// <param name="shellFrame" type="MFiles.ShellFrame">The current shell frame object.</param> \n    /// <returns type="MFiles.Events.OnStarted">The event handler.</returns>\n\n    // Return the handler function for ShellFrame\'s Started event.\n    return async () => {\n    \n        // Create a command for "assign to me".\n        const assignCommandId = await shellFrame.Commands.CreateCustomCommand( "Assign to me" );\n\n        // Add the command to the main menu.\n        await shellFrame.Commands.AddCustomCommandToMenu( assignCommandId, MFiles.MenuLocation.MenuLocation_TopPaneMenu, 1 );\n\n        // Hide the command.  We will show it when the selected items change.\n        await shellFrame.Commands.SetCommandState( assignCommandId, MFiles.CommandLocation.All, MFiles.CommandState.CommandState_Hidden );\n\n        // Register to respond to commands being clicked.\n        shellFrame.Commands.Events.Register(\n            MFiles.Event.CustomCommand,\n            async ( command ) => {\n\n                // We only care about our command.\n                // If the command being clicked is something else then return.\n                if( command !== assignCommandId ) {\n                    return;\n                }\n\n                // TODO: Ensure we have items to process.\n\n                // TODO: Create the assignment object.\n            } );\n    };\n}\n')))),(0,l.kt)("h3",{id:"reacting-to-shell-listing-selection-changes"},"Reacting to shell listing selection changes"),(0,l.kt)("p",null,"We must be able to react to selection changes in the listing."),(0,l.kt)("p",null,"We will:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Declare a global variable to hold the currently-selected items (",(0,l.kt)(r.Z,{mdxType:"Highlight"},"currentlySelectedItems"),")."),(0,l.kt)("li",{parentName:"ul"},"React to the shell frame\u2019s ",(0,l.kt)(r.Z,{mdxType:"Highlight"},"NewShellListing")," event to attach event handlers to each shell listing."),(0,l.kt)("li",{parentName:"ul"},"Alter the visibility of the command depending on whether or not any objects are currently selected."),(0,l.kt)("li",{parentName:"ul"},"React to each shell listing\u2019s ",(0,l.kt)(r.Z,{mdxType:"Highlight"},"SelectionChanged")," event, saving the currently-selected items.")),(0,l.kt)(i.Z,{mdxType:"FileTitle"},"main.js"),(0,l.kt)(u,{mdxType:"Tabs"},(0,l.kt)(g,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'// NOTE! This code is for demonstration purposes only and does not contain any kind of\n//       error handling. MUST be revised before using in production.\n\n// The currently-selected items in the active listing.\nlet currentlySelectedItems = null;\n\nfunction OnNewShellUI( shellUI ) {\n\n    /// <summary>The entry point of ShellUI module.</summary>\n    /// <param name="shellUI" type="MFiles.ShellUI">The new shell UI object.</param> \n    \n    // Register to be notified when a new normal shell frame (Event_NewShellFrame) is created.\n    // We use Event_NewShellFrame rather than Event_NewShellFrame as this won\'t fire for history (etc.) dialogs.\n    shellUI.Events.Register(\n        MFiles.Event.NewShellFrame,\n        handleNewShellFrame );\n}\n\nfunction handleNewShellFrame( shellFrame ) {\n\n    /// <summary>Handles the OnNewShellFrame event for an IShellUI.</summary>\n    /// <param name="shellFrame" type="MFiles.ShellFrame">The shell frame object which was created.</param> \n\n    // Register to listen to the started event.\n    shellFrame.Events.Register(\n        MFiles.Event.Started,\n        getShellFrameStartedHandler( shellFrame ) );\n}\n\nfunction getShellFrameStartedHandler( shellFrame ) {\n\n    /// <summary>Gets a function to handle the Started event for shell frame.</summary>\n    /// <param name="shellFrame" type="MFiles.ShellFrame">The current shell frame object.</param> \n    /// <returns type="MFiles.Events.OnStarted">The event handler.</returns>\n\n    // Return the handler function for ShellFrame\'s Started event.\n    return async () => {\n    \n        // Create a command for "assign to me".\n        const assignCommandId = await shellFrame.Commands.CreateCustomCommand( "Assign to me" );\n\n        // Add the command to the main menu.\n        await shellFrame.Commands.AddCustomCommandToMenu( assignCommandId, MFiles.MenuLocation.MenuLocation_TopPaneMenu, 1 );\n\n        // Hide the command.  We will show it when the selected items change.\n        await shellFrame.Commands.SetCommandState( assignCommandId, MFiles.CommandLocation.All, MFiles.CommandState.CommandState_Hidden );\n\n        // Register to listen to when new shell listings are created.\n        shellFrame.Events.Register(\n            MFiles.Event.NewShellListing,\n            getNewShellListingHandler( shellFrame, assignCommandId ) );\n\n        // Register to respond to commands being clicked.\n        shellFrame.Commands.Events.Register(\n            MFiles.Event.CustomCommand,\n            async ( command ) => {\n\n                // We only care about our command.\n                // If the command being clicked is something else then return.\n                if( command !== assignCommandId ) {\n                    return;\n                }\n\n                // Ensure we have items to process.\n                if( !currentlySelectedItems ) {\n                    return;\n                }\n\n                // TODO: Create the assignment object.\n            } );\n    };\n}\n\nfunction getNewShellListingHandler( shellFrame, assignCommandId ) {\n\n    /// <summary>Gets a function to handle the NewShellListing event for shell frame.</summary>\n    /// <param name="shellFrame" type="MFiles.ShellFrame">The current shell frame object.</param> \n    /// <returns type="MFiles.Events.OnNewShellListing">The event handler.</returns>\n\n    // Return the handler function for NewShellListing event.\n    return ( shellListing ) => {\n\n        // Listen for selection change events on the listing.\n        shellListing.Events.Register(\n            MFiles.Event.SelectionChanged,\n            async ( selectedItems ) => {\n\n                // Sanity.\n                if( shellListing.IsActive === false ) {\n                    return false;\n                }\n\n                // Set the currently-selected items to null (assume nothing selected).\n                currentlySelectedItems = null;\n\n                // Has the user got any object versions selected?\n                if( selectedItems.ObjectVersions.length === 0 ) {\n\n                    // Hide the menu item - there\'s nothing selected.\n                    await shellFrame.Commands.SetCommandState( assignCommandId, MFiles.CommandLocation.All, MFiles.CommandState.CommandState_Hidden );\n                    return false;\n                }\n\n                // Show the menu item.\n                await shellFrame.Commands.SetCommandState( assignCommandId, MFiles.CommandLocation.All, MFiles.CommandState.CommandState_Active );\n\n                // Store the selected items.\n                currentlySelectedItems = selectedItems;\n\n                // We succeeded; return true.\n                return true;\n            } );\n    };\n}\n')))),(0,l.kt)("h3",{id:"creating-the-assignment-object"},"Creating the assignment object"),(0,l.kt)("p",null,"We will:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Create a function that creates the assignment object (",(0,l.kt)(r.Z,{mdxType:"Highlight"},"createAssigmentObject"),"). Specifically, it will:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Create property values for the built-in properties used by the ",(0,l.kt)(r.Z,{mdxType:"Highlight"},"Assignment")," object type:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Class."),(0,l.kt)("li",{parentName:"ul"},"Name or title."),(0,l.kt)("li",{parentName:"ul"},"Single file document."),(0,l.kt)("li",{parentName:"ul"},"Assigned to."))),(0,l.kt)("li",{parentName:"ul"},"Create properties to establish relationships between the assignment object and the currently-selected items."),(0,l.kt)("li",{parentName:"ul"},"Create the object and check it in immediately."))),(0,l.kt)("li",{parentName:"ul"},"Call the function when the command is clicked.")),(0,l.kt)(i.Z,{mdxType:"FileTitle"},"main.js"),(0,l.kt)(u,{mdxType:"Tabs"},(0,l.kt)(g,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'// NOTE! This code is for demonstration purposes only and does not contain any kind of\n//       error handling. MUST be revised before using in production.\n\n// The currently-selected items in the active listing.\nlet currentlySelectedItems = null;\n\n// Built in property defs.\nconst BuiltInPropertyDefs = {\n    Class: 100,\n    NameOrTitle: 0,\n    SingleFlie: 22,\n    AssignedTo: 44\n};\n\n// Built in object types.\nconst BuiltInObjectType = {\n    Assignment: 10\n};\n\n// Null value of GUID.\nconst GUID_NULL = "{00000000-0000-0000-0000-000000000000}";\n\nfunction OnNewShellUI( shellUI ) {\n\n    /// <summary>The entry point of ShellUI module.</summary>\n    /// <param name="shellUI" type="MFiles.ShellUI">The new shell UI object.</param> \n    \n    // Register to be notified when a new normal shell frame (Event_NewShellFrame) is created.\n    // We use Event_NewShellFrame rather than Event_NewShellFrame as this won\'t fire for history (etc.) dialogs.\n    shellUI.Events.Register(\n        MFiles.Event.NewShellFrame,\n        handleNewShellFrame );\n}\n\nfunction handleNewShellFrame( shellFrame ) {\n\n    /// <summary>Handles the OnNewShellFrame event for an IShellUI.</summary>\n    /// <param name="shellFrame" type="MFiles.ShellFrame">The shell frame object which was created.</param> \n\n    // Register to listen to the started event.\n    shellFrame.Events.Register(\n        MFiles.Event.Started,\n        getShellFrameStartedHandler( shellFrame ) );\n}\n\nfunction getShellFrameStartedHandler( shellFrame ) {\n\n    /// <summary>Gets a function to handle the Started event for shell frame.</summary>\n    /// <param name="shellFrame" type="MFiles.ShellFrame">The current shell frame object.</param> \n    /// <returns type="MFiles.Events.OnStarted">The event handler.</returns>\n\n    // Return the handler function for ShellFrame\'s Started event.\n    return async () => {\n\n        // Create a command for "assign to me".\n        const assignCommandId = await shellFrame.Commands.CreateCustomCommand( "Assign to me" );\n\n        // Add the command to the main menu.\n        await shellFrame.Commands.AddCustomCommandToMenu( assignCommandId, MFiles.MenuLocation.MenuLocation_TopPaneMenu, 1 );\n\n        // Hide the command.  We will show it when the selected items change.\n        await shellFrame.Commands.SetCommandState( assignCommandId, MFiles.CommandLocation.All, MFiles.CommandState.CommandState_Hidden );\n\n        // Register to listen to when new shell listings are created.\n        shellFrame.Events.Register(\n            MFiles.Event.NewShellListing,\n            getNewShellListingHandler( shellFrame, assignCommandId ) );\n\n        // Is there already a listing?  If so then we need to hook into it as well.\n        if( shellFrame.Listing ) {\n            getNewShellListingHandler( shellFrame, assignCommandId )( shellFrame.Listing );\n        }\n\n        // Register to respond to commands being clicked.\n        shellFrame.Commands.Events.Register(\n            MFiles.Event.CustomCommand,\n            async ( command ) => {\n\n                // We only care about our command.\n                // If the command being clicked is something else then return.\n                if( command !== assignCommandId ) {\n                    return;\n                }\n\n                // Ensure we have items to process.\n                if( !currentlySelectedItems ) {\n                    return;\n                }\n\n                // Create the assignment object.\n                await createAssignmentObject( shellFrame );\n            } );\n    };\n}\n\nfunction getNewShellListingHandler( shellFrame, assignCommandId ) {\n\n    /// <summary>Gets a function to handle the NewShellListing event for shell frame.</summary>\n    /// <param name="shellFrame" type="MFiles.ShellFrame">The current shell frame object.</param> \n    /// <returns type="MFiles.Events.OnNewShellListing">The event handler.</returns>\n\n    // Return the handler function for NewShellListing event.\n    return ( shellListing ) => {\n\n        // Listen for selection change events on the listing.\n        shellListing.Events.Register(\n            MFiles.Event.SelectionChanged,\n            async ( selectedItems ) => {\n\n                // Sanity.\n                if( shellListing.IsActive === false ) {\n                    return false;\n                }\n\n                // Set the currently-selected items to null (assume nothing selected).\n                currentlySelectedItems = null;\n\n                // Has the user got any object versions selected?\n                if( selectedItems.ObjectVersions.length === 0 ) {\n\n                    // Hide the menu item - there\'s nothing selected.\n                    await shellFrame.Commands.SetCommandState( assignCommandId, MFiles.CommandLocation.All, MFiles.CommandState.CommandState_Hidden );\n                    return false;\n                }\n\n                // Show the menu item.\n                await shellFrame.Commands.SetCommandState( assignCommandId, MFiles.CommandLocation.All, MFiles.CommandState.CommandState_Active );\n\n                // Store the selected items.\n                currentlySelectedItems = selectedItems;\n\n                // We succeeded; return true.\n                return true;\n            } );\n    };\n}\n\nasync function retrieveRelationshipPropertyValues( shellFrame, selectedItems ) {\n\n    /// <summary>Retrieves property values representing relationships to the selecteed items.</summary>\n    /// <param name="shellFrame" type="MFiles.ShellFrame">The current shell frame object.</param> \n    /// <param name="selectedItems" type="MFiles.IShellItems">The items that are selected.</param> \n    /// <param name="Promise">A promise to be resolved with the property values for the relationship.</param> \n\n    // Create an array to store the property values.\n    const relationshipPropertyValues = [];\n\n    try {\n\n        // Get the vault reference.\n        const iVault = shellFrame.ShellUI.Vault;\n\n        // Get all the object types.\n        const allObjectTypes = await iVault.ObjectTypesOperations.GetObjectTypes( {\n            call_importance: 1  // CallImportance.CALL_IMPORTANCE_NORMAL\n        } );\n\n        // Selected object types.\n        const selectedObjectTypes = [];\n\n        // Iterate over the objects and populate the properties for the assignment.\n        for( let i = 0; i < selectedItems.ObjectVersions.length; i++ ) {\n\n            // Get the item.\n            const selectedItem = selectedItems.ObjectVersions[ i ];\n            const objectType = allObjectTypes.object_types.find( ( item ) => item.id === selectedItem.object_info.obj_id.type );\n            selectedObjectTypes.push( objectType );\n        }\n\n        // Get the default property defs of the selected objects.\n        const defaultPropertyDefs = selectedObjectTypes.map( ( result ) => result.default_property_def );\n\n        // Do we have a property value already?\n        // Will happen if they select two of the same object type.\n        for( let i = 0; i < defaultPropertyDefs.length; i++ ) {\n            const defaultPropertyDef = defaultPropertyDefs[ i ];\n            let propertyValue = relationshipPropertyValues\n                .find( ( relationshipPropertyValue ) => relationshipPropertyValue.property_def === defaultPropertyDef );\n\n            // If there isn\'t already a property value for this object type, we need to create it.\n            if( !propertyValue ) {\n                propertyValue = {\n                    property_def: defaultPropertyDef,\n                    value: {\n                        type: 10,  // Datatype.DATATYPE_MULTI_SELECT_LOOKUP,\n                        is_null: false,\n                        data:  {\n                            multi_select_lookup: {\n                                values: []\n                            }\n                        }\n                    }\n                };\n\n                // Push it to array.\n                relationshipPropertyValues.push( propertyValue );\n            }\n\n            // Add this item to the lookup.\n            const lookup = {\n                value_list_item_info: selectedItems.ObjectVersions[ i ].object_info,\n                version: selectedItems.ObjectVersions[ i ].version_info.version\n            };\n            propertyValue.value.data.multi_select_lookup.values.push( lookup );\n        }\n\n    // Handle the error.\n    } catch ( exception ) {\n        console.error( exception );\n\n    // Return the prepared property values.\n    } finally {\n        return relationshipPropertyValues;\n    }\n}\n\nasync function preparePropertyValuesForNewAssignment( shellFrame ) {\n\n    /// <summary>Prepares the property values with the hard coded values.</summary>\n    /// <param name="shellFrame" type="MFiles.ShellFrame">The current shell frame object.</param> \n    /// <returns type="MFiles.PropertyValueArray">The property values array.</returns>\n\n    // Create the property values for the new object.\n    const propertyValues = [];\n\n    // Get session info.\n    const sessionInfo = await MFiles.GetSessionInfo();\n\n    // Function to create the lookup value.\n    const lookupValue = ( value ) => {\n        return {\n            value_list_item_info: {\n                obj_id: {\n                    type: -2,\n                    item_id: {\n                        internal_id: value,\n                        external_repository_id: {\n                            connection: "",\n                            item: ""\n                        }\n                    }\n                },\n                name: null,\n                external_id_status: 0,  // ExtIDStatus.EXT_IDSTATUS_UNKNOWN,\n                external_id: null,\n                guid: GUID_NULL,\n                options: {\n    \n                    // Note: Default value(true) enables is_deleted true and deleted flag added to prefilled value\n                    // So to handle it false has been set.\n                    all: true\n                },\n                icon_id: null\n            },\n            version: {\n                type: 1,  // ObjVerVersionType.OBJ_VER_VERSION_TYPE_LATEST,\n                internal_version: -1,\n                external_repository_version: "",\n                external_repository_sort_key: 0\n            }\n        };\n    };\n\n    // Class property value.\n    const classPropertyValue = {\n        property_def: BuiltInPropertyDefs.Class,\n        value: {\n            type: 9,  // Datatype.DATATYPE_LOOKUP,\n            is_null: false,\n            data: {\n                lookup: lookupValue( -100 )\n            }\n        }\n    };\n    propertyValues.push( classPropertyValue );\n\n    // Name or title property.\n    const nameOrTitlePropertyValue = {\n        property_def: BuiltInPropertyDefs.NameOrTitle,\n        value: {\n            type: 1,  // Datatype.DATATYPE_TEXT,\n            is_null: false,\n            data: {\n                text: "Assignment"\n            }\n        }\n    };\n    propertyValues.push( nameOrTitlePropertyValue );\n\n    // Single-file-document property.\n    const singleFileDocumentPropertyValue = {\n        property_def: BuiltInPropertyDefs.SingleFlie,\n        value: {\n            type: 8,  // Datatype.DATATYPE_BOOLEAN,\n            is_null: false,\n            data: {\n                boolean: false\n            }\n        }\n    };\n    propertyValues.push( singleFileDocumentPropertyValue );\n\n    // Assigned to property.\n    const assignedToPropertyValue = {\n        property_def: BuiltInPropertyDefs.AssignedTo,\n        value: {\n            type: 10,  // Datatype.DATATYPE_MULTI_SELECT_LOOKUP,\n            is_null: false,\n            data:  {\n                multi_select_lookup: {\n                    values: [\n                        lookupValue( sessionInfo.vault_data?.user_id ) // Assigned to the current login user.\n                    ]\n                }\n            }\n        }\n    };\n    propertyValues.push( assignedToPropertyValue );\n\n    // Return the prepared property values.\n    return propertyValues;\n}\n\nasync function createAssignmentObject( shellFrame ) {\n\n    /// <summary>Creates an assignment for the currently-selected items, assigning it to the current user.</summary>\n    /// <param name="shellFrame" type="MFiles.ShellFrame">The current shell frame object.</param> \n    /// <returns type="MFiles.ObjectVersionAndProperties">The event handler.</returns>\n\n    try {\n\n        // Get the relationship property values array..\n        const relationshipPropertyValues = await retrieveRelationshipPropertyValues( shellFrame, currentlySelectedItems );\n\n        // Prepare the default property values for new assignment.\n        propertyValues = await preparePropertyValuesForNewAssignment( shellFrame );\n\n        // Add the relationship property values to the property values for the assignment.\n        propertyValues = propertyValues.concat( relationshipPropertyValues );\n\n        // Get the vault instance.\n        const iVault = shellFrame.ShellUI.Vault;\n\n        // Create object request.\n        const createObjectRequest = {\n            object_type_id: BuiltInObjectType.Assignment,\n            properties: propertyValues,\n            acl: {},\n            object_flags: {\n                all: true\n            },\n            check_in: true // Checkin the object immediately.\n        };\n\n        // Create new object in the server.\n        await iVault.ObjectOperations.AddObjectWithFiles( createObjectRequest );\n        await shellFrame.ShowMessage( "Assigned to you." );\n\n    // Handle the exception.\n    } catch ( exception) {\n        console.error( exception );\n    }\n}\n')))),(0,l.kt)("h2",{id:"testing-the-application"},"Testing the application"),(0,l.kt)("p",null," The command/button appears in the menu area, and is shown/hidden as items are selected. Selecting items and clicking ",(0,l.kt)("inlineCode",{parentName:"p"},"Assign to me")," shows a message that the operation was successful."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:" alt text ",src:t(63512).Z,title:"Create assignment",width:"1920",height:"880"})),(0,l.kt)("p",null,"Once the button has been clicked, an assignment is created for the current user and is related to the objects that were previously selected."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:" alt text ",src:t(25201).Z,title:"Assignment",width:"1920",height:"880"})))}v.isMDXComponent=!0},34274:(e,n,t)=>{t.d(n,{Z:()=>a});const a={note:"note_XMqZ",idea:"idea_NLbw",highlight:"highlight_NFmx",filetitle:"filetitle_Jrus"}},63512:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/CreateAssignment_1-b69d49a89b30033dd7309a14683981d6.png"},25201:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/CreateAssignment_2-d9f10c607d1ec1293b0cdcd03eb8f48e.png"}}]);