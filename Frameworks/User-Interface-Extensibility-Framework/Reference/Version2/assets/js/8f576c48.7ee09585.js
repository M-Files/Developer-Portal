"use strict";(self.webpackChunkuix_2=self.webpackChunkuix_2||[]).push([[8998],{3905:(e,a,t)=>{t.d(a,{Zo:()=>l,kt:()=>u});var n=t(67294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function m(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?m(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):m(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function d(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},m=Object.keys(e);for(n=0;n<m.length;n++)t=m[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(n=0;n<m.length;n++)t=m[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),i=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},l=function(e){var a=i(e.components);return n.createElement(s.Provider,{value:a},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},p=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,m=e.originalType,s=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),c=i(t),p=o,u=c["".concat(s,".").concat(p)]||c[p]||h[p]||m;return t?n.createElement(u,r(r({ref:a},l),{},{components:t})):n.createElement(u,r({ref:a},l))}));function u(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var m=t.length,r=new Array(m);r[0]=p;var d={};for(var s in a)hasOwnProperty.call(a,s)&&(d[s]=a[s]);d.originalType=e,d[c]="string"==typeof e?e:o,r[1]=d;for(var i=2;i<m;i++)r[i]=t[i];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},51544:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>m,metadata:()=>d,toc:()=>i});var n=t(87462),o=(t(67294),t(3905));t(47713),t(9826),t(45274);const m={sidebar_position:4},r="Dashboards",d={unversionedId:"Overview/Dashboards",id:"Overview/Dashboards",title:"Dashboards",description:"Dashboards are custom HTML pages defined by the application and can reference typical web content such as JavaScript and CSS files. These custom HTML pages may be shown all the time in a custom tab, shown in a tab which is shown or hidden depending upon user interaction, or shown via code as a custom popup dialog. Each dashboard, when shown, is rendered within an `` element.",source:"@site/docs/Overview/Dashboards.mdx",sourceDirName:"Overview",slug:"/Overview/Dashboards",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/Version2/Overview/Dashboards",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Events",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/Version2/Overview/Events"},next:{title:"Dialogs and Messages",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/Version2/Overview/Messages"}},s={},i=[{value:"Bootstrapping the Dashboard",id:"bootstrapping-the-dashboard",level:2},{value:"Boostrapping the Dashboard in React Application",id:"boostrapping-the-dashboard-in-react-application",level:3},{value:"Showing a dashboard from within your application",id:"showing-a-dashboard-from-within-your-application",level:2},{value:"Open a new Dashboard using the Tab",id:"open-a-new-dashboard-using-the-tab",level:3},{value:"Open a Popup Dashboard",id:"open-a-popup-dashboard",level:3},{value:"Passing data to and from dashboards",id:"passing-data-to-and-from-dashboards",level:2},{value:"Passing Custom data to the Dashboard",id:"passing-custom-data-to-the-dashboard",level:3},{value:"Passing updated data to the Dashboard",id:"passing-updated-data-to-the-dashboard",level:3},{value:"Passing Custom data from the Dashboard to the opener",id:"passing-custom-data-from-the-dashboard-to-the-opener",level:3},{value:"Closing the Dashboard",id:"closing-the-dashboard",level:2}],l={toc:i},c="wrapper";function h(e){let{components:a,...t}=e;return(0,o.kt)(c,(0,n.Z)({},l,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"dashboards"},"Dashboards"),(0,o.kt)("p",null,"Dashboards are custom HTML pages defined by the application and can reference typical web content such as JavaScript and CSS files. These custom HTML pages may be shown all the time in a ",(0,o.kt)("a",{parentName:"p",href:"../Tabs"},"custom tab"),", shown in a tab which is shown or hidden depending upon user interaction, or shown via code as a custom popup dialog. Each dashboard, when shown, is rendered within an ",(0,o.kt)("inlineCode",{parentName:"p"},"<iframe />")," element."),(0,o.kt)("p",null,"Dashboards must be defined within the ",(0,o.kt)("a",{parentName:"p",href:"../ApplicationStructure#application-manifest"},"application manifest")," and given a unique ID. In the example below the ID of the dashboard is defined to be ",(0,o.kt)("inlineCode",{parentName:"p"},"my-dashboard"),", and the HTML for the dashboard is contained within ",(0,o.kt)("inlineCode",{parentName:"p"},"index.html"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'    <dashboards>\n        <dashboard id="my-dashboard">\n            <content>index.html</content>\n        </dashboard>\n    </dashboards>\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Dashboard files are standard HTML files which will be rendered by the browser.")),(0,o.kt)("h2",{id:"bootstrapping-the-dashboard"},"Bootstrapping the Dashboard"),(0,o.kt)("p",null,"The Dashboard HTML file (e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"index.html"),"; the actual file name can be any valid filename) typically must contain code that reacts when the dashboard is shown, to gather data to render from either the supplied parameters (",(0,o.kt)("inlineCode",{parentName:"p"},"CustomData"),"), or from elsewhere in the UI or vault."),(0,o.kt)("p",null,"When the dashboard is shown and ready to use, the framework will automatically locate and execute a function called ",(0,o.kt)("inlineCode",{parentName:"p"},"OnNewDashboard"),". There must be only one function in the dashboard called this, but the function can be held within the HTML file directly or within a referenced JavaScript file. This method will be passed a single argument - named below as ",(0,o.kt)("inlineCode",{parentName:"p"},"newDashboard")," - which is of type ",(0,o.kt)("a",{parentName:"p",href:"../../UIExt2/Interfaces/IDashboard/"},"IDashboard"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// Dashboard bootstrap function\nfunction OnNewDashboard(newDashboard) {\n  // TODO: React when the dashboard is shown.\n}\n")),(0,o.kt)("h3",{id:"boostrapping-the-dashboard-in-react-application"},"Boostrapping the Dashboard in React Application"),(0,o.kt)("p",null,"In a React + TypeScript application you can bootstrap the Dashboard using following pattern."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'(window as any).OnNewDashboard = (newDashboard: IDashboard) => {\n    ReactDOM.createRoot(document.getElementById("root")!).render(\n        <React.StrictMode>\n            <App dashboard={newDashboard} />\n        </React.StrictMode>\n    );\n};\n')),(0,o.kt)("h2",{id:"showing-a-dashboard-from-within-your-application"},"Showing a dashboard from within your application"),(0,o.kt)("p",null,"Simply declaring a dashboard does not show it within the user interface. Instead: the dashboard must be rendered either by ",(0,o.kt)("a",{parentName:"p",href:"#open-a-new-dashboard-using-the-tab"},"creating a new tab and rendering it within that tab"),", or by ",(0,o.kt)("a",{parentName:"p",href:"#open-a-popup-dashboard"},"showing the dashboard within a popup dialog"),"."),(0,o.kt)("h3",{id:"open-a-new-dashboard-using-the-tab"},"Open a new Dashboard using the Tab"),(0,o.kt)("p",null,"Opening a new tab requires a Dashboard ID, which is defined in you Application Manifest -file. This will\ncreate a new instance of Dashboard which lives inside IFRAME as long as the Tab is finally removed."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Opening too many tabs can affect your application performance.")),(0,o.kt)("h3",{id:"open-a-popup-dashboard"},"Open a Popup Dashboard"),(0,o.kt)("p",null,"Opening the popup dashboard is done using the ",(0,o.kt)("inlineCode",{parentName:"p"},"ShowPopupDashboard")," method, which accepts also third parameter, which is the\ntitle of the Dialog."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"shellFrame.ShowPopupDashboard(\n  'my-dashboard',\n  {\n    message: 'Some Custom Data Here',\n  },\n  'Dashboard Title',\n)\n")),(0,o.kt)("h2",{id:"passing-data-to-and-from-dashboards"},"Passing data to and from dashboards"),(0,o.kt)("h3",{id:"passing-custom-data-to-the-dashboard"},"Passing Custom data to the Dashboard"),(0,o.kt)("p",null,"The Dashboard can also be passed a custom data, which is visible in the Dashboards ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomData")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"myTab.ShowDashboard('my-dashboard', {\n  msg: 'Sample Message to the Dashboard',\n})\nmyTab.Select()\n")),(0,o.kt)("p",null,"The Dashboard which was opened using ",(0,o.kt)("inlineCode",{parentName:"p"},"ShowDashboard")," can retrieve the data from ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomData")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// Dashboard bootstrap function\nfunction OnNewDashboard(newDashboard) {\n  const data = newDashboard.CustomData // has the data which is passed in ShowDashboard second param\n}\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The Custom Data can include only data which can be serialized using the Structured Cloning Algorithm. This means that you can not pass callback functions inside that data to send responses from the new Dashboard back to the opener. However, you can send custom command ID values and custom commands can be given a data parameter.")),(0,o.kt)("h3",{id:"passing-updated-data-to-the-dashboard"},"Passing updated data to the Dashboard"),(0,o.kt)("p",null,"It is also possible to pass updated data to the dashboard using the ",(0,o.kt)("inlineCode",{parentName:"p"},"IDashboard.UpdateCustomData")," method.  There is a detailed example of how to do this on the ",(0,o.kt)("a",{parentName:"p",href:"../../UIExt2/Interfaces/IDashboard/UpdateCustomData/#example"},"UpdateCustomData method page"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Create the tab and show some default custom data.\nconst myTab = await shellFrame.RightPane.AddTab("my-test-tab", "My Dashboard", "_last");\nconst myDashboard = await myTab.ShowDashboard("mydb", \n{\n    timeNow: "INITIAL_DATA, 5 second refresh interval!"\n});\n\n// Every 5 seconds call the UpdateCustomData method.\nsetInterval( () => {\n    myDashboard.UpdateCustomData({\n        timeNow: ( new Date() ).toISOString() // Pass the current time.\n    })\n}, 5000)\n')),(0,o.kt)("h3",{id:"passing-custom-data-from-the-dashboard-to-the-opener"},"Passing Custom data from the Dashboard to the opener"),(0,o.kt)("p",null,"You can create a ",(0,o.kt)("a",{parentName:"p",href:"../Commands"},"custom command")," which is used to send data back to the opener. As the command is not added to any menu structure it is not visible, but can be executed from code."),(0,o.kt)("p",null,"From the opener:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const callbackCommandId = await shellFrame.Commands.CreateCustomCommand(name)\n\n// Listen for the custom commands.\nshellFrame.Commands.Events.Register(\n  // Listen for the CustomCommand events.\n  MFiles.Event.CustomCommand,\n\n  // Each command has ID and optional data provided with it.\n  (commandId, data) => {\n    // Short-circuit if this is called for a command we don't care about.\n    if (commandId !== callbackCommandId) return\n\n    // Show something from the data.\n    alert('The name is: ' + data.name)\n  },\n)\n\nmyTab.ShowDashboard('my-dashboard', {\n  callbackId: callbackCommandId,\n})\nmyTab.Select()\n")),(0,o.kt)("p",null,"From the dashboard we can then return data back to the caller using ",(0,o.kt)("inlineCode",{parentName:"p"},"ExecuteCommand")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Dashboard bootstrap function\nfunction OnNewDashboard( newDashboard ) {\n\n    // Get the command ID\n    const commandId = newDashboard.CustomData.callbackId;\n\n    // Send data back to the caller, in this case object { name: "ExampleObject" }\n    await shellFrame.Commands.ExecuteCommand(commandId, {\n        name: "Example Object"\n    });\n\n}\n')),(0,o.kt)("h2",{id:"closing-the-dashboard"},"Closing the Dashboard"),(0,o.kt)("p",null,"You can close the Dashboard using the associated ",(0,o.kt)("inlineCode",{parentName:"p"},"Window")," object which has ",(0,o.kt)("inlineCode",{parentName:"p"},"Close")," method"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"newDashboard.Window.Close()\n")))}h.isMDXComponent=!0},47713:(e,a,t)=>{t.d(a,{ZP:()=>d});var n=t(87462),o=(t(67294),t(3905));const m={toc:[]},r="wrapper";function d(e){let{components:a,...t}=e;return(0,o.kt)(r,(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Value"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"MFiles.CommandState.CommandState_Undefined")),(0,o.kt)("td",{parentName:"tr",align:null},"0"),(0,o.kt)("td",{parentName:"tr",align:null},"Undefined value.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"MFiles.CommandState.CommandState_Active")),(0,o.kt)("td",{parentName:"tr",align:null},"1"),(0,o.kt)("td",{parentName:"tr",align:null},"The command is visible and enabled.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"MFiles.CommandState.CommandState_Inactive")),(0,o.kt)("td",{parentName:"tr",align:null},"2"),(0,o.kt)("td",{parentName:"tr",align:null},"The command is visible but not enabled (for example grayed).")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"MFiles.CommandState.CommandState_Hidden")),(0,o.kt)("td",{parentName:"tr",align:null},"3"),(0,o.kt)("td",{parentName:"tr",align:null},"The command is not visible.")))))}d.isMDXComponent=!0},9826:(e,a,t)=>{t.d(a,{ZP:()=>d});var n=t(87462),o=(t(67294),t(3905));const m={toc:[]},r="wrapper";function d(e){let{components:a,...t}=e;return(0,o.kt)(r,(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"shellFrame.Commands.SetCommandState( \n    commandId, // The ID of the command which state is to be changed\n    MFiles.MenuLocation.MenuLocation_TopPaneMenu, // The menu location of the change\n    MFiles.CommandState.CommandState_Hidden  // New state of the command in specific location or\n);\n")))}d.isMDXComponent=!0},45274:(e,a,t)=>{t(87462),t(67294),t(3905),t(7606),t(94642),t(37415),t(47713),t(9826)},37415:(e,a,t)=>{t.d(a,{ZP:()=>d});var n=t(87462),o=(t(67294),t(3905));const m={toc:[]},r="wrapper";function d(e){let{components:a,...t}=e;return(0,o.kt)(r,(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("p",null,'This JavaScript code is a UI Extension for M-Files, creating custom commands such as "Hello World" and providing functionality to dynamically show, hide, and remove these commands from the top menu based on user interactions within the M-Files shell.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'\n// Called when the UI Extension starts\nfunction OnNewShellUI(shellUI) {\n\n    // Wait for the ShellFrame to be created.\n    shellUI.Events.Register(\n        MFiles.Event.NewShellFrame,\n        async (shellFrame) => {\n\n            // Wait for the shellframe to start\n            shellFrame.Events.Register( \n                MFiles.Event.Started,\n                async () => {\n\n                    // Create a new custom command and menu item for the command\n                    const createCommand = async ( name: string ) => {\n\n                        // Create a new custom command\n                        const commandId = await shellFrame.Commands.CreateCustomCommand(name);\n\n                        // Add the command to the top menu\n                        const menuItemId = await shellFrame.Commands.AddCustomCommandToMenu(\n                            // Command ID\n                            commands.exampleCommand,\n                            // Menulocation\n                            MFiles.MenuLocation.MenuLocation_TopPaneMenu, \n                            // Priority of the command\n                            1 \n                        );\n\n                        // Return a data structure containing essential information about the commands\n                        return {\n                            id: commandId, // ID of the command\n                            menuItemId     // Menu item ID, can be used to add sub menus to this menu item.\n                        }\n                    }\n\n                    // Create an Example command and a set of sample commands to control it\'s visibility\n                    const commands = {\n                        // This is the sample command\n                        exampleCommand : await createCommand("Hello World"),\n\n                        // These commands control the state of the example command\n                        addCommand: await createCommand("Add Command To Menu"),\n                        deleteCustomCommand: await createCommand("Delete Command")\n                        hideCommand: await createCommand("Hide Command"),\n                        showCommand: await createCommand("Activate Command"),\n                        executeCommand: await createCommand("Execute Command"),\n                        getCommandName: await createCommand("Get Name"),\n                        getCommandState: await createCommand("Get Command State"),\n                        removeCommandFromMenu: await createCommand("Remove From Menu"), \n                        removeCommand: await createCommand("Remove Command")\n                    }\n\n                    // Add the command to the top menu\n                    const menuItemId = await shellFrame.Commands.AddCustomCommandToMenu(\n                        commands.exampleCommand,, \n                        MFiles.MenuLocation.MenuLocation_TopPaneMenu, \n                        1 // Priority of the command\n                    );\n\n                    // Listen for the custom commands.\n                    shellFrame.Commands.Events.Register(\n\n                        // Listen for the CustomCommand events.\n                        MFiles.Event.CustomCommand,\n\n                        // Each command has ID and optional data provided with it.\n                        ( commandId, data ) => {\n                            // Respond to the command if custom command sent by the application \n                            switch( commandId ) {\n\n                                // Run the Example command\n                                case commands.exampleCommand.id:\n                                    shellFrame.ShowMessage( "Hello World!" );\n                                    break;\n\n                                // Add the new menuitem which runs the example command\n                                case commands.addCommand.id:\n                                    await shellFrame.Commands.AddCustomCommandToMenu(\n                                        commands.exampleCommand, \n                                        MFiles.MenuLocation.MenuLocation_TopPaneMenu, \n                                        1 // Priority of the command\n                                    );\n                                    break;\n\n                                // Removes the command from particular menu\n                                case commands.removeCommandFromMenu.id:\n                                    await shellFrame.Commands.RemoveCustomCommandFromMenu(\n                                        commands.exampleCommand,, \n                                        MFiles.MenuLocation.MenuLocation_TopPaneMenu\n                                    );\n                                    break;\n\n                                // Deletes the command permanently\n                                case commands.deleteCommand.id:\n                                    shellFrame.Commands.SetCommandState( \n                                        commandId, \n                                        MFiles.CommandLocation.MainMenu,\n                                        MFiles.CommandState.CommandState_Active\n                                    );\n                                    break;\n\n                                // Hiddes all command instances for specific command ID\n                                case commands.hideCommand.id:\n                                     // Hide the command \n                                    shellFrame.Commands.SetCommandState( \n                                        commandId, \n                                        MFiles.CommandLocation.MainMenu,\n                                        MFiles.CommandState.CommandState_Hidden\n                                    );\n                                    break;\n\n                                // Activates (makes visible) all command instances for specific command ID\n                                case commands.showCommand.id:\n                                     // Show the command \n                                    shellFrame.Commands.SetCommandState( \n                                        commandId, \n                                        MFiles.MenuLocation.MenuLocation_TopPaneMenu,\n                                        MFiles.CommandState.CommandState_Active\n                                    );\n                                    break;\n\n                                // Get the command name\n                                case commands.getCommandName.id:\n                                    const name = await shellFrame.Commands.getCommandName(commands.exampleCommand.id);\n                                    shellFrame.ShowMessage( name );\n                                    break;\n\n                                // Get the Command State\n                                case commands.getCommandState.id:\n\n                                    // NOTE: the MFiles.CommandLocation.MainMenu must be used to get state of items added to the Top Menu\n                                    const commandState = await shellFrame.Commands.getCommandState(commands.exampleCommand.id, MFiles.CommandLocation.MainMenu );\n                                    shellFrame.ShowMessage( `Command state: ${commandState}` );\n                                    break;\n\n                            }\n                        }\n                    );\n                }\n            )\n        }\n    )\n}\n')),(0,o.kt)("p",null,"This code is essentially setting up a simple UI extension with custom commands that can be triggered from the top menu, and it allows dynamic control over the visibility of these commands based on user interactions."))}d.isMDXComponent=!0},7606:(e,a,t)=>{t.d(a,{ZP:()=>d});var n=t(87462),o=(t(67294),t(3905));const m={toc:[]},r="wrapper";function d(e){let{components:a,...t}=e;return(0,o.kt)(r,(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./AddCustomCommandToMenu/"},"AddCustomCommandToMenu")),(0,o.kt)("td",{parentName:"tr",align:null},"Adds existing custom command to the specified context menu location.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./CreateCustomCommand/"},"CreateCustomCommand")),(0,o.kt)("td",{parentName:"tr",align:null},"Creates a custom command that can be added to the application toolbar or to the contextmenu.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./CreateSubMenuItem/"},"CreateSubMenuItem")),(0,o.kt)("td",{parentName:"tr",align:null},"Creates a new SubMenu for already created Menu.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./DeleteCustomCommand/"},"DeleteCustomCommand")),(0,o.kt)("td",{parentName:"tr",align:null},"Deletes a custom command. The command is automatically removed.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./ExecuteCommand/"},"ExecuteCommand")),(0,o.kt)("td",{parentName:"tr",align:null},"Executes a user command.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./GetCommandName/"},"GetCommandName")),(0,o.kt)("td",{parentName:"tr",align:null},"Resolves the name that has been associated with the given command id.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./GetCommandState/"},"GetCommandState")),(0,o.kt)("td",{parentName:"tr",align:null},"Gets the command state for builtin or custom command in specified location.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./RemoveCustomCommandFromMenu/"},"RemoveCustomCommandFromMenu")),(0,o.kt)("td",{parentName:"tr",align:null},"Removes a custom command from the specified menu location.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./RemoveMenuItem/"},"RemoveMenuItem")),(0,o.kt)("td",{parentName:"tr",align:null},"Removes menuitem from the menu.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./SetCommandState/"},"SetCommandState")),(0,o.kt)("td",{parentName:"tr",align:null},"Sets the command's state to be hidden, visible, enabled or disabled. Calling ",(0,o.kt)("br",null),"this method may affect context menu, application toolbar, menus or all of them.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./SetMenuItemState/"},"SetMenuItemState")),(0,o.kt)("td",{parentName:"tr",align:null},"Sets the MenuItem state individually.")))))}d.isMDXComponent=!0},94642:(e,a,t)=>{t.d(a,{ZP:()=>d});var n=t(87462),o=(t(67294),t(3905));const m={toc:[]},r="wrapper";function d(e){let{components:a,...t}=e;return(0,o.kt)(r,(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Events"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/UIExt2/Interfaces/IEvents/"},"IEvents")),(0,o.kt)("td",{parentName:"tr",align:null},"Returns the event registering interface of the ICommands interface.")))))}d.isMDXComponent=!0}}]);