"use strict";(self.webpackChunkuix_2=self.webpackChunkuix_2||[]).push([[1170],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),o=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=o(e.components);return a.createElement(d.Provider,{value:t},e.children)},h="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),h=o(n),g=r,u=h["".concat(d,".").concat(g)]||h[g]||p[g]||l;return n?a.createElement(u,i(i({ref:t},m),{},{components:n})):a.createElement(u,i({ref:t},m))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=g;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[h]="string"==typeof e?e:r,i[1]=s;for(var o=2;o<l;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},26627:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var a=n(87462),r=(n(67294),n(3905));const l={sidebar_position:1},i=void 0,s={unversionedId:"UIExt2/Events",id:"UIExt2/Events",title:"Events",description:"ICommandsEvents",source:"@site/docs/UIExt2/Events.mdx",sourceDirName:"UIExt2",slug:"/UIExt2/Events",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/UIExt2/Events",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"API Reference Guide",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/UIExt2/"},next:{title:"Enums",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/UIExt2/Enums/"}},d={},o=[{value:"ICommandsEvents",id:"icommandsevents",level:2},{value:"IDashboardEvents",id:"idashboardevents",level:2},{value:"ISearchPaneEvents",id:"isearchpaneevents",level:2},{value:"IShellFrameEvents",id:"ishellframeevents",level:2},{value:"IShellListingEvents",id:"ishelllistingevents",level:2},{value:"IShellPaneTabEvents",id:"ishellpanetabevents",level:2},{value:"IShellPaneContainerEvents",id:"ishellpanecontainerevents",level:2},{value:"IShellUIEvents",id:"ishelluievents",level:2},{value:"IWindowEvents",id:"iwindowevents",level:2}],m={toc:o},h="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"icommandsevents"},"ICommandsEvents"),(0,r.kt)("p",null,"Ths ICommandEvents interface provides methods to register and unregister event handlers for custom commands:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Register( event, callback )"),": Registers an event handler for the specified event and returns the event handler ID."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Unregister( eventId )"),": Unregisters the event handler with the specified ID.")),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"../Interfaces/ICommands/"},"ICommands")," interface has Events property, which provides access to the ICommandsEvents interface."),(0,r.kt)("p",null,"Here is a JavaScript example of how to use the ICommandsEvents interface to listen for custom command events and their data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const commandsEvents = shellFrame.Commands.Events;\n// Register event handler for the custom command\nconst eventId = await commandsEvents.Register(\n  Event.CustomCommand,\n  (commandID, data) => {\n    console.log("Custom command invoked: ", commandID);\n    console.log("Data: ", data);\n  },\n);\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Event"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Arguments"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CustomCommand"),(0,r.kt)("td",{parentName:"tr",align:null},"Triggered when a custom command is invoked."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"commandID")," The ID of the custom command to be used. ",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"td"},"data")," The data passed to the custom command.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"BuiltinCommand"),(0,r.kt)("td",{parentName:"tr",align:null},"Callback handler for Builtin commands."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"commandId")," The ID of the built-in command to be used. ",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"td"},"param")," Some of the commands use parameters. For instance, when the dialog for creating a new object is shown, the object type ID is defined here.")))),(0,r.kt)("h2",{id:"idashboardevents"},"IDashboardEvents"),(0,r.kt)("p",null,"The IDashboard interface has Events property, which provides access to the IDashboardEvents interface. This interface provides two methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Register( event, callback )"),": Registers an event handler for the specified event and returns the event handler ID."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Unregister( eventId )"),": Unregisters the event handler with the specified ID.")),(0,r.kt)("p",null,"One of the use cases for events in IDashboard is to listen for custom data changes provided by UpdateCustomData method."),(0,r.kt)("p",null,"Here is a JavaScript example of how to use the IDashboardEvents interface to listen for custom data changes using globally defined events."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Register event handler for the custom data changes.\nconst eventId = await dashboard.Events.Register(\n  MFiles.Event.CustomDataChanged,\n  (data) => {\n    console.log("Custom data changed: ", data);\n  },\n);\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Event"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Arguments"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Refresh"),(0,r.kt)("td",{parentName:"tr",align:null},"Triggered when the Dashboard data is refreshed."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Started"),(0,r.kt)("td",{parentName:"tr",align:null},"Sent when the Dashboard turns to started state."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Stop"),(0,r.kt)("td",{parentName:"tr",align:null},"Sent before the Dashboard is stopped."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CustomDataChanged"),(0,r.kt)("td",{parentName:"tr",align:null},"This event is triggered, when custom data on dashboard has changed. The event can be ",(0,r.kt)("br",null),"used to update the dashboard based on the new data. This event will fire at least ",(0,r.kt)("br",null),"once when the dashboard is started and initialized."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"data")," New custom data for the dashboard")))),(0,r.kt)("h2",{id:"isearchpaneevents"},"ISearchPaneEvents"),(0,r.kt)("p",null,"Interface for the Search pane events. The interface provides two methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Register( event, callback )"),": Registers an event handler for the specified event."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Unregister( eventId )"),": Unregisters the event handler with the specified ID.")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Event"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Arguments"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Stop"),(0,r.kt)("td",{parentName:"tr",align:null},"Sent before the Searchpane is closed."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Started"),(0,r.kt)("td",{parentName:"tr",align:null},"Registers event handler for the Search pane started event, which means that the Search pane ",(0,r.kt)("br",null),"is ready to be used."),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h2",{id:"ishellframeevents"},"IShellFrameEvents"),(0,r.kt)("p",null,"IShellFrameEvents interface provides means to manage shell frame events. The interface provides two methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Register( event, callback )"),": Registers an event handler for the specified event."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Unregister( eventId )"),": Unregisters the event handler with the specified ID.")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Event"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Arguments"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Stop"),(0,r.kt)("td",{parentName:"tr",align:null},"Sent before the IShellFrame is stopped."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Started"),(0,r.kt)("td",{parentName:"tr",align:null},"Registers event handler for the IShellFrame started event, which means that the IShellFrame ",(0,r.kt)("br",null),"is ready to be used. This event will trigger at least once for each registered callback ",(0,r.kt)("br",null),"if the IShellFrame is already started and not yet stopped."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ViewLocationChanged"),(0,r.kt)("td",{parentName:"tr",align:null},"Registers event handler for the IShellFrame ViewLocationChanged event, which means that the view location has changed."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ViewLocationChangedAsync"),(0,r.kt)("td",{parentName:"tr",align:null},"Registers event handler for the IShellFrame ViewLocationChangedAsync event, which means that the view location has changed."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NewCommands"),(0,r.kt)("td",{parentName:"tr",align:null},"Registers event handler for the IShellFrame NewCommands event, which means that a new ICommands interface has been created and is ready to be used."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NewRightPane"),(0,r.kt)("td",{parentName:"tr",align:null},"Registers event handler for the IShellFrame NewRightPane event, which means that a shell pane container is created for right shell pane."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NewShellListing"),(0,r.kt)("td",{parentName:"tr",align:null},"Registers event handler for the IShellFrame NewShellListing event, which means that a new shell listing object is created."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"newShellisting")," The new IShellListing object.")))),(0,r.kt)("h2",{id:"ishelllistingevents"},"IShellListingEvents"),(0,r.kt)("p",null,"IShellListingEvents interface provides means to manage shell listing events. The interface provides two methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Register( event, callback )"),": Registers an event handler for the specified event."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Unregister( eventId )"),": Unregisters the event handler with the specified ID.")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Event"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Arguments"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Started"),(0,r.kt)("td",{parentName:"tr",align:null},"Registers event handler for the IShellListingEvents started event."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Stop"),(0,r.kt)("td",{parentName:"tr",align:null},"Registers event handler for the IShellListingEvents stopped event."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SelectionChanged"),(0,r.kt)("td",{parentName:"tr",align:null},"Registers event handler for the IShellListingEvents SelectionChanged event. ",(0,r.kt)("br",null),"This event is triggered when the selection in the listing view is set, changed or removed."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"shellItems")," Contains the selected items.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SelectNextObject"),(0,r.kt)("td",{parentName:"tr",align:null},"Registers event handler for the IShellListingEvents SelectNextObject event. This event is triggered when the next object in the listing is selected."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SelectPreviousObject"),(0,r.kt)("td",{parentName:"tr",align:null},"Registers event handler for the IShellListingEvents SelectPreviousObject event. This event is triggered when the previous object in the listing is selected."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SelectNextFolder"),(0,r.kt)("td",{parentName:"tr",align:null},"Registers event handler for the IShellListingEvents SelectNextFolder event. This event is triggered when the next folder in the listing is selected."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"folderType")," type of the folder, which have been selected.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SelectPreviousFolder"),(0,r.kt)("td",{parentName:"tr",align:null},"Registers event handler for the IShellListingEvents SelectPreviousFolder event. This event is triggered when the previous folder in the listing is selected."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"folderType")," type of the folder, which have been selected.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ListingDeactivated"),(0,r.kt)("td",{parentName:"tr",align:null},"Registers event handler for the IShellListingEvents ListingDeactivated event. ",(0,r.kt)("br",null),"This event is triggered when the listing object becomes inactive and loses the input focus."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"shellListing")," The next active shell listing object. Can be null.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ListingActivated"),(0,r.kt)("td",{parentName:"tr",align:null},"Registers event handler for the IShellListingEvents ListingActivated event. ",(0,r.kt)("br",null),"This event is triggered when the listing object becomes active and receives the input focus."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"shellListing")," The previous active shell listing object. Can be null.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ContentChanged"),(0,r.kt)("td",{parentName:"tr",align:null},"Registers event handler for the IShellListingEvents ContentChanged event. ",(0,r.kt)("br",null),"This event is triggered when the current listing content is changed, or listed items are modified."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"shellItems")," Contains all items in the listing.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ListItemAdded"),(0,r.kt)("td",{parentName:"tr",align:null},"Registers event handler for the IShellListingEvents ListItemAdded event. This event is triggered when one or more items are added to the listing."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"objectVersion")," Object")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ListItemRemoved"),(0,r.kt)("td",{parentName:"tr",align:null},"Registers event handler for the IShellListingEvents ListItemRemoved event. This event is triggered when one or more items are removed from the listing."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"listItem")," Either an array of ObjectVersionEx if non-folder objects are removed or a single ObjectVersionEx, in case folder is removed. ",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"td"},"removedExternalFolder")," In case folder was removed, include information about the old external folder item being removed in case of")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ListItemModified"),(0,r.kt)("td",{parentName:"tr",align:null},"Registers event handler for the IShellListingEvents ListItemModified event. ",(0,r.kt)("br",null),"This event is triggered when one or more of the items that are currently selected are modified."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"oldServerObjVer")," Array of old object versions. ",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"td"},"newObjVer")," Array of new objects.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SelectedItemsChanged"),(0,r.kt)("td",{parentName:"tr",align:null},"Registers event handler for the IShellListingEvents SelectedItemsChanged event. ",(0,r.kt)("br",null),"This event is triggered when one or more of the items that are currently selected are modified."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"shellItems")," Contains the selected items.")))),(0,r.kt)("h2",{id:"ishellpanetabevents"},"IShellPaneTabEvents"),(0,r.kt)("p",null,"Interface for the Shell pane tab events. The interface provides two methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Register( event, callback )"),": Registers an event handler for the specified event."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Unregister( eventId )"),": Unregisters the event handler with the specified ID.")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Event"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Arguments"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Started"),(0,r.kt)("td",{parentName:"tr",align:null},"Sent when the object turns to started state."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Stop"),(0,r.kt)("td",{parentName:"tr",align:null},"Sent before the object is stopped."),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h2",{id:"ishellpanecontainerevents"},"IShellPaneContainerEvents"),(0,r.kt)("p",null,"Interface for the Shell pane container events. The interface provides two methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Register( event, callback )"),": Registers an event handler for the specified event."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Unregister( eventId )"),": Unregisters the event handler with the specified ID.")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Event"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Arguments"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Stop"),(0,r.kt)("td",{parentName:"tr",align:null},"Sent when the object turns to stopped state."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Started"),(0,r.kt)("td",{parentName:"tr",align:null},"Sent when the object turns to started state."),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h2",{id:"ishelluievents"},"IShellUIEvents"),(0,r.kt)("p",null,"Interface for the Shell UI events. The interface provides two methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Register( event, callback )"),": Registers an event handler for the specified event."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Unregister( eventId )"),": Unregisters the event handler with the specified ID.")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Event"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Arguments"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Started"),(0,r.kt)("td",{parentName:"tr",align:null},"Sent when the object turns to started state."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Stop"),(0,r.kt)("td",{parentName:"tr",align:null},"Register event to listen for the stop event."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NewShellFrame"),(0,r.kt)("td",{parentName:"tr",align:null},"Register event handler for the NewShellFrame event. This event is triggered when any shell frame object is created, ",(0,r.kt)("br",null),"including normal shell frames, common dialogs, and embedded or special shell frames."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"shellFrame"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NewNormalShellFrame"),(0,r.kt)("td",{parentName:"tr",align:null},"Register event handler for the NewNormalShellFrame event. This event is triggered when a normal shell frame object is created. ",(0,r.kt)("br",null),"Note that this event is not triggered for common dialogs, or embedded or special shell frames."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"shellFrame")," The new shell frame object.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CrossApplicationNotification"),(0,r.kt)("td",{parentName:"tr",align:null},"Broadcasted message to multiple applications."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"appGUID")," GUID of the target application, or null if broadcasted to all applications ",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"td"},"msgId")," ID of the message which is sent to the other applications. ",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"td"},"data")," Custom data to be sent.")))),(0,r.kt)("h2",{id:"iwindowevents"},"IWindowEvents"),(0,r.kt)("p",null,"Interface for the Window events. The interface provides two methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Register( event, callback )"),": Registers an event handler for the specified event."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Unregister( eventId )"),": Unregisters the event handler with the specified ID.")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Event"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Arguments"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CloseWindow"),(0,r.kt)("td",{parentName:"tr",align:null},"Sent when the window is requested to closed."),(0,r.kt)("td",{parentName:"tr",align:null})))))}p.isMDXComponent=!0}}]);