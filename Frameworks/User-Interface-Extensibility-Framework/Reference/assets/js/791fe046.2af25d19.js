"use strict";(self.webpackChunkuix_2=self.webpackChunkuix_2||[]).push([[2597],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(f,i(i({ref:t},s),{},{components:n})):r.createElement(f,i({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6304:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>g,frontMatter:()=>c,metadata:()=>s,toc:()=>m});var r=n(87462),a=(n(67294),n(3905));const o={toc:[]},i="wrapper";function l(e){let{components:t,...n}=e;return(0,a.kt)(i,(0,r.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Value"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ACLENFORCING_MODE_USE_PREVIOUS"),(0,a.kt)("td",{parentName:"tr",align:null},"Use the ACL previously stored for the object as a provided ACL (the previous ACL is typically the consolidated ACL (as if it was generated by the UI))."),(0,a.kt)("td",{parentName:"tr",align:null},"0")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ACLENFORCING_MODE_USE_PROVIDED"),(0,a.kt)("td",{parentName:"tr",align:null},"Use the caller-provided ACL."),(0,a.kt)("td",{parentName:"tr",align:null},"1")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ACLENFORCING_MODE_RESET_TO_DEFAULT"),(0,a.kt)("td",{parentName:"tr",align:null},"Use the ACL calculated from the properties as a provided ACL."),(0,a.kt)("td",{parentName:"tr",align:null},"2")))))}l.isMDXComponent=!0;const c={},p="ACLEnforcingMode",s={unversionedId:"gRPC/Enums/ACLEnforcingMode/index",id:"gRPC/Enums/ACLEnforcingMode/index",title:"ACLEnforcingMode",description:"ACL enforcing modes.",source:"@site/docs/gRPC/Enums/ACLEnforcingMode/index.mdx",sourceDirName:"gRPC/Enums/ACLEnforcingMode",slug:"/gRPC/Enums/ACLEnforcingMode/",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/gRPC/Enums/ACLEnforcingMode/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Enums",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/gRPC/Enums/"},next:{title:"AccessControlSubjectType",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/gRPC/Enums/AccessControlSubjectType/"}},u={},m=[],d={toc:m},f="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(f,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"aclenforcingmode"},"ACLEnforcingMode"),(0,a.kt)("p",null,"ACL enforcing modes."),(0,a.kt)(l,{components:n.components,mdxType:"Values"}))}g.isMDXComponent=!0}}]);