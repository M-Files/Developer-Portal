"use strict";(self.webpackChunkuix_2=self.webpackChunkuix_2||[]).push([[2281],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),g=c(t),u=o,m=g["".concat(s,".").concat(u)]||g[u]||d[u]||r;return t?a.createElement(m,i(i({ref:n},p),{},{components:t})):a.createElement(m,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[g]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},71788:(e,n,t)=>{t.d(n,{Z:()=>r});var a=t(67294),o=t(34274);function r(e){let{children:n}=e;return a.createElement("div",{className:o.Z.filetitle},n)}},41544:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=t(87462),o=(t(67294),t(3905));t(71788);const r={sidebar_position:11,sidebar_label:"Testing and Developing"},i="Testing and Developing",l={unversionedId:"Overview/Debugging",id:"Overview/Debugging",title:"Testing and Developing",description:"Runtime Environment",source:"@site/docs/Overview/Debugging.mdx",sourceDirName:"Overview",slug:"/Overview/Debugging",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/Overview/Debugging",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11,sidebar_label:"Testing and Developing"},sidebar:"tutorialSidebar",previous:{title:"Installing Applications",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/Overview/InstallingApplications"},next:{title:"API Reference Guide",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/UIExt2/"}},s={},c=[{value:"Runtime Environment",id:"runtime-environment",level:2},{value:"Debugging from Developer Tools",id:"debugging-from-developer-tools",level:2},{value:"Calling ICommonFunctions",id:"calling-icommonfunctions",level:2},{value:"Accessing the Dashboard object",id:"accessing-the-dashboard-object",level:2},{value:"Enable postMessage logging",id:"enable-postmessage-logging",level:2}],p={toc:c},g="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(g,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"testing-and-developing"},"Testing and Developing"),(0,o.kt)("h2",{id:"runtime-environment"},"Runtime Environment"),(0,o.kt)("p",null,"The runtime environment of the UI Extension is inside sandboxed ",(0,o.kt)("inlineCode",{parentName:"p"},"<iframe />")," and communication between the M-Files Client and UI Extension is done internally using ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage"},"postMessage"),"\nwhere the calls are serialized using ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm"},"Structured Clone algoritm"),"."),(0,o.kt)("p",null,"When a call to an UI Extension Object is done, for example "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const commandId = await shellFrame.Commands.CreateCustomCommand(name);\n")),(0,o.kt)("p",null,"The call is serialized into a ",(0,o.kt)("inlineCode",{parentName:"p"},"postMessage")," message using MESP protocol (M-Files Extension Sandbox Protocol). It is possible to ",(0,o.kt)("a",{parentName:"p",href:"#enable-postmessage-logging"},"enable logging")," of the postMessage calls\nif you want to observe exactly what is going on during execution of specific command."),(0,o.kt)("p",null,"The global variables, like ",(0,o.kt)("a",{parentName:"p",href:"../../UIExt2/Enums/Event/"},"Enumerations")," are binded into ",(0,o.kt)("inlineCode",{parentName:"p"},"MFiles")," variable only after the initialization message."),(0,o.kt)("h2",{id:"debugging-from-developer-tools"},"Debugging from Developer Tools"),(0,o.kt)("p",null,"From the browser developer tools you can select the IFRAME and observe the global variables installed there."),(0,o.kt)("h2",{id:"calling-icommonfunctions"},"Calling ICommonFunctions"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"MFiles")," global variable includes enumerations and also the ",(0,o.kt)("a",{parentName:"p",href:"../../UIExt2/Interfaces/ICommonFunctions/"},"ICommonFunctions")," properties and methods."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'\n// Call ICommonFunctions.GetAccentColor()\nawait MFiles.GetAccentColor() // returns "#006eef"\n\n// Save a key into webstorage\nawait MFiles.WriteToWebStorage("key", "value")\n')),(0,o.kt)("h2",{id:"accessing-the-dashboard-object"},"Accessing the Dashboard object"),(0,o.kt)("p",null,"In the Dashboard code you can access the dasboard object using ",(0,o.kt)("inlineCode",{parentName:"p"},"_MESP")," global variable."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'\n// retrieve the active dashboard object inside a Dashboard IFRAME\nconst dashboard = _MESP.ApplicationObjects.Dashboard;\n\n// Create a popup dashboard with ID "my-dashboard"\nawait dashboard.ShellFrame.ShowPopupDashboard("my-dashboard", {});\n\n')),(0,o.kt)("h2",{id:"enable-postmessage-logging"},"Enable postMessage logging"),(0,o.kt)("p",null,"If you want to enable logging of the ",(0,o.kt)("inlineCode",{parentName:"p"},"postMessage")," commands into the Developer Tools console you can turn that on inside the UI Extension application using"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Enable logging of postMessage calls into console\nwindow._MESP.logLevel = "all";\n')))}d.isMDXComponent=!0},34274:(e,n,t)=>{t.d(n,{Z:()=>a});const a={note:"note_XMqZ",idea:"idea_NLbw",highlight:"highlight_NFmx",filetitle:"filetitle_Jrus"}}}]);