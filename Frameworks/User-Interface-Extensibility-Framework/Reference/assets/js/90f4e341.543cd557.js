"use strict";(self.webpackChunkuix_2=self.webpackChunkuix_2||[]).push([[323],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},h="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),h=d(t),m=l,u=h["".concat(s,".").concat(m)]||h[m]||p[m]||i;return t?a.createElement(u,r(r({ref:n},c),{},{components:t})):a.createElement(u,r({ref:n},c))}));function u(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,r=new Array(i);r[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[h]="string"==typeof e?e:l,r[1]=o;for(var d=2;d<i;d++)r[d]=t[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},76104:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>b,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=t(87462),l=(t(67294),t(3905));const i={sidebar_position:2,sidebar_label:"ShowNewObjectWindow"},r="ShowNewObjectWindow (Blank and UserDefined Template)",o={unversionedId:"Samples/ShowNewObjectWindow With Blank and UserDefined Template/index",id:"Samples/ShowNewObjectWindow With Blank and UserDefined Template/index",title:"ShowNewObjectWindow (Blank and UserDefined Template)",description:"Overview",source:"@site/docs/Samples/ShowNewObjectWindow With Blank and UserDefined Template/index.mdx",sourceDirName:"Samples/ShowNewObjectWindow With Blank and UserDefined Template",slug:"/Samples/ShowNewObjectWindow With Blank and UserDefined Template/",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/Samples/ShowNewObjectWindow With Blank and UserDefined Template/",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"ShowNewObjectWindow"},sidebar:"tutorialSidebar",previous:{title:"Commands",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/Samples/Commands/"},next:{title:"Built-in Command Demonstration",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/Samples/BuiltInCommands/"}},s={},d=[{value:"Overview",id:"overview",level:2},{value:"Creating the application structure",id:"creating-the-application-structure",level:2},{value:"Creating the application definition file",id:"creating-the-application-definition-file",level:3},{value:"Creating the module",id:"creating-the-module",level:3},{value:"Adding a new right pane tab",id:"adding-a-new-right-pane-tab",level:2},{value:"Creating the dashboard",id:"creating-the-dashboard",level:2},{value:"Show the Create object window on clicking button",id:"show-the-create-object-window-on-clicking-button",level:2},{value:"Creating Blank template",id:"creating-blank-template",level:3},{value:"Creating User defined template",id:"creating-user-defined-template",level:3},{value:"Testing the application",id:"testing-the-application",level:2}],c=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",n)},h=c("Tabs"),p=c("TabItem"),m={toc:d},u="wrapper";function b(e){let{components:n,...i}=e;return(0,l.kt)(u,(0,a.Z)({},m,i,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"shownewobjectwindow-blank-and-userdefined-template"},"ShowNewObjectWindow (Blank and UserDefined Template)"),(0,l.kt)("h2",{id:"overview"},"Overview"),(0,l.kt)("p",null,"This sample creates a basic User Interface Extensibility Framework application consisting of one ShellUI module and dashboard which allow to create a new object with blank and user defined template."),(0,l.kt)("p",null,"This sample does not show how to create a local development folder or to deploy the code to the M-Files server. It is assumed that a local development folder already exists, and that is the location in which the development is occurring."),(0,l.kt)("h2",{id:"creating-the-application-structure"},"Creating the application structure"),(0,l.kt)("h3",{id:"creating-the-application-definition-file"},"Creating the application definition file"),(0,l.kt)("p",null,"Into this folder we will create an application definition file. This file must be named ",(0,l.kt)("mark",null,"appdef.xml"),". The application will use version 5 of the client schema (as we are only targeting newer M-Files versions). The application will declare a single Shell UI module (with its code in ",(0,l.kt)("mark",null,"main.js"),"), and no dashboards."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"appdef.xml")),(0,l.kt)(h,{mdxType:"Tabs"},(0,l.kt)(p,{value:"xml",label:"XML",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0"?>\n<application xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.m-files.com/schemas/appdef-client-v5.xsd">\n    <guid>4753229E-9382-4BCC-AEA9-9997E73D2370</guid>\n    <name>ShowNewObjectWindow</name>\n    <version>1.0</version>\n    <description>A demonstration application for the support of ShowNewObjectWindow. Covered Blank template and user defined template object creations.</description>\n    <publisher>M-Files Corporation</publisher>\n    <modules>\n        <module environment="shellui">\n        <file>main.js</file>\n        </module>\n    </modules>\n    <dashboards>\n        <dashboard id="MyDashboard">\n            <content>index.html</content>\n        </dashboard>\n    </dashboards>\n</application>\n\n')))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Ensure that your application has a unique GUID by using a GUID generator.")),(0,l.kt)("h3",{id:"creating-the-module"},"Creating the module"),(0,l.kt)("p",null,"Next we will create a module file to contain our actual application logic. At this point we will just register to be notified of main lifecycle events:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"We will declare a default entry point for the ShellUI module."),(0,l.kt)("li",{parentName:"ul"},"We will react to the ",(0,l.kt)("mark",null,"NewShellFrame")," event and obtain a reference to the shell frame."),(0,l.kt)("li",{parentName:"ul"},"We will react to the shell frame\u2019s ",(0,l.kt)("mark",null,"Started")," event (as using the shell frame before this point will result in an exception).")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"main.js")),(0,l.kt)(h,{mdxType:"Tabs"},(0,l.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'// NOTE! This code is for demonstration purposes only and does not contain any kind of\n//       error handling. MUST be revised before using in production.\n\nfunction OnNewShellUI( shellUI ) {\n\n    /// <summary>Executed by the UIX when a ShellUI module is started.</summary>\n    /// <param name="shellUI" type="MFiles.ShellUI">The shell UI object which was created.</param>\n\n    // This is the start point of a ShellUI module.\n\n    // Register to be notified when a new shell frame (MFiles.Event.NewShellFrame) is created.\n    shellUI.Events.Register(\n        MFiles.Event.NewShellFrame,\n        handleNewShellFrame );\n}\n\nfunction handleNewShellFrame( shellFrame ) {\n\n    /// <summary>Handles the OnNewNormalShellFrame event for an IShellUI.</summary>\n    /// <param name="shellFrame" type="MFiles.ShellFrame">The shell frame object which was created.</param>\n\n    // The shell frame was created but it cannot be used yet.\n    // The following line would throw an exception ("The object cannot be accessed, because it is not ready."):\n    // shellFrame.ShowMessage("A shell frame was created");\n\n    // Register to be notified when the shell frame is started.\n    shellFrame.Events.Register(\n        MFiles.Event.Started,\n        getShellFrameStartedHandler( shellFrame ) );\n}\n\nfunction getShellFrameStartedHandler( shellFrame )  {\n\n    /// <summary>Returns a function which handles the OnStarted event for an IShellFrame.</summary>\n\n    // The shell frame is now started and can be used.\n\n    return async () => {};\n}\n')))),(0,l.kt)("h2",{id:"adding-a-new-right-pane-tab"},"Adding a new right pane tab"),(0,l.kt)("p",null,"Adding a right pane tab involves two steps:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Creating a new tab using ",(0,l.kt)("mark",null,"shellFrame.RightPane.AddTab"),"."),(0,l.kt)("li",{parentName:"ol"},"Set the dashboard and make the seletion.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"main.js")),(0,l.kt)(h,{mdxType:"Tabs"},(0,l.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'// NOTE! This code is for demonstration purposes only and does not contain any kind of\n//       error handling. MUST be revised before using in production.\n\nfunction OnNewShellUI( shellUI ) {\n\n    /// <summary>Executed by the UIX when a ShellUI module is started.</summary>\n    /// <param name="shellUI" type="MFiles.ShellUI">The shell UI object which was created.</param>\n\n    // This is the start point of a ShellUI module.\n\n    // Register to be notified when a new shell frame (MFiles.Event.NewShellFrame) is created.\n    shellUI.Events.Register(\n        MFiles.Event.NewShellFrame,\n        handleNewShellFrame );\n}\n\nfunction handleNewShellFrame( shellFrame ) {\n\n    /// <summary>Handles the OnNewShellFrame event for an IShellUI.</summary>\n    /// <param name="shellFrame" type="MFiles.ShellFrame">The shell frame object which was created.</param> \n\n    // Register to listen to the started event.\n    shellFrame.Events.Register(\n        MFiles.Event.Started,\n        getShellFrameStartedHandler( shellFrame ) );\n\nfunction getShellFrameStartedHandler( shellFrame ) {\n\n    /// <summary>Gets a function to handle the Started event for shell frame.</summary>\n    /// <param name="shellFrame" type="MFiles.ShellFrame">The current shell frame object.</param> \n    /// <returns type="MFiles.Events.OnStarted">The event handler.</returns>\n\n    // Return the handler function for ShellFrame\'s Started event.\n    return async () => {\n    \n        // Show the tab for new object creation.\n        const newObjectTab = await shellFrame.RightPane.AddTab( "newObject", "New Object", "_last");\n        newObjectTab.ShowDashboard( "MyDashboard", {} );\n        newObjectTab.Select();\n        newObjectTab.SetVisible( true );\n    };\n}\n')))),(0,l.kt)("h2",{id:"creating-the-dashboard"},"Creating the dashboard"),(0,l.kt)("p",null,"Next we will create a dashboard file that will be shown in the popup. It involves two steps:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Create a ",(0,l.kt)("mark",null,"index.html")," file which will load styles and dashboard handler"),(0,l.kt)("li",{parentName:"ol"},"Create a ",(0,l.kt)("mark",null,"dashboard.js")," file which will handle the dashboard.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"index.html")),(0,l.kt)(h,{mdxType:"Tabs"},(0,l.kt)(p,{value:"html",label:"HTML",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html>\n  <head>\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n    <title>Sample</title>\n    <script src="mfiles.extensibility.protocol.js"><\/script>\n    \x3c!-- Load styles and dashboard handler js file --\x3e\n    <link href="style.css" rel="stylesheet" />\n    <script src="dashboard.js"><\/script>\n  </head>\n  <body>\n    <div id="Main">\n      <div id="basicInfo"></div>\n    </div>\n    <button id="btnOpenNewObjectWindow">Open</button>\n    <span id="error_message" class="error-message"></span>\n  </body>\n</html>\n')))),(0,l.kt)("p",null,"Create dashboard handler file using ",(0,l.kt)("mark",null,"OnNewDashboard")," event. Once the dashboard started, the html content will be loaded and the content will be updated."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"dashboard.js")),(0,l.kt)(h,{mdxType:"Tabs"},(0,l.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'function OnNewDashboard( dashboard ) {\n\n    /// <summary>Executed by the UIX when a dashboared is started.</summary>\n    /// <param name="dashboard" type="MFiles.Dashboard">The dashboard object which was created.</param>\n\n    // Register a handler to listen the started event.\n    dashboard.Events.Register(\n        MFiles.Event.Started,\n        () => {\n\n            // Prepare the html content that to be updated.\n            const htmlContent = getDashBoardContent();\n          \n            // Show and Update the dashboard content.\n            mainContent = document.getElementById( "Main" );\n            mainContent.innerHTML = htmlContent;\n            mainContent.style.display = "block";\n\n            // Bind the events.\n            bindEvents();\n        }\n    );\n}\n\nfunction getDashBoardContent() {\n    return `\n        <div>\n            <div class="method-container">\n                <div class="method-title">Show New Object Window (Blank template and User defined template)</div>\n                <div><div class="label">Object Type Id</div>: <input id="objectType" /></div>\n                <div><div class="label">Extension (Blank Template)</div>: <input id="extension" type="text" /></div>\n                <div><div class="label">Metadata card title</div>: <input id="mdCardTitle" type="text" /></div>\n                <div><div class="label">Object Title </div>: <input id="objectTitle" type="text" /></div>\n                <div><div class="label">Check in immediately</div>: <input id="checkin" class="checkbox" type="checkbox" /></div>\n                <div id="Sourcefile"><div><div>Source file (User defined template info) </div><textarea id="srcfile" spellcheck="false">{}</textarea><div></div></div></div>\n                <div>Currently we are supporting only default blank template formats such as .bmp, .accdb, .xlsx, .pptx, .pub, .vsdx, .docx, .txt. For other formats, MFD will be created by default.</div>\n            </div>\n        </div>\n    `;\n}\n')))),(0,l.kt)("h2",{id:"show-the-create-object-window-on-clicking-button"},"Show the Create object window on clicking button"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"First bind the click event in dashboard to call the ",(0,l.kt)("mark",null,"ShowNewObjectWindow")," from right pane content."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"We will have 4 parameters for this ",(0,l.kt)("mark",null,"ShowPopupDashboard")),(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("mark",null,"objectType")," - Target Object type"),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("mark",null,"objectCreationInfo")," - Holds creation information, e.g., MD card button visibility, file source information, etc.,."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("mark",null,"prefillPropertyValues")," - List of properties which can be prefilled."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("mark",null,"accessControlList")," - ACL")))))),(0,l.kt)("h3",{id:"creating-blank-template"},"Creating Blank template"),(0,l.kt)("p",null,"For document type we need to pass the extension or else it will create multifile document by default. Other then document type, no need to pass the extension information."),(0,l.kt)("p",null,"Currently we are supporting only default blank template formats such as .bmp, .accdb, .xlsx, .pptx, .pub, .vsdx, .docx, .txt. For other formats, MFD will be created by default."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:" alt text ",src:t(95706).Z,title:"Create Blank template",width:"1912",height:"895"})),(0,l.kt)("h3",{id:"creating-user-defined-template"},"Creating User defined template"),(0,l.kt)("p",null,"For User defined template we need to pass the template object information."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:" alt text ",src:t(55934).Z,title:"Create Blank template",width:"1912",height:"899"})),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"main.js")),(0,l.kt)(h,{mdxType:"Tabs"},(0,l.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'// NOTE! This code is for demonstration purposes only and does not contain any kind of\n//       error handling. MUST be revised before using in production.\n\n// NOTE! This code is for demonstration purposes only and does not contain any kind of\n//       error handling. MUST be revised before using in production.\n\nfunction OnNewShellUI( shellUI ) {\n\n    /// <summary>The entry point of ShellUI module.</summary>\n    /// <param name="shellUI" type="MFiles.ShellUI">The new shell UI object.</param> \n    \n    // Register to be notified when a new normal shell frame (Event_NewShellFrame) is created.\n    // We use Event_NewShellFrame rather than Event_NewShellFrame as this won\'t fire for history (etc.) dialogs.\n    shellUI.Events.Register(\n        MFiles.Event.NewShellFrame,\n        handleNewShellFrame );\n}\n\nfunction handleNewShellFrame( shellFrame ) {\n\n    /// <summary>Handles the OnNewShellFrame event for an IShellUI.</summary>\n    /// <param name="shellFrame" type="MFiles.ShellFrame">The shell frame object which was created.</param> \n\n    // Register to listen to the started event.\n    shellFrame.Events.Register(\n        MFiles.Event.Started,\n        getShellFrameStartedHandler( shellFrame ) );\n}\n\nfunction getShellFrameStartedHandler( shellFrame ) {\n\n    /// <summary>Gets a function to handle the Started event for shell frame.</summary>\n    /// <param name="shellFrame" type="MFiles.ShellFrame">The current shell frame object.</param> \n    /// <returns type="MFiles.Events.OnStarted">The event handler.</returns>\n\n    // Return the handler function for ShellFrame\'s Started event.\n    return async () => {\n    \n        // Show the tab for new object creation.\n        const newObjectTab = await shellFrame.RightPane.AddTab( "newObject", "New Object", "_last");\n        newObjectTab.ShowDashboard( "MyDashboard", {} );\n        newObjectTab.Select();\n        newObjectTab.SetVisible( true );\n    };\n}\n\n')))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"dashboard.js")),(0,l.kt)(h,{mdxType:"Tabs"},(0,l.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'function getDashBoardContent() {\n    return `\n        <div>\n            <div class="method-container">\n                <div class="method-title">Show New Object Window (Blank template and User defined template)</div>\n                <div><div class="label">Object Type Id</div>: <input id="objectType" /></div>\n                <div><div class="label">Extension (Blank Template)</div>: <input id="extension" type="text" /></div>\n                <div><div class="label">Metadata card title</div>: <input id="mdCardTitle" type="text" /></div>\n                <div><div class="label">Object Title </div>: <input id="objectTitle" type="text" /></div>\n                <div><div class="label">Check in immediately</div>: <input id="checkin" class="checkbox" type="checkbox" /></div>\n                <div id="Sourcefile"><div><div>Source file (User defined template info) </div><textarea id="srcfile" spellcheck="false">{}</textarea><div></div></div></div>\n                <div>Currently we are supporting only default blank template formats such as .bmp, .accdb, .xlsx, .pptx, .pub, .vsdx, .docx, .txt. For other formats, MFD will be created by default.</div>\n            </div>\n        </div>\n    `;\n}\n\n// Show new object window.\nasync function showNewObjectWindow() {\n\n    // Read object type id value.\n    const objectTypeID = document.getElementById( "objectType" );\n    const objectType = Number( objectTypeID?.value );\n\n    // Read extension value.\n    const extensionType = document.getElementById( "extension" );\n    const extension = extensionType.value;\n\n    // Read metadata card title value.\n    const mdCardTitle = document.getElementById( "mdCardTitle" );\n    const mdTitle = mdCardTitle.value || "Untitled";\n\n    // Read object title value.\n    const objectTitleInfo = document.getElementById( "objectTitle" );\n    let objectTitle = objectTitleInfo.value;\n\n    // Read Check in immediately.\n    const checkin = document.getElementById( "checkin" );\n    const isCheckin = Boolean( checkin.checked );\n\n    // Read source files info.\n    const srcFile = document.getElementById( "srcfile" );\n    let srcfile = srcFile.value;\n\n    // Validate source file.\n    try {\n        srcfile = typeof srcfile === \'object\' ? srcfile : JSON.parse( srcfile );\n    } catch( exception ) {\n        console.error( exception );\n        return;\n    }\n\n    // Clear all the error messages.\n    showErrorMessage( "" );\n    let objFileSourceType = -1;\n\n    // Validate source file.\n    if( srcfile && Object.keys( srcfile ).length > 0 ) {\n        objFileSourceType = srcfile.type;\n    }\n\n    // Show error message for invalid object type.\n    if( isNaN( objectType ) || objectTypeID?.value === "" ) {\n        showErrorMessage( "Invalid object type id" );\n        return;\n    }\n\n    // In this example, we allowed only BLANK_TEMPLATE and USER_DEFINED_TEMPLATE.\n    if( objFileSourceType != 2 && objFileSourceType >=0  ) {\n        showErrorMessage( "Invalid ObjFileSource type. Use Type \'2\' for user defined template." );\n        return;\n    }\n\n    // Create object creation info.\n    let objectCreationInfo = null;\n    objectCreationInfo = {\n        title: objectTitle || "",\n        metadata_card_title: mdTitle || "",\n        extension: extension,\n        object_type: objectType,\n        source_files: srcfile,\n        check_in_immediately_enabled: isCheckin,\n        disallow_template_selection: true,\n        single_file_document: extension ? true : null\n    };\n\n    // Show new object window.\n    const resultFromCreationWindow = await MFiles.ShowNewObjectWindow(\n        objectType, // ObjectType\n        objectCreationInfo, // ObjectCreationInfo\n        [], // PrefilledPropertyValues\n        [] // AccessControlList\n    );\n\n    // Log the results from new object creation window.\n    console.log( resultFromCreationWindow );\n}\n\n// Show error message for given method.\nfunction showErrorMessage( errorMessage ) {\n    const errorMessageElement = document.getElementById( "error_message" );\n    errorMessageElement.innerHTML = errorMessage;\n}\n\nfunction OnNewDashboard( dashboard ) {\n\n    /// <summary>Executed by the UIX when a dashboared is started.</summary>\n    /// <param name="dashboard" type="MFiles.Dashboard">The dashboard object which was created.</param>\n\n    // Register a handler to listen the started event.\n    dashboard.Events.Register(\n        MFiles.Event.Started,\n        () => {\n\n            // Prepare the html content that to be updated.\n            const htmlContent = getDashBoardContent();\n\n            // Show and Update the dashboard content.\n            mainContent = document.getElementById( "Main" );\n            mainContent.innerHTML = htmlContent;\n            mainContent.style.display = "block";\n\n            // Bind the events.\n            // For opening a prefilled object creation window.\n            const btnOpenNewObjectWindow = document.getElementById( "btnOpenNewObjectWindow" );\n            btnOpenNewObjectWindow.addEventListener( "click", showNewObjectWindow );\n        }\n    );\n}\n\n')))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"style.css")),(0,l.kt)(h,{mdxType:"Tabs"},(0,l.kt)(p,{value:"css",label:"CSS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css"},'html, body {\n    font-family: Lato, "Segoe UI", Sans-Serif;\n    margin: 0;\n    background: #FFF;\n    height: 100%;\n    color: #0a1541;\n    font-size: 14px;\n    padding: 0 10px;\n}\n\ndiv {\n    padding: 4px 0;\n}\n\n.method-title {\n    font-size: 16px;\n    font-weight: 500;\n    color: #0a1541;\n}\n\n.method-container {\n    background: #F2F4F9;\n    border-radius: 14px;\n    padding: 10px 20px;\n    margin-bottom: 15px;\n}\n\nbutton {\n    width: 70px;\n    box-sizing: border-box;\n    border-width: 1px;\n    border-radius: 16px;\n    height: 26px;\n    cursor: pointer;\n    font-size: 14px;\n    border-color: #006eef;\n    background-color: #006eef;\n    color: #fff;\n}\n\ninput {\n    height: 22px;\n    padding: 2px 10px;\n    font-size: 14px;\n    line-height: 1.428571429;\n    color: #0a1541;\n    background-color: #fff;\n    background-image: none;\n    border: 1px solid #9da1b3;\n    border-radius: 8px;\n}\n\ninput:focus {\n    border-color: #006eef;\n    outline: 0;\n}\n\n.error-message {\n    color: red;\n}\n\n.label {\n    width: 200px;\n    display: inline-block;\n}\n\ntextarea {\n    height: 250px;\n    padding: 2px 5px;\n    font-size: 14px;\n    color: rgb(10, 21, 65);\n    border: 1px solid rgb(157, 161, 179);\n    border-radius: 8px;\n    width: calc(100% - 20px);\n}\n\n.checkbox {\n    height: 13px;\n    padding: 0;\n    margin: 0;\n}\n')))),(0,l.kt)("h2",{id:"testing-the-application"},"Testing the application"),(0,l.kt)("p",null,"  Pass different object type, extensions and user defined template object info to test object creation with blank template and user defined templates."))}b.isMDXComponent=!0},95706:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/BlankTemplate-07d6989bae25d6a417d080fa9335943d.png"},55934:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/UserDefined_Template-3596c75e35fac8d3cb91c5de313a39f2.png"}}]);