"use strict";(self.webpackChunkuix_2=self.webpackChunkuix_2||[]).push([[2834],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var a=n(67294);function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){m(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,m=function(e,t){if(null==e)return{};var n,a,m={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(m[n]=e[n]);return m}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(m[n]=e[n])}return m}var l=a.createContext({}),i=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=i(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,m=e.mdxType,o=e.originalType,l=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),c=i(n),p=m,h=c["".concat(l,".").concat(p)]||c[p]||u[p]||o;return n?a.createElement(h,r(r({ref:t},s),{},{components:n})):a.createElement(h,r({ref:t},s))}));function h(e,t){var n=arguments,m=t&&t.mdxType;if("string"==typeof e||m){var o=n.length,r=new Array(o);r[0]=p;var d={};for(var l in t)hasOwnProperty.call(t,l)&&(d[l]=t[l]);d.originalType=e,d[c]="string"==typeof e?e:m,r[1]=d;for(var i=2;i<o;i++)r[i]=n[i];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},47713:(e,t,n)=>{n.d(t,{ZP:()=>d});var a=n(87462),m=(n(67294),n(3905));const o={toc:[]},r="wrapper";function d(e){let{components:t,...n}=e;return(0,m.kt)(r,(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null},"Name"),(0,m.kt)("th",{parentName:"tr",align:null},"Value"),(0,m.kt)("th",{parentName:"tr",align:null},"Description"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"CommandState_Undefined")),(0,m.kt)("td",{parentName:"tr",align:null},"0"),(0,m.kt)("td",{parentName:"tr",align:null},"Undefined value.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"CommandState_Active")),(0,m.kt)("td",{parentName:"tr",align:null},"1"),(0,m.kt)("td",{parentName:"tr",align:null},"The command is visible and enabled.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"CommandState_Hidden")),(0,m.kt)("td",{parentName:"tr",align:null},"3"),(0,m.kt)("td",{parentName:"tr",align:null},"The command is not visible.")))))}d.isMDXComponent=!0},9826:(e,t,n)=>{n.d(t,{ZP:()=>d});var a=n(87462),m=(n(67294),n(3905));const o={toc:[]},r="wrapper";function d(e){let{components:t,...n}=e;return(0,m.kt)(r,(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-javascript"},"shellFrame.Commands.SetCommandState( \n    commandId, // The ID of the command which state is to be changed\n    MFiles.MenuLocation.MenuLocation_TopPaneMenu, // The menu location of the change\n    MFiles.CommandState.CommandState_Hidden  // New state of the command in specific location or\n);\n")))}d.isMDXComponent=!0},45274:(e,t,n)=>{n(87462),n(67294),n(3905),n(7606),n(94642),n(37415),n(47713),n(9826)},37415:(e,t,n)=>{n.d(t,{ZP:()=>d});var a=n(87462),m=(n(67294),n(3905));const o={toc:[]},r="wrapper";function d(e){let{components:t,...n}=e;return(0,m.kt)(r,(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,m.kt)("p",null,'This JavaScript code is a UI Extension for M-Files, creating custom commands such as "Hello World" and providing functionality to dynamically show, hide, and remove these commands from the top menu based on user interactions within the M-Files shell.'),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-javascript"},'\n// Called when the UI Extension starts\nfunction OnNewShellUI(shellUI) {\n\n    // Wait for the ShellFrame to be created.\n    shellUI.Events.Register(\n        MFiles.Event.NewShellFrame,\n        async (shellFrame) => {\n\n            // Wait for the shellframe to start\n            shellFrame.Events.Register( \n                MFiles.Event.Started,\n                async () => {\n\n                    // Create a new custom command and menu item for the command\n                    const createCommand = async ( name: string ) => {\n\n                        // Create a new custom command\n                        const commandId = await shellFrame.Commands.CreateCustomCommand(name);\n\n                        // Add the command to the top menu\n                        const menuItemId = await shellFrame.Commands.AddCustomCommandToMenu(\n                            // Command ID\n                            commands.exampleCommand,\n                            // Menulocation\n                            MFiles.MenuLocation.MenuLocation_TopPaneMenu, \n                            // Priority of the command\n                            1 \n                        );\n\n                        // Return a data structure containing essential information about the commands\n                        return {\n                            id: commandId, // ID of the command\n                            menuItemId     // Menu item ID, can be used to add sub menus to this menu item.\n                        }\n                    }\n\n                    // Create an Example command and a set of sample commands to control it\'s visibility\n                    const commands = {\n                        // This is the sample command\n                        exampleCommand : await createCommand("Hello World"),\n\n                        // These commands control the state of the example command\n                        addCommand: await createCommand("Add Command To Menu"),\n                        deleteCustomCommand: await createCommand("Delete Command")\n                        hideCommand: await createCommand("Hide Command"),\n                        showCommand: await createCommand("Activate Command"),\n                        executeCommand: await createCommand("Execute Command"),\n                        getCommandName: await createCommand("Get Name"),\n                        getCommandState: await createCommand("Get Command State"),\n                        removeCommandFromMenu: await createCommand("Remove From Menu"), \n                        removeCommand: await createCommand("Remove Command")\n                    }\n\n                    // Add the command to the top menu\n                    const menuItemId = await shellFrame.Commands.AddCustomCommandToMenu(\n                        commands.exampleCommand,, \n                        MFiles.MenuLocation.MenuLocation_TopPaneMenu, \n                        1 // Priority of the command\n                    );\n\n                    // Listen for the custom commands.\n                    shellFrame.Commands.Events.Register(\n\n                        // Listen for the CustomCommand events.\n                        MFiles.Event.CustomCommand,\n\n                        // Each command has ID and optional data provided with it.\n                        ( commandId, data ) => {\n                            // Respond to the command if custom command sent by the application \n                            switch( commandId ) {\n\n                                // Run the Example command\n                                case commands.exampleCommand.id:\n                                    shellFrame.ShowMessage( "Hello World!" );\n                                    break;\n\n                                // Add the new menuitem which runs the example command\n                                case commands.addCommand.id:\n                                    await shellFrame.Commands.AddCustomCommandToMenu(\n                                        commands.exampleCommand, \n                                        MFiles.MenuLocation.MenuLocation_TopPaneMenu, \n                                        1 // Priority of the command\n                                    );\n                                    break;\n\n                                // Removes the command from particular menu\n                                case commands.removeCommandFromMenu.id:\n                                    await shellFrame.Commands.RemoveCustomCommandFromMenu(\n                                        commands.exampleCommand,, \n                                        MFiles.MenuLocation.MenuLocation_TopPaneMenu\n                                    );\n                                    break;\n\n                                // Deletes the command permanently\n                                case commands.deleteCommand.id:\n                                    shellFrame.Commands.SetCommandState( \n                                        commandId, \n                                        MFiles.CommandLocation.MainMenu,\n                                        MFiles.CommandState.CommandState_Active\n                                    );\n                                    break;\n\n                                // Hiddes all command instances for specific command ID\n                                case commands.hideCommand.id:\n                                     // Hide the command \n                                    shellFrame.Commands.SetCommandState( \n                                        commandId, \n                                        MFiles.CommandLocation.MainMenu,\n                                        MFiles.CommandState.CommandState_Hidden\n                                    );\n                                    break;\n\n                                // Activates (makes visible) all command instances for specific command ID\n                                case commands.showCommand.id:\n                                     // Show the command \n                                    shellFrame.Commands.SetCommandState( \n                                        commandId, \n                                        MFiles.MenuLocation.MenuLocation_TopPaneMenu,\n                                        MFiles.CommandState.CommandState_Active\n                                    );\n                                    break;\n\n                                // Get the command name\n                                case commands.getCommandName.id:\n                                    const name = await shellFrame.Commands.getCommandName(commands.exampleCommand.id);\n                                    shellFrame.ShowMessage( name );\n                                    break;\n\n                                // Get the Command State\n                                case commands.getCommandState.id:\n\n                                    // NOTE: the MFiles.CommandLocation.MainMenu must be used to get state of items added to the Top Menu\n                                    const commandState = await shellFrame.Commands.getCommandState(commands.exampleCommand.id, MFiles.CommandLocation.MainMenu );\n                                    shellFrame.ShowMessage( `Command state: ${commandState}` );\n                                    break;\n\n                            }\n                        }\n                    );\n                }\n            )\n        }\n    )\n}\n')),(0,m.kt)("p",null,"This code is essentially setting up a simple UI extension with custom commands that can be triggered from the top menu, and it allows dynamic control over the visibility of these commands based on user interactions."))}d.isMDXComponent=!0},7606:(e,t,n)=>{n.d(t,{ZP:()=>d});var a=n(87462),m=(n(67294),n(3905));const o={toc:[]},r="wrapper";function d(e){let{components:t,...n}=e;return(0,m.kt)(r,(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null},"Name"),(0,m.kt)("th",{parentName:"tr",align:null},"Description"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./AddCustomCommandToMenu/"},"AddCustomCommandToMenu")),(0,m.kt)("td",{parentName:"tr",align:null},"Adds existing custom command to the specified context menu location.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./CreateCustomCommand/"},"CreateCustomCommand")),(0,m.kt)("td",{parentName:"tr",align:null},"Creates a custom command that can be added to the application toolbar or to the contextmenu.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./CreateSubMenuItem/"},"CreateSubMenuItem")),(0,m.kt)("td",{parentName:"tr",align:null},"Creates a new SubMenu for already created Menu.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./DeleteCustomCommand/"},"DeleteCustomCommand")),(0,m.kt)("td",{parentName:"tr",align:null},"Deletes a custom command. The command is automatically removed.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./ExecuteCommand/"},"ExecuteCommand")),(0,m.kt)("td",{parentName:"tr",align:null},"Executes a user command.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./GetCommandName/"},"GetCommandName")),(0,m.kt)("td",{parentName:"tr",align:null},"Resolves the name that has been associated with the given command id.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./GetCommandState/"},"GetCommandState")),(0,m.kt)("td",{parentName:"tr",align:null},"Gets the command state for builtin or custom command in specified location.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./GetMenuIdOfBuiltInCommand/"},"GetMenuIdOfBuiltInCommand")),(0,m.kt)("td",{parentName:"tr",align:null},"Gets the MenuItem ID of a built-in command by its command ID and location.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./RemoveCustomCommandFromMenu/"},"RemoveCustomCommandFromMenu")),(0,m.kt)("td",{parentName:"tr",align:null},"Removes a custom command from the specified menu location.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./RemoveMenuItem/"},"RemoveMenuItem")),(0,m.kt)("td",{parentName:"tr",align:null},"Removes menuitem from the menu.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./SetCommandState/"},"SetCommandState")),(0,m.kt)("td",{parentName:"tr",align:null},"Sets the command's state to be hidden, visible, enabled or disabled. Calling ",(0,m.kt)("br",null),"this method may affect context menu, application toolbar, menus or all of them.")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"./SetMenuItemState/"},"SetMenuItemState")),(0,m.kt)("td",{parentName:"tr",align:null},"Sets the MenuItem state individually.")))))}d.isMDXComponent=!0},94642:(e,t,n)=>{n.d(t,{ZP:()=>d});var a=n(87462),m=(n(67294),n(3905));const o={toc:[]},r="wrapper";function d(e){let{components:t,...n}=e;return(0,m.kt)(r,(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null},"Name"),(0,m.kt)("th",{parentName:"tr",align:null},"Type"),(0,m.kt)("th",{parentName:"tr",align:null},"Description"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},"Events"),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("a",{parentName:"td",href:"/UIExt2/Events/#icommandsevents"},"ICommandsEvents")),(0,m.kt)("td",{parentName:"tr",align:null},"Returns the event registering interface of the ICommands interface.")))))}d.isMDXComponent=!0},47059:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>c});var a=n(87462),m=(n(67294),n(3905)),o=n(7606),r=n(94642);n(37415),n(47713),n(9826),n(45274);const d={},l="ICommands",i={unversionedId:"UIExt2/Interfaces/ICommands/index",id:"UIExt2/Interfaces/ICommands/index",title:"ICommands",description:"The Commands API includes functionality for creating Custom Commands and menus.",source:"@site/docs/UIExt2/Interfaces/ICommands/index.mdx",sourceDirName:"UIExt2/Interfaces/ICommands",slug:"/UIExt2/Interfaces/ICommands/",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/UIExt2/Interfaces/ICommands/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Interfaces",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/UIExt2/Interfaces/"},next:{title:"AddCustomCommandToMenu",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/UIExt2/Interfaces/ICommands/AddCustomCommandToMenu/"}},s={},c=[{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2}],u={toc:c},p="wrapper";function h(e){let{components:t,...n}=e;return(0,m.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,m.kt)("h1",{id:"icommands"},"ICommands"),(0,m.kt)("p",null,"The Commands API includes functionality for creating ",(0,m.kt)("a",{parentName:"p",href:"../../../Overview/Commands/"},"Custom Commands")," and menus."),(0,m.kt)("p",null,"See the ",(0,m.kt)("a",{parentName:"p",href:"../../../Samples/"},"Samples")," for more examples of how to create custom commands and menus."),(0,m.kt)("h2",{id:"properties"},"Properties"),(0,m.kt)(r.ZP,{components:n.components,mdxType:"Properties"}),(0,m.kt)("h2",{id:"methods"},"Methods"),(0,m.kt)(o.ZP,{components:n.components,mdxType:"Methods"}))}h.isMDXComponent=!0}}]);