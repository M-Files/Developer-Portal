"use strict";(self.webpackChunkuix_2=self.webpackChunkuix_2||[]).push([[1838],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},m=Object.keys(e);for(a=0;a<m.length;a++)n=m[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(a=0;a<m.length;a++)n=m[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=a.createContext({}),l=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=l(e.components);return a.createElement(d.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,m=e.originalType,d=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=l(n),p=o,h=c["".concat(d,".").concat(p)]||c[p]||u[p]||m;return n?a.createElement(h,r(r({ref:t},s),{},{components:n})):a.createElement(h,r({ref:t},s))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var m=n.length,r=new Array(m);r[0]=p;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[c]="string"==typeof e?e:o,r[1]=i;for(var l=2;l<m;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1221:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>m,metadata:()=>i,toc:()=>l});var a=n(87462),o=(n(67294),n(3905));n(45274);const m={sidebar_position:1},r="Overview",i={unversionedId:"Overview/Overview",id:"Overview/Overview",title:"Overview",description:"User Interface Extensibility Framework applications are JavaScript applications that run within the M-Files Web client.  The framework provides a set of objects that allow you to interact with the user interface by adding commands to various menus, to add your own tabs/dashboards, or to react when various events fire within the user interface.  Applications can also use the M-Files Vault API to perform tasks within the vault such as searching or creating objects.",source:"@site/docs/Overview/Overview.mdx",sourceDirName:"Overview",slug:"/Overview/",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/Overview/",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/"},next:{title:"Application Structure",permalink:"/Frameworks/User-Interface-Extensibility-Framework/Reference/Overview/ApplicationStructure"}},d={},l=[{value:"What can be done using the User Interface Extensibility Framework?",id:"what-can-be-done-using-the-user-interface-extensibility-framework",level:2},{value:"How are UI applications structured?",id:"how-are-ui-applications-structured",level:2},{value:"How do I deploy and test my UI applications?",id:"how-do-i-deploy-and-test-my-ui-applications",level:2}],s={toc:l},c="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"overview"},"Overview"),(0,o.kt)("p",null,"User Interface Extensibility Framework applications are JavaScript applications that run within the M-Files Web client.  The ",(0,o.kt)("a",{parentName:"p",href:"../UIExt2"},"framework provides a set of objects")," that allow you to interact with the user interface by adding commands to various menus, to add your own tabs/dashboards, or to react when various events fire within the user interface.  Applications can also use the ",(0,o.kt)("a",{parentName:"p",href:"../gRPC"},"M-Files Vault API")," to perform tasks within the vault such as searching or creating objects."),(0,o.kt)("h2",{id:"what-can-be-done-using-the-user-interface-extensibility-framework"},"What can be done using the User Interface Extensibility Framework?"),(0,o.kt)("p",null,"The User Interface Extensibility Framework allows third-party developers to extend the M-Files client interface in a number of ways:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"By reacting when ",(0,o.kt)("a",{parentName:"li",href:"./Events#interface-events"},"events fire within the user interface"),", such as reacting when a user selects an object of a known type."),(0,o.kt)("li",{parentName:"ul"},"By adding ",(0,o.kt)("a",{parentName:"li",href:"./Commands"},"commands")," to either the main menu or context menu, and reacting when those commands are clicked."),(0,o.kt)("li",{parentName:"ul"},'By adding custom tabs to the user interface, allowing custom HTML pages ("',(0,o.kt)("a",{parentName:"li",href:"./Dashboards#open-a-new-dashboard-using-the-tab"},"dashboards"),'") to be shown within M-Files.'),(0,o.kt)("li",{parentName:"ul"},"By showing ",(0,o.kt)("a",{parentName:"li",href:"./Dashboards#open-a-popup-dashboard"},"popup dashboards"),", for example when a command is clicked."),(0,o.kt)("li",{parentName:"ul"},"By interacting with other components of the user interface through the ",(0,o.kt)("a",{parentName:"li",href:"../UIExt2"},"UIX API"),", or interacting with the vault via the ",(0,o.kt)("a",{parentName:"li",href:"../gRPC"},"Vault API"),"."),(0,o.kt)("li",{parentName:"ul"},"Using any combination of the above.")),(0,o.kt)("h2",{id:"how-are-ui-applications-structured"},"How are UI applications structured?"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"More information on the application structure is available in the ",(0,o.kt)("a",{parentName:"p",href:"./ApplicationStructure"},"dedicated page"),".")),(0,o.kt)("p",null,"UI applications are deployed as a ",(0,o.kt)("inlineCode",{parentName:"p"},".mfappx")," file, which is a renamed ",(0,o.kt)("inlineCode",{parentName:"p"},".zip")," file.  This archive contains the files that the application needs to run, including:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A manifest file named ",(0,o.kt)("inlineCode",{parentName:"li"},"appdef.xml")," which defines the application ID, name, modules, and dashboards."),(0,o.kt)("li",{parentName:"ul"},"At least one ",(0,o.kt)("a",{parentName:"li",href:"./Modules"},"module")," file which declares the application entry point."),(0,o.kt)("li",{parentName:"ul"},"Zero, one, or more ",(0,o.kt)("a",{parentName:"li",href:"./Dashboards"},"dashboard")," HTML file, along with any supporting files such as CSS, JavaScript, or images.")),(0,o.kt)("h2",{id:"how-do-i-deploy-and-test-my-ui-applications"},"How do I deploy and test my UI applications?"))}u.isMDXComponent=!0},47713:(e,t,n)=>{n.d(t,{ZP:()=>i});var a=n(87462),o=(n(67294),n(3905));const m={toc:[]},r="wrapper";function i(e){let{components:t,...n}=e;return(0,o.kt)(r,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Value"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"CommandState_Undefined")),(0,o.kt)("td",{parentName:"tr",align:null},"0"),(0,o.kt)("td",{parentName:"tr",align:null},"Undefined value.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"CommandState_Active")),(0,o.kt)("td",{parentName:"tr",align:null},"1"),(0,o.kt)("td",{parentName:"tr",align:null},"The command is visible and enabled.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"CommandState_Hidden")),(0,o.kt)("td",{parentName:"tr",align:null},"3"),(0,o.kt)("td",{parentName:"tr",align:null},"The command is not visible.")))))}i.isMDXComponent=!0},9826:(e,t,n)=>{n.d(t,{ZP:()=>i});var a=n(87462),o=(n(67294),n(3905));const m={toc:[]},r="wrapper";function i(e){let{components:t,...n}=e;return(0,o.kt)(r,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"shellFrame.Commands.SetCommandState( \n    commandId, // The ID of the command which state is to be changed\n    MFiles.MenuLocation.MenuLocation_TopPaneMenu, // The menu location of the change\n    MFiles.CommandState.CommandState_Hidden  // New state of the command in specific location or\n);\n")))}i.isMDXComponent=!0},45274:(e,t,n)=>{n(87462),n(67294),n(3905),n(7606),n(94642),n(37415),n(47713),n(9826)},37415:(e,t,n)=>{n.d(t,{ZP:()=>i});var a=n(87462),o=(n(67294),n(3905));const m={toc:[]},r="wrapper";function i(e){let{components:t,...n}=e;return(0,o.kt)(r,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,'This JavaScript code is a UI Extension for M-Files, creating custom commands such as "Hello World" and providing functionality to dynamically show, hide, and remove these commands from the top menu based on user interactions within the M-Files shell.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'\n// Called when the UI Extension starts\nfunction OnNewShellUI(shellUI) {\n\n    // Wait for the ShellFrame to be created.\n    shellUI.Events.Register(\n        MFiles.Event.NewShellFrame,\n        async (shellFrame) => {\n\n            // Wait for the shellframe to start\n            shellFrame.Events.Register( \n                MFiles.Event.Started,\n                async () => {\n\n                    // Create a new custom command and menu item for the command\n                    const createCommand = async ( name: string ) => {\n\n                        // Create a new custom command\n                        const commandId = await shellFrame.Commands.CreateCustomCommand(name);\n\n                        // Add the command to the top menu\n                        const menuItemId = await shellFrame.Commands.AddCustomCommandToMenu(\n                            // Command ID\n                            commands.exampleCommand,\n                            // Menulocation\n                            MFiles.MenuLocation.MenuLocation_TopPaneMenu, \n                            // Priority of the command\n                            1 \n                        );\n\n                        // Return a data structure containing essential information about the commands\n                        return {\n                            id: commandId, // ID of the command\n                            menuItemId     // Menu item ID, can be used to add sub menus to this menu item.\n                        }\n                    }\n\n                    // Create an Example command and a set of sample commands to control it\'s visibility\n                    const commands = {\n                        // This is the sample command\n                        exampleCommand : await createCommand("Hello World"),\n\n                        // These commands control the state of the example command\n                        addCommand: await createCommand("Add Command To Menu"),\n                        deleteCustomCommand: await createCommand("Delete Command")\n                        hideCommand: await createCommand("Hide Command"),\n                        showCommand: await createCommand("Activate Command"),\n                        executeCommand: await createCommand("Execute Command"),\n                        getCommandName: await createCommand("Get Name"),\n                        getCommandState: await createCommand("Get Command State"),\n                        removeCommandFromMenu: await createCommand("Remove From Menu"), \n                        removeCommand: await createCommand("Remove Command")\n                    }\n\n                    // Add the command to the top menu\n                    const menuItemId = await shellFrame.Commands.AddCustomCommandToMenu(\n                        commands.exampleCommand,, \n                        MFiles.MenuLocation.MenuLocation_TopPaneMenu, \n                        1 // Priority of the command\n                    );\n\n                    // Listen for the custom commands.\n                    shellFrame.Commands.Events.Register(\n\n                        // Listen for the CustomCommand events.\n                        MFiles.Event.CustomCommand,\n\n                        // Each command has ID and optional data provided with it.\n                        ( commandId, data ) => {\n                            // Respond to the command if custom command sent by the application \n                            switch( commandId ) {\n\n                                // Run the Example command\n                                case commands.exampleCommand.id:\n                                    shellFrame.ShowMessage( "Hello World!" );\n                                    break;\n\n                                // Add the new menuitem which runs the example command\n                                case commands.addCommand.id:\n                                    await shellFrame.Commands.AddCustomCommandToMenu(\n                                        commands.exampleCommand, \n                                        MFiles.MenuLocation.MenuLocation_TopPaneMenu, \n                                        1 // Priority of the command\n                                    );\n                                    break;\n\n                                // Removes the command from particular menu\n                                case commands.removeCommandFromMenu.id:\n                                    await shellFrame.Commands.RemoveCustomCommandFromMenu(\n                                        commands.exampleCommand,, \n                                        MFiles.MenuLocation.MenuLocation_TopPaneMenu\n                                    );\n                                    break;\n\n                                // Deletes the command permanently\n                                case commands.deleteCommand.id:\n                                    shellFrame.Commands.SetCommandState( \n                                        commandId, \n                                        MFiles.CommandLocation.MainMenu,\n                                        MFiles.CommandState.CommandState_Active\n                                    );\n                                    break;\n\n                                // Hiddes all command instances for specific command ID\n                                case commands.hideCommand.id:\n                                     // Hide the command \n                                    shellFrame.Commands.SetCommandState( \n                                        commandId, \n                                        MFiles.CommandLocation.MainMenu,\n                                        MFiles.CommandState.CommandState_Hidden\n                                    );\n                                    break;\n\n                                // Activates (makes visible) all command instances for specific command ID\n                                case commands.showCommand.id:\n                                     // Show the command \n                                    shellFrame.Commands.SetCommandState( \n                                        commandId, \n                                        MFiles.MenuLocation.MenuLocation_TopPaneMenu,\n                                        MFiles.CommandState.CommandState_Active\n                                    );\n                                    break;\n\n                                // Get the command name\n                                case commands.getCommandName.id:\n                                    const name = await shellFrame.Commands.getCommandName(commands.exampleCommand.id);\n                                    shellFrame.ShowMessage( name );\n                                    break;\n\n                                // Get the Command State\n                                case commands.getCommandState.id:\n\n                                    // NOTE: the MFiles.CommandLocation.MainMenu must be used to get state of items added to the Top Menu\n                                    const commandState = await shellFrame.Commands.getCommandState(commands.exampleCommand.id, MFiles.CommandLocation.MainMenu );\n                                    shellFrame.ShowMessage( `Command state: ${commandState}` );\n                                    break;\n\n                            }\n                        }\n                    );\n                }\n            )\n        }\n    )\n}\n')),(0,o.kt)("p",null,"This code is essentially setting up a simple UI extension with custom commands that can be triggered from the top menu, and it allows dynamic control over the visibility of these commands based on user interactions."))}i.isMDXComponent=!0},7606:(e,t,n)=>{n.d(t,{ZP:()=>i});var a=n(87462),o=(n(67294),n(3905));const m={toc:[]},r="wrapper";function i(e){let{components:t,...n}=e;return(0,o.kt)(r,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./AddCustomCommandToMenu/"},"AddCustomCommandToMenu")),(0,o.kt)("td",{parentName:"tr",align:null},"Adds existing custom command to the specified context menu location.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./CreateCustomCommand/"},"CreateCustomCommand")),(0,o.kt)("td",{parentName:"tr",align:null},"Creates a custom command that can be added to the application toolbar or to the contextmenu.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./CreateSubMenuItem/"},"CreateSubMenuItem")),(0,o.kt)("td",{parentName:"tr",align:null},"Creates a new SubMenu for already created Menu.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./DeleteCustomCommand/"},"DeleteCustomCommand")),(0,o.kt)("td",{parentName:"tr",align:null},"Deletes a custom command. The command is automatically removed.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./ExecuteCommand/"},"ExecuteCommand")),(0,o.kt)("td",{parentName:"tr",align:null},"Executes a user command.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./GetCommandName/"},"GetCommandName")),(0,o.kt)("td",{parentName:"tr",align:null},"Resolves the name that has been associated with the given command id.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./GetCommandState/"},"GetCommandState")),(0,o.kt)("td",{parentName:"tr",align:null},"Gets the command state for builtin or custom command in specified location.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./GetMenuIdOfBuiltInCommand/"},"GetMenuIdOfBuiltInCommand")),(0,o.kt)("td",{parentName:"tr",align:null},"Gets the MenuItem ID of a built-in command by its command ID and location.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./RemoveCustomCommandFromMenu/"},"RemoveCustomCommandFromMenu")),(0,o.kt)("td",{parentName:"tr",align:null},"Removes a custom command from the specified menu location.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./RemoveMenuItem/"},"RemoveMenuItem")),(0,o.kt)("td",{parentName:"tr",align:null},"Removes menuitem from the menu.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./SetCommandState/"},"SetCommandState")),(0,o.kt)("td",{parentName:"tr",align:null},"Sets the command's state to be hidden, visible, enabled or disabled. Calling ",(0,o.kt)("br",null),"this method may affect context menu, application toolbar, menus or all of them.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./SetMenuItemState/"},"SetMenuItemState")),(0,o.kt)("td",{parentName:"tr",align:null},"Sets the MenuItem state individually.")))))}i.isMDXComponent=!0},94642:(e,t,n)=>{n.d(t,{ZP:()=>i});var a=n(87462),o=(n(67294),n(3905));const m={toc:[]},r="wrapper";function i(e){let{components:t,...n}=e;return(0,o.kt)(r,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Events"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/UIExt2/Events/#icommandsevents"},"ICommandsEvents")),(0,o.kt)("td",{parentName:"tr",align:null},"Returns the event registering interface of the ICommands interface.")))))}i.isMDXComponent=!0}}]);